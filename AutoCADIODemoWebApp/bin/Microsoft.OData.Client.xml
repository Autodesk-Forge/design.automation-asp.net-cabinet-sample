<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.OData.Client</name>
    </assembly>
    <members>
        <member name="T:Microsoft.OData.Client.EdmValueParser">
            <summary>
            Contains xml parsing methods for Edm.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EdmValueParser.DayTimeDurationValidator">
            <summary>
            This pattern eliminates all durations with year or month fields, leaving only those with day, hour, minutes, and/or seconds fields
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.ParseDuration(System.String)">
            <summary>
            Converts a string to a TimeSpan.
            </summary>
            <param name="value">The string to be converted. The string must be an edm:Duration expression</param>
            <returns>A TimeSpan equivalent of the string.</returns>
            <exception cref="T:System.FormatException">Throws if the given string is not an edm:Duration expression</exception>
            <exception cref="T:System.OverflowException">Throws if the given duration is greater than P10675199DT2H48M5.4775807S or less than P10675199DT2H48M5.4775807S</exception>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseBinary(System.String,System.Byte[]@)">
            <summary>
            Attempts to parse a byte[] value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The byte[] resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseBool(System.String,System.Nullable{System.Boolean}@)">
            <summary>
            Attempts to parse a bool value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The bool resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseDuration(System.String,System.Nullable{System.TimeSpan}@)">
            <summary>
            Attempts to parse a TimeSpan value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The TimeSpan resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseDateTimeOffset(System.String,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Attempts to parse a DateTimeOffset value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The DateTimeOffset resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseInt(System.String,System.Nullable{System.Int32}@)">
            <summary>
            Attempts to parse a int value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The int resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseLong(System.String,System.Nullable{System.Int64}@)">
            <summary>
            Attempts to parse a long value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The long resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseDecimal(System.String,System.Nullable{System.Decimal}@)">
            <summary>
            Attempts to parse a decimal value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The decimal resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseFloat(System.String,System.Nullable{System.Double}@)">
            <summary>
            Attempts to parse a double value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The double resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseGuid(System.String,System.Nullable{System.Guid}@)">
            <summary>
            Attempts to parse a Guid value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The Guid resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseDate(System.String,System.Nullable{Microsoft.OData.Edm.Library.Date}@)">
            <summary>
            Attempts to parse a Date value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The Date resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseTimeOfDay(System.String,System.Nullable{Microsoft.OData.Edm.Library.TimeOfDay}@)">
            <summary>
            Attempts to parse a TimeOfDay value from the specified text.
            </summary>
            <param name="value">Input string</param>
            <param name="result">The TimeOfDay resulting from parsing the string value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueParser.TryParseCharAsBinary(System.Char,System.Byte@)">
            <summary>
            Attempts to parse a byte value from the specified char.
            </summary>
            <param name="c">Input char</param>
            <param name="b">The byte resulting from parsing the char value</param>
            <returns>true if the value was parsed successfully, false otherwise</returns>
        </member>
        <member name="T:Microsoft.OData.Client.EdmValueWriter">
            <summary>
            Contains methods to convert primitive values to their string representation.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EdmValueWriter.Hex">
            <summary>
            Characters used in string representations of hexadecimal values
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.StringAsXml(System.String)">
            <summary>
            Converts the String to a String.
            </summary>
            <param name="s">The value to convert.</param>
            <returns>The value to convert.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.BinaryAsXml(System.Byte[])">
            <summary>
            Converts the Byte[] to a String.
            </summary>
            <param name="binary">The value to convert.</param>
            <returns>A string representation of the Byte[].</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.BooleanAsXml(System.Boolean)">
            <summary>
            Converts the Boolean to a String.
            </summary>
            <param name="b">The value to convert.</param>
            <returns>A string representation of the Boolean, that is, "true" or "false".</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.BooleanAsXml(System.Nullable{System.Boolean})">
            <summary>
            Converts the Boolean? to a String.
            </summary>
            <param name="b">The value to convert.</param>
            <returns>A string representation of the Boolean, that is, "true" or "false".</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.IntAsXml(System.Int32)">
            <summary>
            Converts the Int32 to a String.
            </summary>
            <param name="i">The value to convert</param>
            <returns>A string representation of the Int32.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.IntAsXml(System.Nullable{System.Int32})">
            <summary>
            Converts the Int32? to a String.
            </summary>
            <param name="i">The value to convert</param>
            <returns>A string representation of the Int32.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.LongAsXml(System.Int64)">
            <summary>
            Converts the Int64 to a String.
            </summary>
            <param name="l">The value to convert.</param>
            <returns>A string representation of the Int64.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.FloatAsXml(System.Double)">
            <summary>
            Converts the Double to a String.
            </summary>
            <param name="f">The value to convert.</param>
            <returns>A string representation of the Double.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.DecimalAsXml(System.Decimal)">
            <summary>
            Converts the Decimal to a String.
            </summary>
            <param name="d">The value to convert.</param>
            <returns>A string representation of the Decimal.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.DurationAsXml(System.TimeSpan)">
            <summary>
            Converts the TimeSpan to a String.
            </summary>
            <param name="d">The value to convert.</param>
            <returns>A string representation of the TimeSpan.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.DateTimeOffsetAsXml(System.DateTimeOffset)">
            <summary>
            Converts the DateTimeOffset to a String.
            </summary>
            <param name="d">The System.DateTimeOffset to be converted.</param>
            <returns>A System.String representation of the supplied System.DateTimeOffset.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.DateAsXml(Microsoft.OData.Edm.Library.Date)">
            <summary>
            Converts the Date to a String.
            </summary>
            <param name="d">The <see cref="T:Microsoft.OData.Edm.Library.Date"/> to be converted</param>
            <returns>A System.String representation of the supplied <see cref="T:Microsoft.OData.Edm.Library.Date"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.TimeOfDayAsXml(Microsoft.OData.Edm.Library.TimeOfDay)">
            <summary>
            Converts the TimeOfDay to a String.
            </summary>
            <param name="time">The <see cref="T:Microsoft.OData.Edm.Library.TimeOfDay"/> to be converted</param>
            <returns>A System.String representation of the supplied <see cref="T:Microsoft.OData.Edm.Library.TimeOfDay"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueWriter.GuidAsXml(System.Guid)">
            <summary>
            Converts the Guid to a String.
            </summary>
            <param name="g">The value to convert.</param>
            <returns>A string representation of the Guid.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.EdmValueUtils">
            <summary>
            Class with utility methods to deal with EDM values
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueUtils.ConvertPrimitiveValue(System.Object,Microsoft.OData.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Converts a primitive OData value to the corresponding <see cref="T:Microsoft.OData.Edm.Values.IEdmDelayedValue"/>.
            </summary>
            <param name="primitiveValue">The primitive OData value to convert.</param>
            <param name="type">The <see cref="T:Microsoft.OData.Edm.IEdmTypeReference"/> for the primitive value (if available).</param>
            <returns>An <see cref="T:Microsoft.OData.Edm.Values.IEdmDelayedValue"/> for the <paramref name="primitiveValue"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueUtils.ToClrValue(Microsoft.OData.Edm.Values.IEdmPrimitiveValue)">
            <summary>
            Gets the clr value of the edm value based on its type.
            </summary>
            <param name="edmValue">The edm value.</param>
            <returns>The clr value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueUtils.ConvertFloatingValue(Microsoft.OData.Edm.Values.IEdmFloatingValue,Microsoft.OData.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Converts a floating-point edm value to a clr value
            </summary>
            <param name="floatingValue">The edm floating-point value.</param>
            <param name="primitiveKind">Kind of the primitive.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueUtils.ConvertIntegerValue(Microsoft.OData.Edm.Values.IEdmIntegerValue,Microsoft.OData.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Converts an integer edm value to a clr value.
            </summary>
            <param name="integerValue">The integer value.</param>
            <param name="primitiveKind">Kind of the primitive.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueUtils.ConvertPrimitiveValueWithoutTypeCode(System.Object,Microsoft.OData.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Convert a primitive value which didn't match any of the known values of the TypeCode enumeration.
            </summary>
            <param name="primitiveValue">The value to convert.</param>
            <param name="type">The expected primitive type or null.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueUtils.TryConvertClientSpecificPrimitiveValue(System.Object,Microsoft.OData.Edm.IEdmPrimitiveTypeReference,Microsoft.OData.Edm.Values.IEdmDelayedValue@)">
            <summary>
            Tries to convert the given value if it is of a type specific to the client library but still able to be mapped to EDM.
            </summary>
            <param name="primitiveValue">The value to convert.</param>
            <param name="type">The expected type of the value or null.</param>
            <param name="convertedValue">The converted value, if conversion was possible.</param>
            <returns>Whether or not conversion was possible.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EdmValueUtils.EnsurePrimitiveType(Microsoft.OData.Edm.IEdmPrimitiveTypeReference,Microsoft.OData.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Ensures a primitive type reference for a given primitive type kind.
            </summary>
            <param name="type">The possibly null type reference.</param>
            <param name="primitiveKindFromValue">The primitive type kind to ensure.</param>
            <returns>An <see cref="T:Microsoft.OData.Edm.IEdmPrimitiveTypeReference"/> instance created for the <paramref name="primitiveKindFromValue"/> 
            if <paramref name="type"/> is null; if <paramref name="type"/> is not null, validates it and then returns it.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ODataEntityMetadataBuilder">
            <summary>
            Extensibility point for customizing how OData entity metadata (edit-links, IDs, ETags, etc) is built.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.GetEditLink">
            <summary>
            Gets the edit link of the entity.
            </summary>
            <returns>
            The absolute URI of the edit link for the entity.
            Or null if it is not possible to determine the edit link.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.GetReadLink">
            <summary>
            Gets the read link of the entity.
            </summary>
            <returns>
            The absolute URI of the read link for the entity.
            Or null if it is not possible to determine the read link.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.GetId">
            <summary>
            Gets the ID of the entity.
            </summary>
            <returns>
            The ID for the entity.
            Or null if it is not possible to determine the ID.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.TryGetIdForSerialization(System.Uri@)">
            <summary>
            Get the id that need to be written into wire
            </summary>
            <param name="id">The id return to the caller</param>
            <returns>
            If writer should write odata.id property into wire
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.GetETag">
            <summary>
            Gets the ETag of the entity.
            </summary>
            <returns>
            The ETag for the entity.
            Or null if it is not possible to determine the ETag.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.GetStreamEditLink(System.String)">
            <summary>
            Gets the edit link of a stream value.
            </summary>
            <param name="streamPropertyName">The name of the stream property the edit link is computed for; 
            or null for the default media resource.</param>
            <returns>
            The absolute URI of the edit link for the specified stream property or the default media resource.
            Or null if it is not possible to determine the stream edit link.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.GetStreamReadLink(System.String)">
            <summary>
            Gets the read link of a stream value.
            </summary>
            <param name="streamPropertyName">The name of the stream property the read link is computed for; 
            or null for the default media resource.</param>
            <returns>
            The absolute URI of the read link for the specified stream property or the default media resource.
            Or null if it is not possible to determine the stream read link.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.GetNavigationLinkUri(System.String,System.Uri,System.Boolean)">
            <summary>
            Gets the navigation link URI for the specified navigation property.
            </summary>
            <param name="navigationPropertyName">The name of the navigation property to get the navigation link URI for.</param>
            <param name="navigationLinkUrl">The value of the link URI as seen on the wire or provided explicitly by the user or previously returned by the metadata builder, which may be null.</param>
            <param name="hasNavigationLinkUrl">true if the value of the <paramref name="navigationLinkUrl"/> was seen on the wire or provided explicitly by the user or previously returned by
            the metadata builder, false otherwise. This flag allows the metadata builder to determine whether a null navigation link url is an uninitialized value or a value that was set explicitly.</param>
            <returns>
            The navigation link URI for the navigation property.
            null if its not possible to determine the navigation link for the specified navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.GetAssociationLinkUri(System.String,System.Uri,System.Boolean)">
            <summary>
            Gets the association link URI for the specified navigation property.
            </summary>
            <param name="navigationPropertyName">The name of the navigation property to get the association link URI for.</param>
            <param name="associationLinkUrl">The value of the link URI as seen on the wire or provided explicitly by the user or previously returned by the metadata builder, which may be null.</param>
            <param name="hasAssociationLinkUrl">true if the value of the <paramref name="associationLinkUrl"/> was seen on the wire or provided explicitly by the user or previously returned by
            the metadata builder, false otherwise. This flag allows the metadata builder to determine whether a null association link url is an uninitialized value or a value that was set explicitly.</param>
            <returns>
            The association link URI for the navigation property.
            null if its not possible to determine the association link for the specified navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.GetOperationTargetUri(System.String,System.String,System.String)">
            <summary>
            Get the operation target URI for the specified <paramref name="operationName"/>.
            </summary>
            <param name="operationName">The fully qualified name of the operation for which to get the target URI.</param>
            <param name="bindingParameterTypeName">The binding parameter type name to include in the target, or null/empty if there is none.</param>
            <param name="parameterNames">The parameter names to include in the target, or null/empty if there is none.</param>
            <returns>
            The target URI for the operation.
            null if it is not possible to determine the target URI for the specified operation.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataEntityMetadataBuilder.GetOperationTitle(System.String)">
            <summary>
            Get the operation title for the specified <paramref name="operationName"/>.
            </summary>
            <param name="operationName">The fully qualified name of the operation for which to get the target URI.</param>
            <returns>
            The title for the operation.
            null if it is not possible to determine the title for the specified operation.
            </returns>
        </member>
        <member name="P:Microsoft.OData.Client.ODataEntityMetadataBuilder.ParentMetadataBuilder">
            <summary>
            Gets instance of the metadata builder which belongs to the parent odata entry
            </summary>
            <returns>
            The metadata builder of the parent odata entry
            Or null if there is no parent odata entry
            </returns>
        </member>
        <member name="T:Microsoft.OData.Client.ODataUriBuilder">
            <summary>
            Extensibility point for customizing how OData uri's are built.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataUriBuilder.BuildBaseUri">
            <summary>
            Builds the base URI for the entity container.
            </summary>
            <returns>
            The base URI for the entity container.
            This can be either an absolute URI,
            or relative URI which will be combined with the URI of the metadata document for the service.
            null if the model doesn't have the service base URI annotation.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataUriBuilder.BuildEntitySetUri(System.Uri,System.String)">
            <summary>
            Builds the URI for an entity set.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="entitySetName">The entity set name.</param>
            <returns>The entity set URI.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataUriBuilder.BuildEntityInstanceUri(System.Uri,Microsoft.OData.Edm.Values.IEdmStructuredValue)">
            <summary>
            Appends to create the entity instance URI for the specified <paramref name="entityInstance"/>.
            </summary>
            <param name="baseUri">The URI to append to</param>
            <param name="entityInstance">The entity instance to use.</param>
            <returns>
            The entity instance URI.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataUriBuilder.BuildStreamEditLinkUri(System.Uri,System.String)">
            <summary>
            Builds the edit link for a stream property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="streamPropertyName">
            The name of the stream property the link is computed for; 
            or null for the default media resource.
            </param>
            <returns>The edit link for the stream.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataUriBuilder.BuildStreamReadLinkUri(System.Uri,System.String)">
            <summary>
            Builds the read link for a stream property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="streamPropertyName">
            The name of the stream property the link is computed for; 
            or null for the default media resource.
            </param>
            <returns>The read link for the stream.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataUriBuilder.BuildNavigationLinkUri(System.Uri,System.String)">
            <summary>
            Builds the navigation link for the navigation property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="navigationPropertyName">The name of the navigation property to get the navigation link URI for.</param>
            <returns>The navigation link URI for the navigation property.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataUriBuilder.BuildAssociationLinkUri(System.Uri,System.String)">
            <summary>
            Builds the association link for the navigation property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="navigationPropertyName">The name of the navigation property to get the association link URI for.</param>
            <returns>The association link URI for the navigation property.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataUriBuilder.BuildOperationTargetUri(System.Uri,System.String,System.String,System.String)">
            <summary>
            Builds the operation target URI for the specified <paramref name="operationName"/>.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="operationName">The fully qualified name of the operation for which to get the target URI.</param>
            <param name="bindingParameterTypeName">The binding parameter type name to include in the target, or null/empty if there is none.</param>
            <param name="parameterNames">The parameter names to include in the target, or null/empty if there is none.</param>
            <returns>The target URI for the operation.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataUriBuilder.AppendTypeSegment(System.Uri,System.String)">
            <summary>
            Builds a URI with the given type name appended as a new segment on the base URI.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="typeName">The fully qualified type name to append.</param>
            <returns>The URI with the type segment appended.</returns>
        </member>
        <member name="T:Microsoft.OData.Core.Json.JsonSharedUtils">
            <summary>
            Shared JSON util code for ODataLib and Server.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Core.Json.JsonSharedUtils.IsDoubleValueSerializedAsString(System.Double)">
            <summary>
            Determines if the given double is serialized as a string in JSON.
            </summary>
            <param name="value">The value to check.</param>
            <returns>true if the value should be written as a string, false if should be written as a JSON number.</returns>
        </member>
        <member name="M:Microsoft.OData.Core.Json.JsonSharedUtils.ValueTypeMatchesJsonType(Microsoft.OData.Core.ODataPrimitiveValue,Microsoft.OData.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Determines if the given primitive value is of a basic type where we can rely on just the JSON representation to convey type information.
            If so, we don't have to write the type name.
            </summary>
            <param name="primitiveValue">The primitive value in question.</param>
            <param name="valueTypeReference">The type of the primitive value.</param>
            <returns>true if the given primitive value is of a basic JSON type, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.SimpleLazy`1">
            <summary>
            A simple implementation of LazyOfT since the framework version is not available in all platforms we compile this code in...
            </summary>
            <typeparam name="T">Type to lazy create.</typeparam>
        </member>
        <member name="F:Microsoft.OData.Client.SimpleLazy`1.mutex">
            <summary>
            For thread safty in creating the value.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SimpleLazy`1.factory">
            <summary>
            The factory method to create the lazy instance.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SimpleLazy`1.value">
            <summary>
            Holds the lazy instance to create.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SimpleLazy`1.valueCreated">
            <summary>
            true if the factory method has been called, false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SimpleLazy`1.#ctor(System.Func{`0})">
            <summary>
            Creates an instance of ODataLazyOfT.
            </summary>
            <param name="factory">The factory method to create the lazy instance.</param>
        </member>
        <member name="M:Microsoft.OData.Client.SimpleLazy`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Creates an instance of ODataLazyOfT.
            </summary>
            <param name="factory">The factory method to create the lazy instance.</param>
            <param name="isThreadSafe">true if the value will be created in a thread safety, false assume single thread access to Value.</param>
        </member>
        <member name="M:Microsoft.OData.Client.SimpleLazy`1.CreateValue">
            <summary>
            Creates the value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.SimpleLazy`1.Value">
            <summary>
            Creates the value if it hasn't already been created and returns the created value.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.LiteralFormatter">
            <summary>
            Component for formatting literals for use in URIs, ETags, and skip-tokens.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.LiteralFormatter.DefaultInstance">
            <summary>Default singleton instance for parenthetical keys, etags, or skiptokens.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LiteralFormatter.KeyAsSegmentInstance">
            <summary>Default singleton instance for keys formatted as segments.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.ForKeys(System.Boolean)">
            <summary>
            Gets the literal formatter for keys.
            </summary>
            <param name="keysAsSegment">if set to <c>true</c> then the key is going to be written as a segment, rather than in parentheses.</param>
            <returns>The literal formatter for keys.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.Format(System.Object)">
            <summary>Converts the specified value to an encoded, serializable string for URI key.</summary>
            <param name="value">Non-null value to convert.</param>
            <returns>value converted to a serializable string for URI key.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.EscapeResultForUri(System.String)">
            <summary>
            Escapes the result accoridng to URI escaping rules.
            </summary>
            <param name="result">The result to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.ConvertByteArrayToKeyString(System.Byte[])">
            <summary>Converts the given byte[] into string.</summary>
            <param name="byteArray">byte[] that needs to be converted.</param>
            <returns>String containing hex values representing the byte[].</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.FormatRawLiteral(System.Object)">
            <summary>
            Formats the literal without a type prefix, quotes, or escaping.
            </summary>
            <param name="value">The non-null value to format.</param>
            <returns>The formatted literal, without type marker or quotes.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.FormatAndEscapeLiteral(System.Object)">
            <summary>
            Formats the literal without a type prefix or quotes, but does escape it.
            </summary>
            <param name="value">The non-null value to format.</param>
            <returns>The formatted literal, without type marker or quotes.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.LiteralFormatter.ForConstants">
            <summary>
            Gets the literal formatter for URL constants.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.LiteralFormatter.SharedUtils">
            <summary>
            Helper utilities that capture any deltas between ODL, the WCF DS Client, and the WCF DS Server.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.SharedUtils.CreateExceptionForUnconvertableType(System.Object)">
            <summary>
            Creates a new exception instance to be thrown if the value is not a type that can be formatted as a literal.
            DEVNOTE: Will return a different exception depending on whether this is ODataLib, the WCF DS Server, or the WCF DS client.
            </summary>
            <param name="value">The literal value that could not be converted.</param>
            <returns>The exception that should be thrown.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.SharedUtils.TryConvertToStandardType(System.Object,System.Object@)">
            <summary>
            Tries to convert the given value to one of the standard recognized types. Used specifically for handling XML and binary types.
            </summary>
            <param name="value">The original value.</param>
            <param name="converted">The value converted to one of the standard types.</param>
            <returns>Whether or not the value was converted.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.SharedUtils.AppendDecimalMarkerToDouble(System.String)">
            <summary>
            Appends the decimal marker to string form of double value if necessary.
            DEVNOTE: Only used by the client and ODL, for legacy/back-compat reasons.
            </summary>
            <param name="input">Input string.</param>
            <returns>String with decimal marker optionally added.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.SharedUtils.TryGetByteArrayFromBinary(System.Object,System.Byte[]@)">
            <summary>
            Tries to convert an instance of System.Data.Linq.Binary to a byte array.
            </summary>
            <param name="value">The original value which might be an instance of System.Data.Linq.Binary.</param>
            <param name="array">The converted byte array, if it was converted.</param>
            <returns>Whether or not the value was converted.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.LiteralFormatter.DefaultLiteralFormatter">
            <summary>
            Default literal formatter implementation.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.LiteralFormatter.DefaultLiteralFormatter.disableUrlEncoding">
            <summary>If true, literals will not be URL encoded.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.DefaultLiteralFormatter.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.OData.Client.LiteralFormatter.DefaultLiteralFormatter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.DefaultLiteralFormatter.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.OData.Client.LiteralFormatter.DefaultLiteralFormatter"/>.
            </summary>
            <param name="disableUrlEncoding">If true, literals will not be URL encoded.</param>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.DefaultLiteralFormatter.Format(System.Object)">
            <summary>Converts the specified value to an encoded, serializable string for URI key.</summary>
            <param name="value">Non-null value to convert.</param>
            <returns>value converted to a serializable string for URI key.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.DefaultLiteralFormatter.EscapeResultForUri(System.String)">
            <summary>
            Escapes the result accoridng to URI escaping rules.
            </summary>
            <param name="result">The result to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.DefaultLiteralFormatter.FormatLiteralWithTypePrefix(System.Object)">
            <summary>
            Formats the literal with a type prefix and quotes (if the type requires it).
            </summary>
            <param name="value">The value to format.</param>
            <returns>The formatted literal, with type marker if needed.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.LiteralFormatter.KeysAsSegmentsLiteralFormatter">
            <summary>
            Literal formatter for keys which are written as URI segments. 
            Very similar to the default, but it never puts the type markers or single quotes around the value.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.KeysAsSegmentsLiteralFormatter.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.OData.Client.LiteralFormatter.KeysAsSegmentsLiteralFormatter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.KeysAsSegmentsLiteralFormatter.Format(System.Object)">
            <summary>Converts the specified value to an encoded, serializable string for URI key.</summary>
            <param name="value">Non-null value to convert.</param>
            <returns>value converted to a serializable string for URI key.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LiteralFormatter.KeysAsSegmentsLiteralFormatter.EscapeLeadingDollarSign(System.String)">
            <summary>
            If the string starts with a '$', prepends another '$' to escape it.
            </summary>
            <param name="stringValue">The string value.</param>
            <returns>The string value with a leading '$' escaped, if one was present.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.KeySerializer">
            <summary>
            Component for serializing entity key values for building identities, edit links, etc.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.KeySerializer.DefaultInstance">
            <summary>Singleton instance of the default serializer.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.KeySerializer.SegmentInstance">
            <summary>Singleton instance of the segment-based serializer.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.KeySerializer.Create(Microsoft.OData.Client.UrlConvention)">
            <summary>
            Creates a new key serializer.
            </summary>
            <param name="urlConvention">The url convention to use.</param>
            <returns>
            A new key serializer.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.KeySerializer.AppendKeyExpression``1(System.Text.StringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.String},System.Func{``0,System.Object})">
            <summary>
            Appends the key expression for an entity to the given <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="builder">The builder to append onto.</param>
            <param name="keyProperties">The key properties.</param>
            <param name="getPropertyName">The callback to get each property's name.</param>
            <param name="getPropertyValue">The callback to get each property's value.</param>
        </member>
        <member name="M:Microsoft.OData.Client.KeySerializer.GetKeyValueAsString``1(System.Func{``0,System.Object},``0,Microsoft.OData.Client.LiteralFormatter)">
            <summary>
            Gets the value of the key property and serializes it to a string.
            </summary>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="getPropertyValue">The callback to get the value for a property.</param>
            <param name="property">The key property.</param>
            <param name="literalFormatter">The literal formatter to use.</param>
            <returns>The serialized key property value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.KeySerializer.AppendKeyWithParentheses``1(System.Text.StringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.String},System.Func{``0,System.Object})">
            <summary>
            Appends the key using the parentheses-based syntax (e.g. Customers(1)) onto the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The builder to append onto.</param>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="keyProperties">The key properties.</param>
            <param name="getPropertyName">The callback to get each property's name.</param>
            <param name="getPropertyValue">The callback to get each property's value.</param>
        </member>
        <member name="T:Microsoft.OData.Client.KeySerializer.DefaultKeySerializer">
            <summary>
            Default implementation of the key serializer which uses parentheses (e.g. Customers(1)).
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.KeySerializer.DefaultKeySerializer.AppendKeyExpression``1(System.Text.StringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.String},System.Func{``0,System.Object})">
            <summary>
            Appends the key expression for an entity to the given <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="builder">The builder to append onto.</param>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="keyProperties">The key properties.</param>
            <param name="getPropertyName">The callback to get each property's name.</param>
            <param name="getPropertyValue">The callback to get each property's value.</param>
        </member>
        <member name="T:Microsoft.OData.Client.KeySerializer.SegmentKeySerializer">
            <summary>
            Implementation of the key serializer which uses segments (e.g. Customers/1).
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.KeySerializer.SegmentKeySerializer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.OData.Client.KeySerializer.SegmentKeySerializer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.KeySerializer.SegmentKeySerializer.AppendKeyExpression``1(System.Text.StringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.String},System.Func{``0,System.Object})">
            <summary>
            Appends the key expression for an entity to the given <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="builder">The builder to append onto.</param>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="keyProperties">The key properties.</param>
            <param name="getPropertyName">The callback to get each property's name.</param>
            <param name="getPropertyValue">The callback to get each property's value.</param>
        </member>
        <member name="M:Microsoft.OData.Client.KeySerializer.SegmentKeySerializer.AppendKeyWithSegments``1(System.Text.StringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Object})">
            <summary>
            Appends the key for the current resource using segment-based syntax (e.g. Customers/1) onto the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The builder to append onto.</param>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="keyProperties">The key properties.</param>
            <param name="getPropertyValue">The callback to get each property's value.</param>
        </member>
        <member name="T:Microsoft.OData.Client.UrlConvention">
            <summary>
            Component for representing the url convention in use by the server, client, or codegen.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UrlConvention.ConventionTermNamespace">
            <summary>
            The namespace of the term to use when building value annotations for indicating the conventions used.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UrlConvention.ConventionTermName">
            <summary>
            The name of the term to use when building value annotations for indicating the conventions used.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UrlConvention.DefaultConventionName">
            <summary>
            Default url convention
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UrlConvention.KeyAsSegmentConventionName">
            <summary>
            The string value for indicating that the key-as-segment convention is being used in annotations and headers.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UrlConvention.UrlConventionHeaderName">
            <summary>
            The name of the request header for indicating what conventions are being used.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UrlConvention.generateKeyAsSegment">
            <summary>
            Whether to generate entity keys as '/'-delimited segments instead of using parenthesis.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UrlConvention.odataSimplified">
            <summary>
            Whether to enable OData simplified.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.UrlConvention.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.OData.Client.UrlConvention"/> class from being created.
            </summary>
            <param name="generateKeyAsSegment">Whether keys should be generated as segments.</param>
            <param name="odataSimplified">Whether to enable OData simplified.</param>
        </member>
        <member name="M:Microsoft.OData.Client.UrlConvention.CreateWithExplicitValue(System.Boolean)">
            <summary>
            Helper for creating an instance with explicit value. Should only be called from unit tests.
            </summary>
            <param name="generateKeyAsSegment">Whether keys should be generated as segments.</param>
            <returns>A new UrlConvention instance with the given value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UrlConvention.CreateODataSimplifiedConvention">
            <summary>
            Helper for creating an odata simplified instance.
            </summary>
            <returns>A new UrlConvention instance with the given value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UrlConvention.AddRequiredHeaders(Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Adds the required headers for the url convention.
            </summary>
            <param name="requestHeaders">The request headers to add to.</param>
        </member>
        <member name="P:Microsoft.OData.Client.UrlConvention.GenerateKeyAsSegment">
            <summary>
            Whether to generate entity keys as '/'-delimited segments instead of using parenthesis.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.UrlConvention.ODataSimplified">
            <summary>
            Whether to enable OData simplified.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Core.Metadata.EdmLibraryExtensions">
            <summary>
            Class with code that will eventually live in EdmLib.
            </summary>
            <remarks>This class should go away completely when the EdmLib integration is fully done.</remarks>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.CollectionTypeQualifier">
            <summary>The qualifier to turn a type name into a Collection type name.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.CollectionTypeFormat">
            <summary>Format string to describe a Collection of a given type.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.PrimitiveTypeReferenceMap">
            <summary>
            Map of CLR primitive type to EDM primitive type reference. Doesn't include spatial types since they need assignability and not equality.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.BooleanTypeReference">
            <summary>Type reference for Edm.Boolean.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.ByteTypeReference">
            <summary>Type reference for Edm.Byte.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.DecimalTypeReference">
            <summary>Type reference for Edm.Decimal.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.DoubleTypeReference">
            <summary>Type reference for Edm.Double.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.Int16TypeReference">
            <summary>Type reference for Edm.Int16.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.Int32TypeReference">
            <summary>Type reference for Edm.Int32.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.Int64TypeReference">
            <summary>Type reference for Edm.Int64.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.SByteTypeReference">
            <summary>Type reference for Edm.SByte.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.StringTypeReference">
            <summary>Type reference for Edm.String.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.SingleTypeReference">
            <summary>Type reference for Edm.Float.</summary>
        </member>
        <member name="M:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.FullName(Microsoft.OData.Edm.IEdmEntityContainerElement)">
            <summary>
            Returns the fully qualified name of an entity container element.
            </summary>
            <param name="containerElement">The container element to get the full name for.</param>
            <returns>The full name of the owning entity container, slash, name of the container element.</returns>
        </member>
        <member name="M:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.ToTypeReference(Microsoft.OData.Edm.IEdmType,System.Boolean)">
            <summary>
            Turns a <see cref="T:Microsoft.OData.Edm.IEdmType"/> into the corresponding <see cref="T:Microsoft.OData.Edm.IEdmTypeReference"/>.
            </summary>
            <param name="type">The type to convert.</param>
            <param name="nullable">true if the returned type reference should be nullable; otherwise false.</param>
            <returns>A type reference for the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.GetCollectionTypeName(System.String)">
            <summary>
            Creates the EDM type name for a collection of the specified item type name. E.g. Collection(Edm.String)
            </summary>
            <param name="itemTypeName">Type name of the items in the collection.</param>
            <returns>Type name for a collection of the specified item type name.</returns>
        </member>
        <member name="M:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.ToTypeReference(Microsoft.OData.Edm.IEdmPrimitiveType,System.Boolean)">
            <summary>
            Gets a reference to a primitive kind definition of the appropriate kind.
            </summary>
            <param name="primitiveType">Primitive type to create a reference for.</param>
            <param name="nullable">Flag specifying if the referenced type should be nullable per default.</param>
            <returns>A new primitive type reference.</returns>
        </member>
        <member name="T:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.EdmTypeEqualityComparer">
            <summary>
            Equality comparer for an IEdmType.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.EdmTypeEqualityComparer.Equals(Microsoft.OData.Edm.IEdmType,Microsoft.OData.Edm.IEdmType)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type to compare.</param>
            <param name="y">The second object of type to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Core.Metadata.EdmLibraryExtensions.EdmTypeEqualityComparer.GetHashCode(Microsoft.OData.Edm.IEdmType)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Microsoft.OData.Core.InternalErrorCodesCommon">
            <summary>
            An enumeration that lists the internal errors that are shared between the OData library and the query library.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Core.InternalErrorCodesCommon.EdmLibraryExtensions_ToTypeReference">
            <summary>Unreachable codepath in EdmLibraryExtensions.ToTypeReference (unsupported type kind).</summary>
        </member>
        <member name="F:Microsoft.OData.Core.InternalErrorCodesCommon.EdmLibraryExtensions_ToClrType">
            <summary>Unreachable codepath in EdmLibraryExtensions.ToClrType (unsupported type kind).</summary>
        </member>
        <member name="F:Microsoft.OData.Core.InternalErrorCodesCommon.EdmLibraryExtensions_PrimitiveTypeReference">
            <summary>Unreachable codepath in EdmLibraryExtensions.PrimitiveTypeReference (unsupported primitive type kind).</summary>
        </member>
        <member name="F:Microsoft.OData.Core.InternalErrorCodesCommon.EdmLibraryExtensions_IsAssignableFrom_Primitive">
            <summary>Unreachable codepath in EdmLibraryExtensions.IsAssignableFrom(IEdmPrimitiveType, IEdmPrimitiveType).</summary>
        </member>
        <member name="F:Microsoft.OData.Core.InternalErrorCodesCommon.EdmLibraryExtensions_IsAssignableFrom_Type">
            <summary>Unreachable codepath in EdmLibraryExtensions.IsAssignableFrom(IEdmType, IEdmType).</summary>
        </member>
        <member name="F:Microsoft.OData.Core.InternalErrorCodesCommon.EdmLibraryExtensions_BaseType">
            <summary>Unreachable codepath in EdmLibraryExtensions.BaseType.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.InternalErrorCodesCommon.EdmLibraryExtensions_Clone_TypeKind">
            <summary>Unreachable codepath in EdmLibraryExtensions.Clone for unexpected type kind.</summary>
        </member>
        <member name="F:Microsoft.OData.Core.InternalErrorCodesCommon.EdmLibraryExtensions_Clone_PrimitiveTypeKind">
            <summary>Unreachable codepath in EdmLibraryExtensions.Clone for unexpected primitive type kind.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken">
            <summary>
            Base class for all lexical tokens of OData query.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryToken.EmptyTokens">
            <summary>
            Empty list of arguments.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.QueryToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.QueryToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.AggregateExpressionToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.ApplyTransformationToken">
            <summary>
            Base class for Applt transformation tokens
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.AggregateToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.GroupByToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.GroupByToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.AllToken">
            <summary>
            Lexical token representing the All Query
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.LambdaToken">
            <summary>
            Lexical token representing the Any/All Query
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.LambdaToken.parent">
            <summary>
            The parent token.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.LambdaToken.parameter">
            <summary>
            The parameter which denotes source type.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.LambdaToken.expression">
            <summary>
            The expression component of Any.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.LambdaToken.#ctor(Microsoft.OData.Client.ALinq.UriParser.QueryToken,System.String,Microsoft.OData.Client.ALinq.UriParser.QueryToken)">
            <summary>
            Create a AnyAllQueryToken given the expression, parameter, and parent
            </summary>
            <param name="expression">The associated expression.</param>
            <param name="parameter">The parameter denoting source type.</param>
            <param name="parent">The parent token.  Pass null if this property has no parent.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.LambdaToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.LambdaToken.Parent">
            <summary>
            The parent token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.LambdaToken.Expression">
            <summary>
            The expression.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.LambdaToken.Parameter">
            <summary>
            The parameter.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.AllToken.#ctor(Microsoft.OData.Client.ALinq.UriParser.QueryToken,System.String,Microsoft.OData.Client.ALinq.UriParser.QueryToken)">
            <summary>
            Create a AllToken given the expression, parameter, and parent
            </summary>
            <param name="expression">The associated expression.</param>
            <param name="parameter">The parameter denoting source type.</param>
            <param name="parent">The parent token.  Pass null if this property has no parent.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.AllToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.AllToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.AnyToken">
            <summary>
            Lexical token representing the Any Query
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.AnyToken.#ctor(Microsoft.OData.Client.ALinq.UriParser.QueryToken,System.String,Microsoft.OData.Client.ALinq.UriParser.QueryToken)">
            <summary>
            Create a AnyToken given the expression, parameter, and parent
            </summary>
            <param name="expression">The associated expression.</param>
            <param name="parameter">The parameter denoting source type.</param>
            <param name="parent">The parent token.  Pass null if this property has no parent.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.AnyToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.AnyToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken">
            <summary>
            Lexical token representing a binary operator.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken.operatorKind">
            <summary>
            The operator represented by this node.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken.left">
            <summary>
            The left operand.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken.right">
            <summary>
            The right operand.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken.#ctor(Microsoft.OData.Core.UriParser.TreeNodeKinds.BinaryOperatorKind,Microsoft.OData.Client.ALinq.UriParser.QueryToken,Microsoft.OData.Client.ALinq.UriParser.QueryToken)">
            <summary>
            Create a new BinaryOperatorToken given the operator, left and right query.
            </summary>
            <param name="operatorKind">The operator represented by this node.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken.OperatorKind">
            <summary>
            The operator represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken.Left">
            <summary>
            The left operand.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken.Right">
            <summary>
            The right operand.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.CustomQueryOptionToken">
            <summary>
            Lexical token representing a query option.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.CustomQueryOptionToken.name">
            <summary>
            The name of the query option.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.CustomQueryOptionToken.value">
            <summary>
            The value of the query option.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.CustomQueryOptionToken.#ctor(System.String,System.String)">
            <summary>
            Create a new CustomQueryOptionToken given name and value.
            </summary>
            <param name="name">The name of the query option.</param>
            <param name="value">The value of the query option.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.CustomQueryOptionToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.CustomQueryOptionToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.CustomQueryOptionToken.Name">
            <summary>
            The name of the query option.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.CustomQueryOptionToken.Value">
            <summary>
            The value of the query option.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.DottedIdentifierToken">
            <summary>
            Lexical token representing a type segment.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.PathToken">
            <summary>
            Lexical token representing a segment in a path.
            </summary>
            
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.PathToken.NextToken">
            <summary>
            The NextToken in the path(can either be the parent or the child depending on whether the tree has
            been normalized for expand or not.
            TODO: need to revisit this and the rest of the syntactic parser to make it ready for public consumption.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.PathToken.Identifier">
            <summary>
            The name of the property to access.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.DottedIdentifierToken.identifier">
            <summary>
            The Identifier of the type segment.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.DottedIdentifierToken.nextToken">
            <summary>
            The parent segment.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.DottedIdentifierToken.#ctor(System.String,Microsoft.OData.Client.ALinq.UriParser.QueryToken)">
            <summary>
            Create a TypeSegmentQueryToken given the Identifier and the parent (if any)
            </summary>
            <param name="identifier">The Identifier of the type segment, including the namespace.</param>
            <param name="nextToken">The parent segment.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.DottedIdentifierToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.DottedIdentifierToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.DottedIdentifierToken.Identifier">
            <summary>
            The full name of the type.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.DottedIdentifierToken.NextToken">
            <summary>
            The parent.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.EndPathToken">
            <summary>
            Lexical token representing the last segment in a path.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.EndPathToken.identifier">
            <summary>
            The Identifier of the property to access.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.EndPathToken.nextToken">
            <summary>
            The NextToken token to access the property on.
            If this is null, then the property access has no NextToken. That usually means to access the property
            on the implicit parameter for the expression, the result on which the expression is being applied.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.EndPathToken.#ctor(System.String,Microsoft.OData.Client.ALinq.UriParser.QueryToken)">
            <summary>
            Create a EndPathToken given the Identifier and the NextToken (if any)
            </summary>
            <param name="identifier">The Identifier of the property to access.</param>
            <param name="nextToken">The NextToken token to access the property on. </param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.EndPathToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.EndPathToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.EndPathToken.NextToken">
            <summary>
            The NextToken token to access the property on.
            If this is null, then the property access has no NextToken. That usually means to access the property
            on the implicit parameter for the expression, the result on which the expression is being applied.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.EndPathToken.Identifier">
            <summary>
            The Identifier of the property to access.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils">
            <summary>
            Class with utility methods to work with exceptions
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.OutOfMemoryType">
            <summary>Type of OutOfMemoryException.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.StackOverflowType">
            <summary>Type of StackOverflowException.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.ThreadAbortType">
            <summary>Type of ThreadAbortException.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.IsCatchableExceptionType(System.Exception)">
            <summary>
            Determines whether the specified exception can be caught and 
            handled, or whether it should be allowed to continue unwinding.
            </summary>
            <param name="e"><see cref="T:System.Exception"/> to test.</param>
            <returns>
            true if the specified exception can be caught and handled; 
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.CheckArgumentNotNull``1(``0,System.String)">
            <summary>
            Checks the argument value for null and throws <see cref="T:System.ArgumentNullException"/> if it is null.
            </summary>
            <typeparam name="T">Type of the argument, used to force usage only for reference types.</typeparam>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.CheckArgumentStringNotEmpty(System.String,System.String)">
            <summary>
            Checks the argument string value empty string and throws <see cref="T:System.ArgumentNullException"/> if it is empty. The value can be null though.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.CheckArgumentStringNotNullOrEmpty(System.String,System.String)">
            <summary>
            Checks the argument string value for null or empty string and throws <see cref="T:System.ArgumentNullException"/> if it is null or empty.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.CheckIntegerNotNegative(System.Int32,System.String)">
            <summary>
            Checks the <paramref name="value"/> for not being negative and throws <see cref="T:System.ArgumentOutOfRangeException"/> if it is negative.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.CheckIntegerPositive(System.Int32,System.String)">
            <summary>
            Checks the <paramref name="value"/> for being greater than zero and throws <see cref="T:System.ArgumentOutOfRangeException"/> if it is not positive.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.CheckLongPositive(System.Int64,System.String)">
            <summary>
            Checks the <paramref name="value"/> for being greater than zero and throws <see cref="T:System.ArgumentOutOfRangeException"/> if it is not positive.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.CheckArgumentCollectionNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Checks the <paramref name="value"/> for not being empty.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
            <typeparam name="T">Type of the collection. It does not matter.</typeparam>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.ExceptionUtils.ValidatedNotNullAttribute">
            <summary>
            A workaround to a problem with FxCop which does not recognize the CheckArgumentNotNull method
            as the one which validates the argument is not null.
            </summary>
            <remarks>This has been suggested as a workaround in msdn forums by the VS team. Note that even though this is production code
            the attribute has no effect on anything else.</remarks>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken">
            <summary>
            Lexical token representing an expand operation.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.pathToNavProp">
            <summary>
            The nav prop path for this ExpandTerm
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.filterOption">
            <summary>
            the filter option for this expand term
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.orderByOptions">
            <summary>
            the order by options for this expand term
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.topOption">
            <summary>
            the top option for this expand term
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.skipOption">
            <summary>
            the skip option for this expand term.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.countQueryOption">
            <summary>
            the query count option for this expand term.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.levelsOption">
            <summary>
            the levels option for this expand term
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.searchOption">
            <summary>
            the search option for this expand term
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.selectOption">
            <summary>
            the select option for this expand term.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.expandOption">
            <summary>
            the expand option for this expand term.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.#ctor(Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken)">
            <summary>
            Create an expand term token using only a property
            </summary>
            <param name="pathToNavProp">the path to the navigation property</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.#ctor(Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken,Microsoft.OData.Client.ALinq.UriParser.SelectToken,Microsoft.OData.Client.ALinq.UriParser.ExpandToken)">
            <summary>
            Create an expand term using only the property and its subexpand/select
            </summary>
            <param name="pathToNavProp">the path to the navigation property for this expand term</param>
            <param name="selectOption">the sub select for this token</param>
            <param name="expandOption">the sub expand for this token</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.#ctor(Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken,Microsoft.OData.Client.ALinq.UriParser.QueryToken,System.Collections.Generic.IEnumerable{Microsoft.OData.Client.ALinq.UriParser.OrderByToken},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},Microsoft.OData.Client.ALinq.UriParser.QueryToken,Microsoft.OData.Client.ALinq.UriParser.SelectToken,Microsoft.OData.Client.ALinq.UriParser.ExpandToken)">
            <summary>
            Create an expand term token
            </summary>
            <param name="pathToNavProp">the nav prop for this expand term</param>
            <param name="filterOption">the filter option for this expand term</param>
            <param name="orderByOptions">the orderby options for this expand term</param>
            <param name="topOption">the top option for this expand term</param>
            <param name="skipOption">the skip option for this expand term</param>
            <param name="countQueryOption">the query count option for this expand term</param>
            <param name="levelsOption">the levels option for this expand term</param>
            <param name="searchOption">the search option for this expand term</param>
            <param name="selectOption">the select option for this expand term</param>
            <param name="expandOption">the expand option for this expand term</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Implement the visitor for this Token
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="visitor">A tree visitor that will visit this node.</param>
            <returns>Determined by the return type of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.PathToNavProp">
            <summary>
            the nav property for this expand term
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.FilterOption">
            <summary>
            The filter option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.OrderByOptions">
            <summary>
            the orderby options for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.TopOption">
            <summary>
            the top option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.SkipOption">
            <summary>
            the skip option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.CountQueryOption">
            <summary>
            the query count option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.LevelsOption">
            <summary>
            the levels option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.SearchOption">
            <summary>
            the search option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.SelectOption">
            <summary>
            the select option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.ExpandOption">
            <summary>
            the expand option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken.Kind">
            <summary>
            the kind of this expand term.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.ExpandToken">
            <summary>
            Lexical token representing an expand operation.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ExpandToken.expandTerms">
            <summary>
            The properties according to which to expand in the results.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExpandToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken})">
            <summary>
            Create a ExpandToken given the property-accesses of the expand query.
            </summary>
            <param name="expandTerms">The properties according to which to expand the results.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ExpandToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.ExpandToken.ExpandTerms">
            <summary>
            The properties according to which to expand in the results.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken">
            <summary>
            Lexical token representing a function call.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken.name">
            <summary>
            The name of the function to call.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken.arguments">
            <summary>
            The arguments for the function.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken.source">
            <summary>
            the source token for this function call
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.OData.Client.ALinq.UriParser.QueryToken})">
            <summary>
            Create a new FunctionCallToken using the given function name and argument values.
            </summary>
            <param name="name">The name of the function to call.</param>
            <param name="argumentValues">The argument values for the function.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken},Microsoft.OData.Client.ALinq.UriParser.QueryToken)">
            <summary>
            Create a new FunctionCallToken using the given function name and parameter tokens.
            </summary>
            <param name="name">The name of the function to call.</param>
            <param name="arguments">The arguments for the function.</param>
            <param name="source">The syntactically bound parent of this function</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken.Name">
            <summary>
            The name of the function to call.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken.Arguments">
            <summary>
            The arguments for the function.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken.Source">
            <summary>
            The syntactically bound parent of this function.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterAliasToken">
            <summary>
            A token to represent a parameter alias in a function call.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterAliasToken.#ctor(System.String)">
            <summary>
            Creates a FunctionParameterAliasToken
            </summary>
            <param name="alias">the alias being used for the parameter.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterAliasToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterAliasToken.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterAliasToken.Kind">
            <summary>
            Gets the kind of this token
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterAliasToken.ExpectedParameterType">
            <summary>
            The expected edm type of this parameter.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken">
            <summary>
            A token to represent a parameter to a function call.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken.EmptyParameterList">
            <summary>
            get an empty list of parameters
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken.parameterName">
            <summary>
            The name of the parameter
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken.valueToken">
            <summary>
            The value of this parameter
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken.#ctor(System.String,Microsoft.OData.Client.ALinq.UriParser.QueryToken)">
            <summary>
            Creates a FunctionParameterToken
            </summary>
            <param name="parameterName">the name of this parameter</param>
            <param name="valueToken">the syntactically parsed value</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken.ParameterName">
            <summary>
            Gets the name of this parameter 
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken.ValueToken">
            <summary>
            Gets the syntactically parsed value of this token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken.Kind">
            <summary>
            Gets the kind of this token
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.InnerPathToken">
            <summary>
            Lexical token representing a single nonroot segment in the query path.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.InnerPathToken.identifier">
            <summary>
            The Identifier of the segment.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.InnerPathToken.namedValues">
            <summary>
            The named values in the key lookup for this segment.
            If the segment has no key lookup, then this property is null.
            If the segment has empty key lookup (), then this property is an empty collection.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.InnerPathToken.nextToken">
            <summary>
            The NextToken segment.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.InnerPathToken.#ctor(System.String,Microsoft.OData.Client.ALinq.UriParser.QueryToken,System.Collections.Generic.IEnumerable{Microsoft.OData.Client.ALinq.UriParser.NamedValue})">
            <summary>
            Create a new StartPathToken given the Identifier and NextToken and namedValues if any
            </summary>
            <param name="identifier">The Identifier of the segment, the identifier.</param>
            <param name="nextToken">The NextToken segment, or null if this is the root segment.</param>
            <param name="namedValues">The named values in the key lookup for this segment.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.InnerPathToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.InnerPathToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.InnerPathToken.Identifier">
            <summary>
            The Identifier of the segment, the identifier.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.InnerPathToken.NextToken">
            <summary>
            The NextToken segment, or null if this is the root segment.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.InnerPathToken.NamedValues">
            <summary>
            The named values in the key lookup for this segment.
            If the segment has no key lookup, then this property is null.
            If the segment has empty key lookup (), then this property is an empty collection.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor`1">
            <summary>
            Visitor interface for walking the Path Tree.
            </summary>
            <typeparam name="T">Return type for the visitor methods on this visitor.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.SystemToken)">
            <summary>
            Visit an SystemToken
            </summary>
            <param name="tokenIn">The SystemToken to visit</param>
            <returns>A user defined class</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.NonSystemToken)">
            <summary>
            Visit an NonSystemToken
            </summary>
            <param name="tokenIn">The NonSystemToken to visit</param>
            <returns>A user defined class</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor">
            <summary>
            Visitor interface for walking the Path Tree.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor.Visit(Microsoft.OData.Client.ALinq.UriParser.SystemToken)">
            <summary>
            Visit an SystemToken
            </summary>
            <param name="tokenIn">The SystemToken to visit</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor.Visit(Microsoft.OData.Client.ALinq.UriParser.NonSystemToken)">
            <summary>
            Visit an NonSystemToken
            </summary>
            <param name="tokenIn">The NonSystemToken to visit</param>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1">
            <summary>
            Visitor interface for walking the Syntactic Tree.
            </summary>
            <typeparam name="T">Return type for the visitor methods on this visitor.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.AllToken)">
            <summary>
            Visit an AllToken
            </summary>
            <param name="tokenIn">The All token to visit</param>
            <returns>An AllNode bound to this token</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.AnyToken)">
            <summary>
            Visits an AnyToken
            </summary>
            <param name="tokenIn">The Any token to visit</param>
            <returns>An AnyNode that's bound to this token</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.BinaryOperatorToken)">
            <summary>
            Visits a BinaryOperatorToken
            </summary>
            <param name="tokenIn">The Binary operator token to visit.</param>
            <returns>A BinaryOperatorNode thats bound to this token</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.DottedIdentifierToken)">
            <summary>
            Visits a DottedIdentifierToken
            </summary>
            <param name="tokenIn">The DottedIdentifierToken to visit</param>
            <returns>Either a SingleEntityCastNode, or EntityCollectionCastNode bound to this DottedIdentifierToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.ExpandToken)">
            <summary>
            Visits an ExpandToken
            </summary>
            <param name="tokenIn">The ExpandToken to visit</param>
            <returns>A QueryNode bound to this ExpandToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.ExpandTermToken)">
            <summary>
            Visits an ExpandTermToken
            </summary>
            <param name="tokenIn">The ExpandTermToken to visit</param>
            <returns>A QueryNode bound to this ExpandTermToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.FunctionCallToken)">
            <summary>
            Visits a FunctionCallToken
            </summary>
            <param name="tokenIn">The FunctionCallToken to visit</param>
            <returns>A SingleValueFunctionCallNode bound to this FunctionCallToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.LambdaToken)">
            <summary>
            Visits a LambdaToken
            </summary>
            <param name="tokenIn">The LambdaToken to visit</param>
            <returns>A LambdaNode bound to this LambdaToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.LiteralToken)">
            <summary>
            Visits a LiteralToken
            </summary>
            <param name="tokenIn">LiteralToken to visit</param>
            <returns>A ConstantNode bound to this LiteralToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.InnerPathToken)">
            <summary>
            Visits a InnerPathToken
            </summary>
            <param name="tokenIn">The InnerPathToken to bind</param>
            <returns>A SingleValueNode or SingleEntityNode bound to this InnerPathToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.OrderByToken)">
            <summary>
            Visits an OrderByToken
            </summary>
            <param name="tokenIn">The OrderByToken to bind</param>
            <returns>An OrderByClause bound to this OrderByToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.EndPathToken)">
            <summary>
            Visits a EndPathToken
            </summary>
            <param name="tokenIn">The EndPathToken to bind</param>
            <returns>A PropertyAccessNode bound to this EndPathToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.CustomQueryOptionToken)">
            <summary>
            Visits a CustomQueryOptionToken
            </summary>
            <param name="tokenIn">The CustomQueryOptionToken to bind</param>
            <returns>A CustomQueryOptionNode bound to this CustomQueryOptionToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.RangeVariableToken)">
            <summary>
            Visits a RangeVariableToken
            </summary>
            <param name="tokenIn">The RangeVariableToken to bind</param>
            <returns>An Entity or NonEntity RangeVariableReferenceNode bound to this RangeVariableToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.SelectToken)">
            <summary>
            Visits a SelectToken
            </summary>
            <param name="tokenIn">The SelectToken to bind</param>
            <returns>A QueryNode bound to this SelectToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.StarToken)">
            <summary>
            Visits a StarToken
            </summary>
            <param name="tokenIn">The StarToken to bind</param>
            <returns>A QueryNode bound to this StarToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.UnaryOperatorToken)">
            <summary>
            Visits a UnaryOperatorToken
            </summary>
            <param name="tokenIn">The UnaryOperatorToken to bind</param>
            <returns>A UnaryOperatorNode bound to this UnaryOperatorToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.FunctionParameterToken)">
            <summary>
            Visits a FunctionParameterToken
            </summary>
            <param name="tokenIn">The FunctionParameterTokenb to bind</param>
            <returns>A FunctionParametertoken bound to this UnaryOperatorToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.AggregateToken)">
            <summary>
            Visits a AggregateToken
            </summary>
            <param name="tokenIn">The AggregateToken to bind</param>
            <returns>A T node bound to this AggregateToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.AggregateExpressionToken)">
            <summary>
            Visits a AggregateExpressionToken
            </summary>
            <param name="tokenIn">The AggregateExpressionToken to bind</param>
            <returns>A T node bound to this AggregateExpressionToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1.Visit(Microsoft.OData.Client.ALinq.UriParser.GroupByToken)">
            <summary>
            Visits a GroupByToken
            </summary>
            <param name="tokenIn">The GroupByToken to bind</param>
            <returns>A T node bound to this GroupByToken</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.LiteralToken">
            <summary>
            Lexical token representing a literal value.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.originalText">
            <summary>
            The original text value of the literal.
            </summary>
            <remarks>This is used internally to simulate correct compat behavior with WCF DS, and parameter alias.
            We should use this during type promotion when applying metadata.</remarks>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.value">
            <summary>
            The value of the literal. This is a parsed primitive value.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.expectedEdmTypeReference">
            <summary>
            The expected EDM type of literal.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.#ctor(System.Object)">
            <summary>
            Create a new LiteralToken given value and originalText
            </summary>
            <param name="value">The value of the literal. This is a parsed primitive value.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.#ctor(System.Object,System.String)">
            <summary>
            Create a new LiteralToken given value and originalText
            </summary>
            <param name="value">The value of the literal. This is a parsed primitive value.</param>
            <param name="originalText">The original text value of the literal.</param>
            <remarks>This is used internally to simulate correct compat behavior with WCF DS, and parameter alias.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.#ctor(System.Object,System.String,Microsoft.OData.Edm.IEdmTypeReference)">
            <summary>
            Create a new LiteralToken given value and originalText
            </summary>
            <param name="value">The value of the literal. This is a parsed primitive value.</param>
            <param name="originalText">The original text value of the literal.</param>
            <param name="expectedEdmTypeReference">The expected EDM type of literal..</param>
            <remarks>This is used internally to simulate correct compat behavior with WCF DS, and parameter alias.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.Value">
            <summary>
            The value of the literal. This is a parsed primitive value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.OriginalText">
            <summary>
            The original text value of the literal.
            </summary>
            <remarks>This is used internally to simulate correct compat behavior with WCF DS, and parameter alias.
            We should use this during type promotion when applying metadata.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.LiteralToken.ExpectedEdmTypeReference">
            <summary>
            The expected EDM type of literal.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.NamedValue">
            <summary>
            Class representing a single named value (name and value pair).
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.NamedValue.name">
            <summary>
            The name of the value. Or null if the name was not used for this value.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.NamedValue.value">
            <summary>
            The value - a literal.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.NamedValue.#ctor(System.String,Microsoft.OData.Client.ALinq.UriParser.LiteralToken)">
            <summary>
            Create a new NamedValue lookup given name and value.
            </summary>
            <param name="name">The name of the value. Or null if the name was not used for this value.</param>
            <param name="value">The value - a literal.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.NamedValue.Name">
            <summary>
            The name of the value. Or null if the name was not used for this value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.NamedValue.Value">
            <summary>
            The value - a literal.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.NonSystemToken">
            <summary>
            Lexical token representing a segment in a path.
            </summary>
            
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken">
            <summary>
            Lexical token representing a segment in a path.
            </summary>
            
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken.nextToken">
            <summary>
            the next token in the path
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken.#ctor(Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken)">
            <summary>
            build this segment token using the next token
            </summary>
            <param name="nextToken">the next token in the path</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken.IsNamespaceOrContainerQualified">
            <summary>
            Is this token namespace or container qualified.
            </summary>
            <returns>true if this token is namespace or container qualified.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken.Accept(Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor)">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken"/>s.
            </summary>
            <param name="visitor">An implementation of the visitor interface.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken.SetNextToken(Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken)">
            <summary>
            internal setter for the next token.
            </summary>
            <param name="nextTokenIn">the next token to set.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken.NextToken">
            <summary>
            Get the NextToken in the path
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken.Identifier">
            <summary>
            The name of the property to access.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken.IsStructuralProperty">
            <summary>
            Is this a structural property
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.NonSystemToken.namedValues">
            <summary>
            Any named values for this NonSystemToken
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.NonSystemToken.identifier">
            <summary>
            The identifier for this token.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.NonSystemToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.OData.Client.ALinq.UriParser.NamedValue},Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken)">
            <summary>
            Build a NonSystemToken
            </summary>
            <param name="identifier">the identifier of this token</param>
            <param name="namedValues">a list of named values for this token</param>
            <param name="nextToken">the next token in the path</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.NonSystemToken.IsNamespaceOrContainerQualified">
            <summary>
            Is this token namespace or container qualified.
            </summary>
            <returns>true if this token is namespace or container qualified.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.NonSystemToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.NonSystemToken.Accept(Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor)">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken"/>s.
            </summary>
            <param name="visitor">An implementation of the visitor interface.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.NonSystemToken.NamedValues">
            <summary>
            Get the list of named values for this token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.NonSystemToken.Identifier">
            <summary>
            Get the identifier for this token.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.OrderByToken">
            <summary>
            Lexical token representing an order by operation.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.OrderByToken.direction">
            <summary>
            The direction of the ordering.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.OrderByToken.expression">
            <summary>
            The expression according to which to order the results.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.OrderByToken.#ctor(Microsoft.OData.Client.ALinq.UriParser.QueryToken,Microsoft.OData.Core.UriParser.OrderByDirection)">
            <summary>
            Create a new OrderByToken given the expression and direction
            </summary>
            <param name="expression">The expression according to which to order the results.</param>
            <param name="direction">The direction of the ordering.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.OrderByToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.OrderByToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.OrderByToken.Direction">
            <summary>
            The direction of the ordering.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.OrderByToken.Expression">
            <summary>
            The expression according to which to order the results.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind">
            <summary>
            Enumeration of kinds of query tokens.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.BinaryOperator">
            <summary>
            The binary operator.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.UnaryOperator">
            <summary>
            The unary operator.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.Literal">
            <summary>
            The literal value.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.FunctionCall">
            <summary>
            The function call.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.EndPath">
            <summary>
            The property access.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.OrderBy">
            <summary>
            The order by operation.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.CustomQueryOption">
            <summary>
            A query option.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.Select">
            <summary>
            The Select query.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.Star">
            <summary>
            The *.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.Expand">
            <summary>
            The Expand query.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.TypeSegment">
            <summary>
            Type segment.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.Any">
            <summary>
            Any query.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.InnerPath">
            <summary>
            Non root segment.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.DottedIdentifier">
            <summary>
            type segment.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.RangeVariable">
            <summary>
            Parameter token.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.All">
            <summary>
            All query.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.ExpandTerm">
            <summary>
            ExpandTerm Token
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.FunctionParameter">
            <summary>
            FunctionParameterToken
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.FunctionParameterAlias">
            <summary>
            FunctionParameterAlias
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.StringLiteral">
            <summary>
            the string literal for search query
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.Aggregate">
            <summary>
            $apply aggregate token
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.AggregateExpression">
            <summary>
            $apply aggregate statement token
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.QueryTokenKind.AggregateGroupBy">
            <summary>
            $apply groupby token
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.RangeVariableToken">
            <summary>
            Lexical token representing the parameter for an Any/All query.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.RangeVariableToken.name">
            <summary>
            The name of the Any/All parameter.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.RangeVariableToken.#ctor(System.String)">
            <summary>
            Create a new RangeVariableToken
            </summary>
            <param name="name">The name of the visitor for the Any/All query.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.RangeVariableToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.RangeVariableToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.RangeVariableToken.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.ReadOnlyEnumerableForUriParser`1">
            <summary>
            Implementation of IEnumerable which is based on another IEnumerable
            but only exposes readonly access to that collection. This class doesn't implement
            any other public interfaces or public API unlike most other IEnumerable implementations
            which also implement other public interfaces.
            </summary>
            <typeparam name="T">The type of the items in the read-only enumerable.</typeparam>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.ReadOnlyEnumerableForUriParser`1.sourceEnumerable">
            <summary>
            The IEnumerable to wrap.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ReadOnlyEnumerableForUriParser`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="sourceEnumerable">The enumerable to wrap.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ReadOnlyEnumerableForUriParser`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns the enumerator to iterate through the items.
            </summary>
            <returns>The enumerator object to use.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.ReadOnlyEnumerableForUriParser`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the (non-generic) enumerator to iterate through the items.
            </summary>
            <returns>The enumerator object to use.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.SelectToken">
            <summary>
            Lexical token representing a select operation.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.SelectToken.properties">
            <summary>
            The properties according to which to select the results.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.SelectToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken})">
            <summary>
            Create a SelectToken given the property-accesses of the select query.
            </summary>
            <param name="properties">The properties according to which to select the results.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.SelectToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.SelectToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.SelectToken.Properties">
            <summary>
            The properties according to which to select the results.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.StarToken">
            <summary>
            Lexical token representing an all-properties access.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.StarToken.nextToken">
            <summary>
            The NextToken token to access the property on.
            If this is null, then the property access has no NextToken. That usually means to access the property
            on the implicit parameter for the expression, the result on which the expression is being applied.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.StarToken.#ctor(Microsoft.OData.Client.ALinq.UriParser.QueryToken)">
            <summary>
            Create a new StarToken given the NextToken (if any).
            </summary>
            <param name="nextToken">The NextToken token to access the property on. Pass no if this property has no NextToken.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.StarToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.StarToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.StarToken.NextToken">
            <summary>
            The NextToken token to access the property on.
            If this is null, then the property access has no NextToken. That usually means to access the property
            on the implicit parameter for the expression, the result on which the expression is being applied.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.StarToken.Identifier">
            <summary>
            the name of this token(inherited from PathToken), which in this case is always "*"
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.SystemToken">
            <summary>
            Lexical token representing a System token such as $count
            </summary>
            
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.SystemToken.identifier">
            <summary>
            The identifier for this SystemToken
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.SystemToken.#ctor(System.String,Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken)">
            <summary>
            Build a new System Token
            </summary>
            <param name="identifier">the identifier for this token.</param>
            <param name="nextToken">the next token in the path</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.SystemToken.IsNamespaceOrContainerQualified">
            <summary>
            Is this token namespace or container qualified.
            </summary>
            <returns>always false, since this is a system token.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.SystemToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.SystemToken.Accept(Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor)">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.IPathSegmentTokenVisitor"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken"/>s.
            </summary>
            <param name="visitor">An implementation of the visitor interface.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.SystemToken.Identifier">
            <summary>
            Get the identifier for this token
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ALinq.UriParser.UnaryOperatorToken">
            <summary>
            Lexical token representing a unary operator.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.UnaryOperatorToken.operatorKind">
            <summary>
            The operator represented by this node.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ALinq.UriParser.UnaryOperatorToken.operand">
            <summary>
            The operand.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.UnaryOperatorToken.#ctor(Microsoft.OData.Core.UriParser.TreeNodeKinds.UnaryOperatorKind,Microsoft.OData.Client.ALinq.UriParser.QueryToken)">
            <summary>
            Create a new UnaryOperatorToken given the operator and operand
            </summary>
            <param name="operatorKind">The operator represented by this node.</param>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ALinq.UriParser.UnaryOperatorToken.Accept``1(Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.OData.Client.ALinq.UriParser.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.OData.Client.ALinq.UriParser.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.UnaryOperatorToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.UnaryOperatorToken.OperatorKind">
            <summary>
            The operator represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ALinq.UriParser.UnaryOperatorToken.Operand">
            <summary>
            The operand.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Annotation.AnnotationHelper">
            <summary>
            Provides functions to get instance annotation or metadata annotation, or to build metadata annotation dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.TryGetMetadataAnnotation``1(Microsoft.OData.Client.DataServiceContext,System.Object,System.String,System.String,``0@)">
            <summary>
            Gets the CLR value of a term that has been applied to the specified object
            </summary>
            <typeparam name="TResult">The CLR type of the annotation to be returned.</typeparam>
            <param name="context">The data service context.</param>
            <param name="source">The specified annotated object instance.</param>
            <param name="term">The term name.</param>
            <param name="qualifier">The qualifier name.</param>
            <param name="annotationValue">Value of the term evaluated.</param>
            <returns>True if the annotation value can be evaluated, else false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.GetEdmOperation(Microsoft.OData.Client.DataServiceContext,System.Reflection.MethodInfo)">
            <summary>
            Get Edm operation according to the MethodInfo from current data service context.
            </summary>
            <param name="context">The data service context.</param>
            <param name="methodInfo">The specified MethodInfo</param>
            <returns>The related <see cref="T:Microsoft.OData.Edm.IEdmOperation"/> will be returned if it is found, or return null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.GetEdmOperationImport(Microsoft.OData.Client.DataServiceContext,System.Reflection.MethodInfo)">
            <summary>
            Get Edm operation import according to the MethodInfo from current data service context.
            </summary>
            <param name="context">The data service context.</param>
            <param name="methodInfo">The specified MethodInfo</param>
            <returns>The related <see cref="T:Microsoft.OData.Edm.IEdmOperationImport"/> will be returned if it is found, or return null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.GetOrInsertCachedMetadataAnnotationForType(Microsoft.OData.Client.DataServiceContext,System.Type,System.String,System.String)">
            <summary>
            Gets vocabulary annotation that binds to a term and a qualifier from the metadata annotation dictionary in current data service context for a specified type.
            </summary>
            <param name="context">The data service context.</param>
            <param name="type">The specified annotated type.</param>
            <param name="term">The term name.</param>
            <param name="qualifier">The qualifier name.</param>
            <returns>The vacabulary annotation that binds to a term and a qualifier for the specified annotated type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.GetOrInsertCachedMetadataAnnotationForPropertyInfo(Microsoft.OData.Client.DataServiceContext,System.Reflection.PropertyInfo,System.String,System.String)">
            <summary>
            Gets vocabulary annotation that binds to a term and a qualifier from the metadata annotation dictionary in current data service context for a specified propertyInfo.
            </summary>
            <param name="context">The data service context.</param>
            <param name="propertyInfo">The specified annotated propertyInfo.</param>
            <param name="term">The term name.</param>
            <param name="qualifier">The qualifier name.</param>
            <returns>The vacabulary annotation that binds to a term and a qualifier for the specified annotated propertyInfo.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.GetOrInsertCachedMetadataAnnotationForMethodInfo(Microsoft.OData.Client.DataServiceContext,System.Reflection.MethodInfo,System.String,System.String)">
            <summary>
            Gets vocabulary annotation that binds to a term and a qualifier from the metadata annotation dictionary in current data service context for a specified methodInfo.
            </summary>
            <param name="context">The data service context.</param>
            <param name="methodInfo">The specified annotated methodInfo.</param>
            <param name="term">The term name.</param>
            <param name="qualifier">The qualifier name.</param>
            <returns>The vacabulary annotation that binds to a term and a qualifier for the specified annotated methodInfo.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.GetCachedMetadataAnnotation(Microsoft.OData.Client.DataServiceContext,System.Object,System.String,System.String)">
            <summary>
            Get a cahced metadata annotation for a specified annotatable object from current context.
            </summary>
            <param name="context">The data service context.</param>
            <param name="key">The specified annotatable object.</param>
            <param name="term">The term name of the annotation.</param>
            <param name="qualifier">The qualifier to be applied.</param>
            <returns><see cref="T:Microsoft.OData.Edm.Annotations.IEdmValueAnnotation"/> to be returned if it is found or return null. </returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.InsertMetadataAnnotation(Microsoft.OData.Client.DataServiceContext,System.Object,Microsoft.OData.Edm.Annotations.IEdmValueAnnotation)">
            <summary>
            Insert an metadata annotation with the provided key to the metadata annotation dictionary.
            </summary>
            <param name="context">The data service context</param>
            <param name="key">The specified key</param>
            <param name="edmValueAnnotation">The metadata annotation to be inserted.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.TryEvaluateMetadataAnnotation``1(Microsoft.OData.Client.DataServiceContext,Microsoft.OData.Edm.Annotations.IEdmValueAnnotation,Microsoft.OData.Client.ClientEdmStructuredValue,``0@)">
            <summary>
            Evaluate IEdmValueAnnotation to an CLR object
            </summary>
            <typeparam name="TResult">The CLR type of the annotation to be returned.</typeparam>
            <param name="context">The data service context.</param>
            <param name="edmValueAnnotation">IEdmValueAnnotation to be evaluated.</param>
            <param name="clientEdmValue">Value to use as context in evaluating the expression.</param>
            <param name="annotationValue">Value of the term evaluated.</param>
            <returns>True if the annotation value can be evaluated, else false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.CreateEdmToClrEvaluator(Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Create an <see cref="T:Microsoft.OData.Edm.Evaluation.EdmToClrEvaluator"/> instance used to evaluate an edm value.
            </summary>
            <param name="context">The data service context.</param>
            <returns>The <see cref="T:Microsoft.OData.Edm.Evaluation.EdmToClrEvaluator"/> instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.GetNonBindingParameterTypeArray(Microsoft.OData.Client.DataServiceContext,System.Collections.Generic.IEnumerable{Microsoft.OData.Edm.IEdmOperationParameter},System.Boolean)">
            <summary>
            Gets CLR types for a collection of <see cref="T:Microsoft.OData.Edm.IEdmOperationParameter"/>s.
            </summary>
            <param name="context">The data service context</param>
            <param name="parameters">The parameters to be converted </param>
            <param name="isBound">This flag indicates whether the operation that these parameters belongs to is bound operation</param>
            <returns>The CLR types for the <paramref name="parameters"/></returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.TryGetClrTypeFromEdmTypeReference(Microsoft.OData.Client.DataServiceContext,Microsoft.OData.Edm.IEdmTypeReference,System.Boolean,System.Type@)">
            <summary>
            Gets the CLR type based on the <see cref="T:Microsoft.OData.Edm.IEdmTypeReference"/> and the current data service context.
            </summary>
            <param name="context">The data service context.</param>
            <param name="edmTypeReference">The specified edm type reference.</param>
            <param name="isBindingParameter">This flag indicates whether the edm type reference is used for a binding parameter.</param>
            <param name="clrType">The output parameter to return the CLR type.</param>
            <returns>True if the CLR type is found, or false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.ResolveTypeFromName(Microsoft.OData.Client.DataServiceContext,System.String)">
            <summary>
            Get the client CLR type according to the qualified type name.
            </summary>
            <param name="context">The data service context.</param>
            <param name="qualifiedTypeName">The qualified type name.</param>
            <returns>The client CLR type.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Annotation.AnnotationHelper.AnnotationMaterializeHelper">
            <summary>
            Provides functions to <see cref="T:Microsoft.OData.Edm.EdmToClrConversion.EdmToClrConverter"/> to get client CLR information by using edm info.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Annotation.AnnotationHelper.AnnotationMaterializeHelper.dataServiceContext">
            <summary>
            The data service context.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.AnnotationMaterializeHelper.#ctor(Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Create an <see cref="T:Microsoft.OData.Client.Annotation.AnnotationHelper.AnnotationMaterializeHelper"/> instance.
            </summary>
            <param name="context">Current data service context.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.AnnotationMaterializeHelper.TryGetClrTypeName(Microsoft.OData.Edm.IEdmModel,System.String,System.String@)">
            <summary>
            Gets CLR type name based on the edm type name and <see cref="T:Microsoft.OData.Edm.IEdmModel"/>.
            </summary>
            <param name="edmModel">The edm model.</param>
            <param name="qualifiedEdmTypeName">The edm type name.</param>
            <param name="typeNameInClientModel">The client clr type name.</param>
            <returns>True if the client clr type name can be found, else false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.AnnotationMaterializeHelper.TryGetClientPropertyInfo(System.Type,System.String,System.Reflection.PropertyInfo@)">
            <summary>
            Gets client property info of a specified property name from a Type.
            </summary>
            <param name="type">The type that contains the property.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyInfo">The specified property, or null if the property is not found</param>
            <returns>True if the property is found, else false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.AnnotationMaterializeHelper.TryCreateObjectInstance(Microsoft.OData.Edm.Values.IEdmStructuredValue,System.Type,Microsoft.OData.Edm.EdmToClrConversion.EdmToClrConverter,System.Object@,System.Boolean@)">
            <summary>
            Create an instance of a CLR type based on <see cref="T:Microsoft.OData.Edm.Values.IEdmValue"/> and <see cref="T:System.Type"/>.
            </summary>
            <param name="edmValue">The <see cref="T:Microsoft.OData.Edm.Values.IEdmStructuredValue"/> for which the <paramref name="objectInstance"/> needs to be created.</param>
            <param name="clrType">The CLR type of the object instance.</param>
            <param name="converter">The converter instance calling this method.</param>
            <param name="objectInstance">A CLR object instance created for the <paramref name="edmValue"/></param>
            <param name="objectInstanceInitialized">True if all properties of the created <paramref name="objectInstance"/> are initialized.
            False if properties of the created instance should be initialized using the default <see cref="T:Microsoft.OData.Edm.EdmToClrConversion.EdmToClrConverter"/> logic.</param>
            <returns>True if the <paramref name="objectInstance"/> is created, else false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.AnnotationMaterializeHelper.GetAnnnotationExpressionForType(Microsoft.OData.Edm.IEdmModel,Microsoft.OData.Edm.IEdmType,System.String,System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.OData.Edm.Expressions.IEdmExpression"/> of an annotation targeting a specified <paramref name="edmType"/>.
            </summary>
            <param name="edmModel">The edm model.</param>
            <param name="edmType">The specified edm type.</param>
            <param name="termName">The term name.</param>
            <param name="qualifier">Qualifier to apply</param>
            <returns>The <see cref="T:Microsoft.OData.Edm.Expressions.IEdmExpression"/> of the annotation, or null if it is not found.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.AnnotationMaterializeHelper.GetAnnnotationExpressionForProperty(Microsoft.OData.Edm.IEdmModel,Microsoft.OData.Edm.IEdmType,System.String,System.String,System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.OData.Edm.Expressions.IEdmExpression"/> of an annotation targeting a specified property or navigation property of an <paramref name="edmType"/>.
            </summary>
            <param name="edmModel">The edm model.</param>
            <param name="edmType">The specified edm type.</param>
            <param name="propertyName">The name of the specified property or navigation property.</param>
            <param name="termName">The term name.</param>
            <param name="qualifier">Qualifier to apply</param>
            <returns>The <see cref="T:Microsoft.OData.Edm.Expressions.IEdmExpression"/> of the annotation, or null if it is not found.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.AnnotationHelper.AnnotationMaterializeHelper.TryCreateClientObjectInstance(Microsoft.OData.Client.DataServiceContext,Microsoft.OData.Edm.Values.IEdmStructuredValue,System.Type,System.Object@,System.Boolean@)">
            <summary>
            Create an instance of a CLR type based on <see cref="T:Microsoft.OData.Edm.Values.IEdmValue"/> and <see cref="T:System.Type"/>.
            </summary>
            <param name="context">The data service context.</param>
            /// <param name="edmValue">The <see cref="T:Microsoft.OData.Edm.Values.IEdmStructuredValue"/> for which the <paramref name="objectInstance"/> needs to be created.</param>
            <param name="clrType">The CLR type of the object instance.</param>
            <param name="objectInstance">A CLR object instance created for the <paramref name="edmValue"/></param>
            <param name="objectInstanceInitialized">True if all properties of the created <paramref name="objectInstance"/> are initialized.
            False if properties of the created instance should be initialized using the default <see cref="T:Microsoft.OData.Edm.EdmToClrConversion.EdmToClrConverter"/> logic.</param>
            <returns>True if the <paramref name="objectInstance"/> is created, else false.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Annotation.InstanceAnnotationDictWeakKeyComparer">
            <summary>
            Used to compare key in DataServiceContext.InstanceAnnotations. 
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.WeakKeyComparer`1">
            <summary>
            Defines methods to support the comparison of WeakKeyReferences for equality.
            </summary>
            <typeparam name="T">The type of the object to be compared.</typeparam>
            <remarks>
            Compares objects of the given type or WeakKeyReferences to them for equality based on the given comparer. Note that we can only
            implement <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for T = object as there is no other common base between T and <see cref="T:Microsoft.OData.Client.WeakKeyReference`1"/>. We need a
            single comparer to handle both types because we don't want to allocate a new weak reference for every lookup.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.WeakKeyComparer`1.comparer">
            <summary>
            Internal comparer used to determine the equal for <typeparamref name="T"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.WeakKeyComparer`1.defaultInstance">
            <summary>
            The default comparer.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.WeakKeyComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor
            </summary>
            <param name="comparer">
            Internal comparer used to determine the equal for <typeparamref name="T"/> objects.
            </param>
        </member>
        <member name="M:Microsoft.OData.Client.WeakKeyComparer`1.GetHashCode(System.Object)">
            <summary>
            Get the hash code for the specified object.
            </summary>
            <param name="obj">The object for which a hash code is to be returned.</param>
            <returns>
            A hash code for the specified object.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.WeakKeyComparer`1.Equals(System.Object,System.Object)">
             <summary>
             Determines whether the specified objects are equal.
             </summary>
             <param name="obj1">The first object to compare.</param>
             <param name="obj2">The second object to compare.</param>
             <returns>true if the specified objects are equal; otherwise, false.</returns>
             <remarks>
              Note: There are actually 9 cases to handle here.
            
              Let Wa = Alive Weak Reference
              Let Wd = Dead Weak Reference
              Let S  = Strong Reference
              
              x  | y  | Equals(x,y)
             -------------------------------------------------
              Wa | Wa | comparer.Equals(x.Target, y.Target) 
              Wa | Wd | false
              Wa | S  | comparer.Equals(x.Target, y)
              Wd | Wa | false
              Wd | Wd | x == y
              Wd | S  | false
              S  | Wa | comparer.Equals(x, y.Target)
              S  | Wd | false
              S  | S  | comparer.Equals(x, y)
             -------------------------------------------------
             </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.WeakKeyComparer`1.GetTarget(System.Object,System.Boolean@)">
            <summary>
            Gets the target of the input object if it is a <see cref="T:Microsoft.OData.Client.WeakKeyReference`1"/>, else return it self.
            </summary>
            <param name="obj">The input object from which to get the target.</param>
            <param name="isDead">Indicate whether the object is dead if it is a <see cref="T:Microsoft.OData.Client.WeakKeyReference`1"/>.</param>
            <returns>The target of the input object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.WeakKeyComparer`1.Default">
            <summary>
            Get the default comparer.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.InstanceAnnotationDictWeakKeyComparer.#ctor">
            <summary>
            The constructor to create an InstanceAnnotationDictWeakKeyComparer
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.InstanceAnnotationDictWeakKeyComparer.GetHashCode(System.Object)">
            <summary>
            Get the hash code for the specified object.
            </summary>
            <param name="obj">The object of which a hash code is to be returned.</param>
            <returns>
            A hash code for the specified object.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.InstanceAnnotationDictWeakKeyComparer.CreateKey(System.Object)">
            <summary>
            Create a dictionary key for the specified obj.
            </summary>
            <param name="obj">The specified object used to create a key</param>
            <returns>Returns a Tuple&lt;WeakKeyReference&lt;object&gt;, MemberInfo&gt; if the input object is a tuple,
            or returns a WeakKeyReference&lt;object&gt;</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.InstanceAnnotationDictWeakKeyComparer.RemoveRule(System.Object)">
            <summary>
            A rule to determine whether an entry with the key could be removed.
            </summary>
            <param name="key">The key of an entry to be checked.</param>
            <returns>Returns true if the target of a WeakKeyReference&lt;object&gt; in a tuple is dead, else false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Annotation.InstanceAnnotationDictWeakKeyComparer.GetTarget(System.Object,System.Boolean@)">
            <summary>
            Gets the target of the input object if it is a <see cref="T:Microsoft.OData.Client.WeakKeyReference`1"/>, 
            else a new Tuple&lt;object, MemberInfo&gt; if it is a Tuple&lt;WeakKeyReferece&lt;object&gt;, MemberInfo&gt;.
            </summary>
            <param name="obj">The input object from which to get the target.</param>
            <param name="isDead">Indicate whether the object is dead if it is a <see cref="T:Microsoft.OData.Client.WeakKeyReference`1"/>.
            Or wehther the first item of a tuple is dead.
            </param>
            <returns>The target of the input object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Annotation.InstanceAnnotationDictWeakKeyComparer.Default">
            <summary>
            Get the default comparer.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceActionQuery`1">
            <summary>
            Object of an action which returns a collection.
            </summary>
            <typeparam name="T">Type of object to materialize.</typeparam>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceActionQuery`1.Context">
            <summary>
            Context associated with this query.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceActionQuery`1.Parameters">
            <summary>
            Parameters of this action.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery`1.#ctor(Microsoft.OData.Client.DataServiceContext,System.String,Microsoft.OData.Client.BodyOperationParameter[])">
            <summary>
            Object of an action which returns a collection.
            </summary>
            <param name="context">Context associated with this query.</param>
            <param name="requestUriString">The URI string for this action.</param>
            <param name="parameters">Parameters of this action.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery`1.Execute">
            <summary>
            Executes the action and returns the results as a collection.
            </summary>
            <returns>Action results.</returns>
            <exception cref="T:System.InvalidOperationException">Problem materializing result of query into object.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery`1.BeginExecute(System.AsyncCallback,System.Object)">
            <summary>Asynchronously sends a request to the data service to execute a specific URI.</summary>
            <returns>The result of the operation.</returns>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery`1.ExecuteAsync">
            <summary>Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.</summary>
            <returns>A task represents the result of the operation. </returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery`1.EndExecute(System.IAsyncResult)">
            <summary>Called to complete the <see cref="M:Microsoft.OData.Client.DataServiceActionQuery.BeginExecute``1(System.AsyncCallback,System.Object)" />.</summary>
            <returns>The results returned by the query operation.</returns>
            <param name="asyncResult">
              <see cref="T:System.IAsyncResult" /> object.</param>
            <exception cref="T:System.ArgumentNullException">When<paramref name=" asyncResult" /> is null.</exception>
            <exception cref="T:System.ArgumentException">When<paramref name=" asyncResult" /> did not originate from this <see cref="T:Microsoft.OData.Client.DataServiceContext" /> instance. -or- When the <see cref="M:Microsoft.OData.Client.DataServiceContext.EndExecute``1(System.IAsyncResult)" /> method was previously called.</exception>
            <exception cref="T:System.InvalidOperationException">When an error is raised either during execution of the request or when it converts the contents of the response message into objects.</exception>
            <exception cref="T:Microsoft.OData.Client.DataServiceQueryException">When the data service returns an HTTP 404: Resource Not Found error.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery`1.GetEnumerator">
            <summary>
            Executes the query and returns the results as a collection.
            </summary>
            <returns>A typed enumerator over the results in which TElement represents the type of the query results.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceActionQuery`1.RequestUri">
            <summary>
            The URI for this action.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ActionDescriptor">
            <summary> Holds information about a ServiceAction. </summary>
        </member>
        <member name="T:Microsoft.OData.Client.OperationDescriptor">
            <summary> Holds information about a service operation. </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Descriptor">
            <summary>Abstract class from which <see cref="T:Microsoft.OData.Client.EntityDescriptor" /> is derived.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Descriptor.changeOrder">
            <summary>change order</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Descriptor.saveContentGenerated">
            <summary>was content generated for the entity</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Descriptor.saveResultProcessed">
            <summary>was this entity save result processed</summary>
            <remarks>0 - no processed, otherwise reflects the previous state</remarks>
        </member>
        <member name="F:Microsoft.OData.Client.Descriptor.saveError">
            <summary>last save exception per entry</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Descriptor.state">
            <summary>State of the modified entity or link.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Descriptor.#ctor(Microsoft.OData.Client.EntityStates)">
            <summary>
            constructor
            </summary>
            <param name="state">entity state</param>
        </member>
        <member name="M:Microsoft.OData.Client.Descriptor.ClearChanges">
            <summary>
            Clear all the changes associated with this descriptor
            This method is called when the client is done with sending all the pending requests.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Descriptor.State">
            <summary>When overridden in a derived class, gets the state of the object at the time this instance was constructed.</summary>
            <returns>An <see cref="T:Microsoft.OData.Client.EntityStates" /> of the object returned at the time this instance was constructed.  </returns>
        </member>
        <member name="P:Microsoft.OData.Client.Descriptor.DescriptorKind">
            <summary>true if resource, false if link</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Descriptor.ChangeOrder">
            <summary>changeOrder</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Descriptor.ContentGeneratedForSave">
            <summary>was content generated for the entity</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Descriptor.SaveResultWasProcessed">
            <summary>was this entity save result processed</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Descriptor.SaveError">
            <summary>last save exception per entry</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Descriptor.IsModified">
            <summary>
            Returns true if the entry has been modified (and thus should participate in SaveChanges).
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.OperationDescriptor.title">
            <summary>Maps to m:action\@title. Human-readable description of the service operation.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.OperationDescriptor.metadata">
            <summary>maps to m:action\@metadata. Identifies the service operation.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.OperationDescriptor.target">
            <summary>maps to m:action\@target. The URI to invoke the service operation.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.OperationDescriptor.#ctor">
            <summary>
            Creates a new instance of the Operation descriptor.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.OperationDescriptor.ClearChanges">
            <summary>
            Nothing to clear in case of operation descriptor.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.OperationDescriptor.Title">
            <summary>Human-readable description of the service operation.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.OperationDescriptor.Metadata">
            <summary>Identifies the service operation.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.OperationDescriptor.Target">
            <summary>The URI to invoke the service operation.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.OperationDescriptor.DescriptorKind">
            <summary>
            this is an operation descriptor.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.CommonUtil">
            <summary>
            Common defintions and functions for ALL product assemblies
            </summary>
            <summary>
            Common defintions and functions for the server and client lib
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.CommonUtil.OutOfMemoryType">
            <summary>Type of OutOfMemoryException.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.CommonUtil.StackOverflowType">
            <summary>Type of StackOverflowException.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.CommonUtil.ThreadAbortType">
            <summary>Type of ThreadAbortException.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.CommonUtil.IsCatchableExceptionType(System.Exception)">
            <summary>
            Determines whether the specified exception can be caught and 
            handled, or whether it should be allowed to continue unwinding.
            </summary>
            <param name="e"><see cref="T:System.Exception"/> to test.</param>
            <returns>
            true if the specified exception can be caught and handled; 
            false otherwise.
            </returns>
        </member>
        <member name="F:Microsoft.OData.Client.CommonUtil.unsupportedTypes">
            <summary>
            List of types unsupported by the client
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.CommonUtil.IsUnsupportedType(System.Type)">
            <summary>
            Test whether a type is unsupported by the client lib
            </summary>
            <param name="type">The type to test</param>
            <returns>Returns true if the type is not supported</returns>
        </member>
        <member name="M:Microsoft.OData.Client.CommonUtil.GetCollectionItemTypeName(System.String,System.Boolean)">
            <summary>
            Returns collection item type name or null if the provided type name is not a collection.
            </summary>
            <param name="typeName">Collection type name read from payload.</param>
            <param name="isNested">Whether it is a nested (recursive) call.</param>
            <returns>Collection element type name or null if not a collection.</returns>
            <remarks>
            The following rules are used for collection type names:
            - it has to start with "Collection(" and end with ")" - trailing and leading whitespaces make the type not to be recognized as collection. 
            - there is to be no characters (including whitespaces) between "Collection" and "(" - otherwise it won't be recognized as collection
            - collection item type name has to be a non-empty string - i.e. "Collection()" won't be recognized as collection
            - nested collection - e.g. "Collection(Collection(Edm.Int32))" - are not supported - we will throw
            Note the following are examples of valid type names which are not collection:
            - "Collection()"
            - " Collection(Edm.Int32)"
            - "Collection (Edm.Int32)"
            - "Collection("
            If the type name is not recognized as a collection it will be eventually passed to type resolver if it is not a known primitive type.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.CommonUtil.ConvertToODataVersion(Microsoft.OData.Client.ODataProtocolVersion)">
            <summary>
            Convert the ODataProtocolVersion to ODataVersion.
            </summary>
            <param name="maxProtocolVersion">ODataProtocolVersion value to convert.</param>
            <returns>an ODataVersion value for the given ODataProtocolVersion value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.CommonUtil.ConvertToODataVersion(System.Version)">
            <summary>
            Converts the given version instance to ODataVersion enum.
            </summary>
            <param name="version">Version instance containing the response payload.</param>
            <returns>ODataVersion enum value for the given version.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.CommonUtil.GetModelTypeName(System.Type)">
            <summary>
            Gets the type name (without namespace) of the specified <paramref name="type"/>,
            appropriate as an externally-visible type name.
            </summary>
            <param name="type">Type to get name for.</param>
            <returns>The type name for <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.CommonUtil.GetModelTypeNamespace(System.Type)">
            <summary>
            Gets the type namespace of the specified <paramref name="type"/>,
            appropriate as an externally-visible type name.
            </summary>
            <param name="type">Type to get namespace for.</param>
            <returns>The namespace for <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.CommonUtil.TryReadVersion(System.String,System.Collections.Generic.KeyValuePair{System.Version,System.String}@)">
            <summary>Tries to read a WCF Data Service version string.</summary>
            <param name="text">Text to read.</param>
            <param name="result">Parsed version and trailing text.</param>
            <returns>true if the version was read successfully; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.CommonUtil.SetDefaultMessageQuotas(Microsoft.OData.Core.ODataMessageQuotas)">
            <summary>
            Set the message quota limits for WCF Data services server.
            </summary>
            <param name="messageQuotas">Instance of ODataMessageQuotas.</param>
        </member>
        <member name="T:Microsoft.OData.Client.ContentTypeUtil">
            <summary>Provides helper methods for processing HTTP requests.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ContentTypeUtil.EncodingUtf8NoPreamble">
            <summary>UTF-8 encoding, without the BOM preamble.</summary>
            <remarks>
            While a BOM preamble on UTF8 is generally benign, it seems that some MIME handlers under IE6 will not 
            process the payload correctly when included.
            
            Because the data service should include the encoding as part of the Content-Type in the response,
            there should be no ambiguity as to what encoding is being used.
            
            For further information, see http://www.unicode.org/faq/utf_bom.html#BOM.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.ReadContentType(System.String,System.String@)">
            <summary>Reads a Content-Type header and extracts the MIME type/subtype.</summary>
            <param name="contentType">The Content-Type header.</param>
            <param name="mime">The MIME type in standard type/subtype form, without parameters.</param>
            <returns>parameters of content type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.WriteContentType(System.String,Microsoft.OData.Client.ContentTypeUtil.MediaParameter[])">
            <summary>Builds a Content-Type given the mime type and all the parameters.</summary>
            <param name="mimeType">The MIME type in standard type/subtype form, without parameters.</param>
            <param name="parameters">Parameters to be appended in the mime type.</param>
            <returns>content type containing the mime type and all the parameters.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.ReadContentType(System.String,System.String@,System.Text.Encoding@)">
            <summary>Reads a Content-Type header and extracts the MIME type/subtype and encoding.</summary>
            <param name="contentType">The Content-Type header.</param>
            <param name="mime">The MIME type in standard type/subtype form, without parameters.</param>
            <param name="encoding">Encoding (possibly null).</param>
            <returns>parameters of content type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.EncodingFromName(System.String)">
            <summary>Gets the named encoding if specified.</summary>
            <param name="name">Name (possibly null or empty).</param>
            <returns>
            The named encoding if specified; the encoding for HTTP missing 
            charset specification otherwise.
            </returns>
            <remarks>
            See http://tools.ietf.org/html/rfc2616#section-3.4.1 for details.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.ReadMediaTypeAndSubtype(System.String,System.Int32@,System.String@,System.String@)">
            <summary>Reads the type and subtype specifications for a MIME type.</summary>
            <param name='text'>Text in which specification exists.</param>
            <param name='textIndex'>Pointer into text.</param>
            <param name='type'>Type of media found.</param>
            <param name='subType'>Subtype of media found.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.ReadMediaType(System.String)">
            <summary>Reads a media type definition as used in a Content-Type header.</summary>
            <param name="text">Text to read.</param>
            <returns>The <see cref="T:Microsoft.OData.Client.ContentTypeUtil.MediaType"/> defined by the specified <paramref name="text"/></returns>
            <remarks>All syntactic errors will produce a 400 - Bad Request status code.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.ReadToken(System.String,System.Int32@)">
            <summary>
            Reads a token on the specified text by advancing an index on it.
            </summary>
            <param name="text">Text to read token from.</param>
            <param name="textIndex">Index for the position being scanned on text.</param>
            <returns>true if the end of the text was reached; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.SkipWhitespace(System.String,System.Int32@)">
            <summary>
            Skips whitespace in the specified text by advancing an index to
            the next non-whitespace character.
            </summary>
            <param name="text">Text to scan.</param>
            <param name="textIndex">Index to begin scanning from.</param>
            <returns>true if the end of the string was reached, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.ReadMediaTypeParameter(System.String,System.Int32@,Microsoft.OData.Client.ContentTypeUtil.MediaParameter[]@)">
            <summary>Read a parameter for a media type/range.</summary>
            <param name="text">Text to read from.</param>
            <param name="textIndex">Pointer in text.</param>
            <param name="parameters">Array with parameters to grow as necessary.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.ReadQuotedParameterValue(System.String,System.String,System.Int32@)">
            <summary>
            Reads Mime type parameter value for a particular parameter in the Content-Type/Accept headers.
            </summary>
            <param name="parameterName">Name of parameter.</param>
            <param name="headerText">Header text.</param>
            <param name="textIndex">Parsing index in <paramref name="headerText"/>.</param>
            <returns>String representing the value of the <paramref name="parameterName"/> parameter.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.IsHttpSeparator(System.Char)">
            <summary>
            Determines whether the specified character is a valid HTTP separator.
            </summary>
            <param name="c">Character to verify.</param>
            <returns>true if c is a separator; false otherwise.</returns>
            <remarks>
            See RFC 2616 2.2 for further information.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.IsHttpToken(System.Char)">
            <summary>
            Determines whether the specified character is a valid HTTP header token character.
            </summary>
            <param name="c">Character to verify.</param>
            <returns>true if c is a valid HTTP header token character; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ContentTypeUtil.FallbackEncoding">
            <summary>Encoding to fall back to an appropriate encoding is not available.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ContentTypeUtil.MissingEncoding">
            <summary>Encoding implied by an unspecified encoding value.</summary>
            <remarks>See http://tools.ietf.org/html/rfc2616#section-3.4.1 for details.</remarks>
        </member>
        <member name="T:Microsoft.OData.Client.ContentTypeUtil.MediaParameter">
            <summary>Class to store media parameter information.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.MediaParameter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of MediaParameter.
            </summary>
            <param name="name">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <param name="isQuoted">True if the value of the parameter is quoted, otherwise false.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.MediaParameter.GetOriginalValue">
            <summary>
            Gets the original value of the parameter.
            </summary>
            <returns>the original value of the parameter.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ContentTypeUtil.MediaParameter.Name">
            <summary>Gets the name of the parameter.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ContentTypeUtil.MediaParameter.Value">
            <summary>Value of the parameter.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ContentTypeUtil.MediaParameter.IsQuoted">
            <summary>true if the value is quoted, otherwise false.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ContentTypeUtil.MediaType">
            <summary>Use this class to represent a media type definition.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ContentTypeUtil.MediaType.parameters">
            <summary>Parameters specified on the media type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ContentTypeUtil.MediaType.subType">
            <summary>Sub-type specification (for example, 'plain').</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ContentTypeUtil.MediaType.type">
            <summary>Type specification (for example, 'text').</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.MediaType.#ctor(System.String,System.String,Microsoft.OData.Client.ContentTypeUtil.MediaParameter[])">
            <summary>
            Initializes a new <see cref="T:Microsoft.OData.Client.ContentTypeUtil.MediaType"/> read-only instance.
            </summary>
            <param name="type">Type specification (for example, 'text').</param>
            <param name="subType">Sub-type specification (for example, 'plain').</param>
            <param name="parameters">Parameters specified on the media type.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ContentTypeUtil.MediaType.SelectEncoding">
            <summary>
            Selects the encoding appropriate for this media type specification
            (possibly null).
            </summary>
            <returns>
            The encoding explicitly defined on the media type specification, or
            the default encoding for well-known media types.
            </returns>
            <remarks>
            As per http://tools.ietf.org/html/rfc2616#section-3.7, the type, 
            subtype and parameter name attributes are case-insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.ContentTypeUtil.MediaType.MimeType">
            <summary>Returns the MIME type in standard type/subtype form, without parameters.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ContentTypeUtil.MediaType.Parameters">
            <summary>media type parameters</summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceActionQuerySingle`1">
            <summary>
            Object of an action which returns a single item.
            </summary>
            <typeparam name="T">Type of object to materialize.</typeparam>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceActionQuerySingle`1.context">
            <summary>
            Context associated with this query.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceActionQuerySingle`1.parameters">
            <summary>
            Parameters of this action.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuerySingle`1.#ctor(Microsoft.OData.Client.DataServiceContext,System.String,Microsoft.OData.Client.BodyOperationParameter[])">
            <summary>
            Object of an action which returns a single item.
            </summary>
            <param name="context">Context associated with this query.</param>
            <param name="requestUriString">The URI string for this action.</param>
            <param name="parameters">Parameters of this action.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuerySingle`1.GetValue">
            <summary>
            Executes the action and returns the result.
            </summary>
            <returns>Action result.</returns>
            <exception cref="T:System.InvalidOperationException">Problem materializing result of query into object.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuerySingle`1.BeginGetValue(System.AsyncCallback,System.Object)">
            <summary>Asynchronously sends a request to the data service to execute a specific URI.</summary>
            <returns>The result of the operation.</returns>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuerySingle`1.GetValueAsync">
            <summary>Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.</summary>
            <returns>A task represents the result of the operation. </returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuerySingle`1.EndGetValue(System.IAsyncResult)">
            <summary>Called to complete the <see cref="M:Microsoft.OData.Client.ActionSingleReturnOfT.BeginExecute``1(System.AsyncCallback,System.Object)" />.</summary>
            <returns>The results returned by the query operation.</returns>
            <param name="asyncResult">
              <see cref="T:System.IAsyncResult" /> object.</param>
            <exception cref="T:System.ArgumentNullException">When<paramref name=" asyncResult" /> is null.</exception>
            <exception cref="T:System.ArgumentException">When<paramref name=" asyncResult" /> did not originate from this <see cref="T:Microsoft.OData.Client.DataServiceContext" /> instance. -or- When the <see cref="M:Microsoft.OData.Client.DataServiceContext.EndExecute``1(System.IAsyncResult)" /> method was previously called.</exception>
            <exception cref="T:System.InvalidOperationException">When an error is raised either during execution of the request or when it converts the contents of the response message into objects.</exception>
            <exception cref="T:Microsoft.OData.Client.DataServiceQueryException">When the data service returns an HTTP 404: Resource Not Found error.</exception>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceActionQuerySingle`1.RequestUri">
            <summary>
            The URI for this action.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceActionQuery">
            <summary>
            Object of an action which returns nothing.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceActionQuery.Context">
            <summary>
            Context associated with this query.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceActionQuery.Parameters">
            <summary>
            Parameters of this action.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery.#ctor(Microsoft.OData.Client.DataServiceContext,System.String,Microsoft.OData.Client.BodyOperationParameter[])">
            <summary>
            Object of an action which returns nothing.
            </summary>
            <param name="context">Context associated with this query.</param>
            <param name="requestUriString">The URI string for this action.</param>
            <param name="parameters">Parameters of this action.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery.Execute">
            <summary>
            Executes the action and returns the operation response.
            </summary>
            <returns>Operation result.</returns>
            <exception cref="T:System.InvalidOperationException">Problem materializing result of query into object.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery.BeginExecute(System.AsyncCallback,System.Object)">
            <summary>Asynchronously sends a request to the data service to execute a specific URI.</summary>
            <returns>The result of the operation.</returns>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery.ExecuteAsync">
            <summary>Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.</summary>
            <returns>A task represents the result of the operation. </returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceActionQuery.EndExecute(System.IAsyncResult)">
            <summary>Called to complete the <see cref="M:Microsoft.OData.Client.DataServiceActionQuery.BeginExecute``1(System.AsyncCallback,System.Object)" />.</summary>
            <returns>The result of the operation.</returns>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</param>
            <remarks>This method should be used in combination with the BeginExecute overload which
            expects the request uri to end with an action that returns void.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceActionQuery.RequestUri">
            <summary>
            The URI for this action.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.QueryableResourceExpression">
            <summary>Queryable Resource Expression, the base class for ResourceSetExpression and SingletonExpression</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ResourceExpression">
            <summary>
            Abstract base class for expressions that support Query Options
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.source">
            <summary>Source expression.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.inputRef">
            <summary>Singleton InputReferenceExpression that should be used to indicate a reference to this element of the resource path</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.type">
            <summary>The CLR type this node will evaluate into.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.expandPaths">
            <summary>expand paths</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.countOption">
            <summary>The count query option for the resource set</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.customQueryOptions">
            <summary>custom query options</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.projection">
            <summary>projection expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.uriVersion">
            <summary>Uri version for the expression and also the expand and projection paths</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.operationName">
            <summary>name of operation</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.operationParameters">
            <summary>names and values of parameters</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpression.isAction">
            <summary>false for function, true for action</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceExpression.#ctor(System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.String},Microsoft.OData.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression},Microsoft.OData.Client.ProjectionQueryOptionExpression,System.Type,System.Version)">
            <summary>
            Creates a Resource expression
            </summary>
            <param name="source">the source expression</param>
            <param name="type">the return type of the expression</param>
            <param name="expandPaths">the expand paths</param>
            <param name="countOption">the count option</param>
            <param name="customQueryOptions">The custom query options</param>
            <param name="projection">the projection expression</param>
            <param name="resourceTypeAs">TypeAs type</param>
            <param name="uriVersion">version of the Uri from the expand and projection paths</param>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceExpression.#ctor(System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.String},Microsoft.OData.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression},Microsoft.OData.Client.ProjectionQueryOptionExpression,System.Type,System.Version,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Creates a Resource expression
            </summary>
            <param name="source">the source expression</param>
            <param name="type">the return type of the expression</param>
            <param name="expandPaths">the expand paths</param>
            <param name="countOption">the count option</param>
            <param name="customQueryOptions">The custom query options</param>
            <param name="projection">the projection expression</param>
            <param name="resourceTypeAs">TypeAs type</param>
            <param name="uriVersion">version of the Uri from the expand and projection paths</param>
            <param name="operationName">name of function</param>
            <param name="operationParameters">parameters' names and values of function</param>
            <param name="isAction">action flag</param>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceExpression.CreateReference">
            <summary>
            Creates an <see cref="T:Microsoft.OData.Client.InputReferenceExpression"/> that refers to this component of the resource path. 
            The returned expression is guaranteed to be reference-equal (object.ReferenceEquals)
            to any other InputReferenceExpression that also refers to this resource path component.
            </summary>
            <returns>The InputReferenceExpression that refers to this resource path component</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceExpression.RaiseUriVersion(System.Version)">
            <summary>Raise the UriVersion if it is lower than <paramref name="newVersion"/>.</summary>
            <param name="newVersion">Uri version from the expand and projection paths</param>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.Type">
            <summary>
            The <see cref="P:Microsoft.OData.Client.ResourceExpression.Type"/> of the value represented by this <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.ResourceType">
            <summary>
            Resource type for this expression (for sets, this is the element type).
            Never null.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.ResourceTypeAs">
            <summary>
            The resource type that this expression is explicitly converted to by a TypeAs
            expression (i.e., "as" operator in C#, "TryCast" in VB). Null if no conversion.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.UriVersion">
            <summary>
            Uri version from the expand and projection paths
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.IsSingleton">
            <summary>
            Does this expression produce at most 1 resource?
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.ExpandPaths">
            <summary>
            Expand query option for ResourceSet
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.CountOption">
            <summary>
            Count query option for ResourceSet
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.CustomQueryOptions">
            <summary>
            custom query options for ResourceSet
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.Projection">
            <summary>Description of the projection on a resource.</summary>
            <remarks>
            This property is set by the ProjectionAnalyzer component (so it
            mutates this instance), or by the ResourceBinder when it clones
            a ResourceExpression.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.Source">
            <summary>
            Gets the source expression.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.OperationName">
            <summary>
            operation name
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.OperationParameters">
            <summary>
            operation parameter names and parameters pair for Resource
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceExpression.IsAction">
            <summary>
            false for function, true for action
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryableResourceExpression.keyPredicateConjuncts">
            <summary>Key Predicate conjuncts that will make a key predicate</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryableResourceExpression.resourceType">
            <summary>
            The (static) type of the resources in this navigation resource.
            The resource type can differ from this.Type if this expression represents a transparent scope.
            For example, in TransparentScope{Category, Product}, the true element type is Product.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryableResourceExpression.member">
            <summary>property member name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryableResourceExpression.keyFilter">
            <summary>key predicate</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryableResourceExpression.sequenceQueryOptions">
            <summary>sequence query options</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryableResourceExpression.transparentScope">
            <summary>enclosing transparent scope</summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.#ctor(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.String},Microsoft.OData.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression},Microsoft.OData.Client.ProjectionQueryOptionExpression,System.Type,System.Version)">
            <summary>
            Creates a navigation resource expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="source">the source expression</param>
            <param name="memberExpression">property member name</param>
            <param name="resourceType">the element type of the resource</param>
            <param name="expandPaths">expand paths for resource set</param>
            <param name="countOption">count query option for the resource</param>
            <param name="customQueryOptions">custom query options for resource</param>
            <param name="projection">the projection expression</param>
            <param name="resourceTypeAs">TypeAs type</param>
            <param name="uriVersion">version of the Uri from the expand and projection paths</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.#ctor(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.String},Microsoft.OData.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression},Microsoft.OData.Client.ProjectionQueryOptionExpression,System.Type,System.Version,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Creates a navigation resource expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="source">the source expression</param>
            <param name="memberExpression">property member name</param>
            <param name="resourceType">the element type of the resource</param>
            <param name="expandPaths">expand paths for resource set</param>
            <param name="countOption">count query option for the resource</param>
            <param name="customQueryOptions">custom query options for resource</param>
            <param name="projection">the projection expression</param>
            <param name="resourceTypeAs">TypeAs type</param>
            <param name="uriVersion">version of the Uri from the expand and projection paths</param>
            <param name="operationName">name of function</param>
            <param name="operationParameters">parameters' names and values of function</param>
            <param name="isAction">action flag</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.CreateCloneWithNewType(System.Type)">
            <summary>
            Create a clone with new type.
            </summary>
            <param name="type">The type.</param>
            <returns>The new clone.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.CreateNavigationResourceExpression(System.Linq.Expressions.ExpressionType,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.String},Microsoft.OData.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression},Microsoft.OData.Client.ProjectionQueryOptionExpression,System.Type,System.Version,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a navigation resource expression
            </summary>
            <param name="expressionType">The expression type.</param>
            <param name="type">the return type of the expression</param>
            <param name="source">the source expression</param>
            <param name="memberExpression">property member name</param>
            <param name="resourceType">the element type of the resource</param>
            <param name="expandPaths">expand paths for resource set</param>
            <param name="countOption">count query option for the resource</param>
            <param name="customQueryOptions">custom query options for resource</param>
            <param name="projection">the projection expression</param>
            <param name="resourceTypeAs">TypeAs type</param>
            <param name="uriVersion">version of the Uri from the expand and projection paths</param>
            <param name="operationName">The operation name.</param>
            <param name="operationParameters">The operation parameter names and parameters pair for Resource</param>
            <returns>The navigation resource expression.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.CreateCloneForTransparentScope(System.Type)">
            <summary>
            Cast QueryableResourceExpression to new type without affecting member type
            </summary>
            <param name="type">The new expression type</param>
            <returns>A copy of this with the new types</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.ConvertKeyToFilterExpression">
            <summary>
            Converts the key expression to filter expression
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.AddFilter(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Adds a filter to this ResourceSetExpression.
            If filter is already presents, adds the predicateConjunts to the 
            PredicateConjucts of the filter
            </summary>
            <param name="predicateConjuncts">The predicate conjuncts.</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.AddSequenceQueryOption(Microsoft.OData.Client.QueryOptionExpression)">
            <summary>
            Add query option to resource expression
            </summary>
            <param name="qoe">The query option expression.</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.RemoveFilterExpression">
            <summary>
            Removes the filter expression from current resource set.
            This happens when a separate Where clause is specified in a LINQ 
            expression for every key property.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.OverrideInputReference(Microsoft.OData.Client.QueryableResourceExpression)">
            <summary>
            Instructs this resource set expression to use the input reference expression from <paramref name="newInput"/> as it's
            own input reference, and to retarget the input reference from <paramref name="newInput"/> to this resource set expression.
            </summary>
            <param name="newInput">The resource set expression from which to take the input reference.</param>
            <remarks>Used exclusively by ResourceBinder.RemoveTransparentScope.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.SetKeyPredicate(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Sets key predicate from given values
            </summary>
            <param name="keyValues">The key values</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.GetKeyProperties">
            <summary>
            Gets the key properties from KeyPredicateConjuncts
            </summary>
            <returns>The key properties.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.CreateCloneWithNewTypes(System.Type,System.Type)">
            <summary>
            Creates a clone of the current QueryableResourceExpression with the specified expression and resource types
            </summary>
            <param name="newType">The new expression type</param>
            <param name="newResourceType">The new resource type</param>
            <returns>A copy of this with the new types</returns>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.MemberExpression">
            <summary>
            Member for ResourceSet 
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.ResourceType">
            <summary>
            Type of resources contained in this ResourceSet - it's element type.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.HasTransparentScope">
            <summary>
            Is this ResourceSet enclosed in an anonymously-typed transparent scope produced by a SelectMany operation? 
            Applies to navigation ResourceSets.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.TransparentScope">
            <summary>
            The property accesses required to reference this ResourceSet and its source ResourceSet if a transparent scope is present.
            May be null. Use <see cref="P:Microsoft.OData.Client.QueryableResourceExpression.HasTransparentScope"/> to test for the presence of a value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.KeyPredicateConjuncts">
            <summary>
            The list of key expressions that comprise the key predicate (if any) applied to this ResourceSet.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.HasQueryOptions">
            <summary>
            Have sequence query options (filter, orderby, skip, take), expand paths, projection
            or custom query options been applied to this resource set?
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.UseFilterAsPredicate">
            <summary>
            If this expresssion contains at least one non-key predicate
            This indicates that a filter should be used
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.Filter">
            <summary>
            Filter query option for ResourceSet
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.OrderBy">
            <summary>
            OrderBy query option for ResourceSet
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.Skip">
            <summary>
            Skip query option for ResourceSet
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.Take">
            <summary>
            Take query option for ResourceSet
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.SequenceQueryOptions">
            <summary>
            Gets sequence query options for ResourceSet
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryableResourceExpression.HasSequenceQueryOptions">
            <summary>Whether there are any query options for the sequence.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.QueryableResourceExpression.TransparentAccessors">
            <summary>
            Represents the property accesses required to access both 
            this resource set and its source resource/set (for navigations).
            
            These accesses are required to reference resource sets enclosed
            in transparent scopes introduced by use of SelectMany. 
            </summary>
            <remarks>
            For example, this query:
             from c in Custs where c.id == 1 
             from o in c.Orders from od in o.OrderDetails select od
             
            Translates to:
             c.Where(c => c.id == 1)
              .SelectMany(c => o, (c, o) => new $(c=c, o=o))
              .SelectMany($ => $.o, ($, od) => od)
            
            PatternRules.MatchPropertyProjectionSet identifies Orders as the target of the collector.
            PatternRules.MatchTransparentScopeSelector identifies the introduction of a transparent identifer.
            
            A transparent accessor is associated with Orders, with 'c' being the source accesor, 
            and 'o' being the (introduced) accessor.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.QueryableResourceExpression.TransparentAccessors.Accessor">
            <summary>
            The property reference that must be applied to reference this resource set
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryableResourceExpression.TransparentAccessors.SourceAccessors">
            <summary>
            The property reference that must be applied to reference the source resource set.
            Note that this set's Accessor is NOT required to access the source set, but the
            source set MAY impose it's own Transparent Accessors
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.TransparentAccessors.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Linq.Expressions.Expression})">
            <summary>
            Constructs a new transparent scope with the specified set and source set accessors
            </summary>
            <param name="acc">The name of the property required to access the resource set</param>
            <param name="sourceAccesors">The names of the property required to access the resource set's sources.</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryableResourceExpression.TransparentAccessors.ToString">
            <summary>Provides a string representation of this accessor.</summary>
            <returns>The text represntation of this accessor.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ResourceSetExpression">
            <summary>ResourceSet Expression.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceSetExpression.#ctor(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.String},Microsoft.OData.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression},Microsoft.OData.Client.ProjectionQueryOptionExpression,System.Type,System.Version)">
            <summary>
            Creates a resource set expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="source">the source expression</param>
            <param name="memberExpression">property member name</param>
            <param name="resourceType">the element type of the resource</param>
            <param name="expandPaths">expand paths for resource set</param>
            <param name="countOption">count query option for the resource</param>
            <param name="customQueryOptions">custom query options for resource</param>
            <param name="projection">the projection expression</param>
            <param name="resourceTypeAs">TypeAs type</param>
            <param name="uriVersion">version of the Uri from the expand and projection paths</param>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceSetExpression.#ctor(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.String},Microsoft.OData.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression},Microsoft.OData.Client.ProjectionQueryOptionExpression,System.Type,System.Version,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Creates a resource set expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="source">the source expression</param>
            <param name="memberExpression">property member name</param>
            <param name="resourceType">the element type of the resource</param>
            <param name="expandPaths">expand paths for resource set</param>
            <param name="countOption">count query option for the resource</param>
            <param name="customQueryOptions">custom query options for resource</param>
            <param name="projection">the projection expression</param>
            <param name="resourceTypeAs">TypeAs type</param>
            <param name="uriVersion">version of the Uri from the expand and projection paths</param>
            <param name="operationName">name of function</param>
            <param name="operationParameters">parameters' names and values of function</param>
            <param name="isAction">action flag</param>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceSetExpression.CreateCloneWithNewTypes(System.Type,System.Type)">
            <summary>
            Creates a clone of the current ResourceSetExpression with the specified expression and resource types
            </summary>
            <param name="newType">The new expression type</param>
            <param name="newResourceType">The new resource type</param>
            <returns>A copy of this with the new types</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceSetExpression.NodeType">
            <summary>
            The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceSetExpression.IsSingleton">
            <summary>
            A resource set produces at most 1 result if constrained by a key predicate
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceSetExpression.HasKeyPredicate">
            <summary>
            Has a key predicate restriction been applied to this ResourceSet?
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceSetExpression.IsOperationInvocation">
            <summary>
            A resource set invocates functions
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.SingletonResourceExpression">
            <summary>Singleton Resource Expression, used to represent singleton, may extend to support FunctionImport</summary>
        </member>
        <member name="M:Microsoft.OData.Client.SingletonResourceExpression.#ctor(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.String},Microsoft.OData.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression},Microsoft.OData.Client.ProjectionQueryOptionExpression,System.Type,System.Version)">
            <summary>
            Creates a singleton resource expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="source">the source expression</param>
            <param name="memberExpression">property member name</param>
            <param name="resourceType">the element type of the resource</param>
            <param name="expandPaths">expand paths for resource set</param>
            <param name="countOption">count query option for the resource</param>
            <param name="customQueryOptions">custom query options for resource</param>
            <param name="projection">the projection expression</param>
            <param name="resourceTypeAs">TypeAs type</param>
            <param name="uriVersion">version of the Uri from the expand and projection paths</param>
        </member>
        <member name="M:Microsoft.OData.Client.SingletonResourceExpression.#ctor(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.String},Microsoft.OData.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression},Microsoft.OData.Client.ProjectionQueryOptionExpression,System.Type,System.Version,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Creates a singleton resource expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="source">the source expression</param>
            <param name="memberExpression">property member name</param>
            <param name="resourceType">the element type of the resource</param>
            <param name="expandPaths">expand paths for resource set</param>
            <param name="countOption">count query option for the resource</param>
            <param name="customQueryOptions">custom query options for resource</param>
            <param name="projection">the projection expression</param>
            <param name="resourceTypeAs">TypeAs type</param>
            <param name="uriVersion">version of the Uri from the expand and projection paths</param>
            <param name="functionName">name of function</param>
            <param name="functionParameters">parameters' names and values of function</param>
            <param name="isAction">action flag</param>
        </member>
        <member name="M:Microsoft.OData.Client.SingletonResourceExpression.CreateCloneWithNewTypes(System.Type,System.Type)">
            <summary>
            Creates a clone of the current SingletResourceExpression with the specified expression and resource types
            </summary>
            <param name="newType">The new expression type</param>
            <param name="newResourceType">The new resource type</param>
            <returns>A copy of this with the new types</returns>
        </member>
        <member name="P:Microsoft.OData.Client.SingletonResourceExpression.NodeType">
            <summary>
            The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.SingletonResourceExpression.IsSingleton">
            <summary>
            Always be singleton.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.SingletonResourceExpression.IsOperationInvocation">
            <summary>
            Maybe function import invocation.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ExpandOnlyPathToStringVisitor">
            <summary>
            Build a string based on a path that contains only expands.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpandOnlyPathToStringVisitor.subExpandStartingText">
            <summary>
            Const to represent the beginning of a sub expand clause.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpandOnlyPathToStringVisitor.Visit(Microsoft.OData.Client.ALinq.UriParser.SystemToken)">
            <summary>
            Visit a SystemToken
            </summary>
            <param name="tokenIn">the system token to visit</param>
            <returns>Always throws, since a system token is invalid in an expand path.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpandOnlyPathToStringVisitor.Visit(Microsoft.OData.Client.ALinq.UriParser.NonSystemToken)">
            <summary>
            Visit a NonSystemToken
            </summary>
            <param name="tokenIn">the token to visit</param>
            <returns>A string containing the expand represented by the input token.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.SelectExpandPathToStringVisitor">
            <summary>
            Translate from an expand path token to a string.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathToStringVisitor.SelectClause">
            <summary>
            The beginning of a sub-select clause
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathToStringVisitor.StartingExpandClause">
            <summary>
            The beginning of a sub-expand clause
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathToStringVisitor.NonStartingExpandClause">
            <summary>
            The beginning of an expand clause for the current level.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathToStringVisitor.Visit(Microsoft.OData.Client.ALinq.UriParser.SystemToken)">
            <summary>
            Translate a system token, always throws.
            </summary>
            <param name="tokenIn">the system token.</param>
            <returns>Always throws, because a system token is illegal in this case.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathToStringVisitor.Visit(Microsoft.OData.Client.ALinq.UriParser.NonSystemToken)">
            <summary>
            Translate a NonSystemToken into a select or expand string.
            </summary>
            <param name="tokenIn">the non sytem token to translate</param>
            <returns>The string representation of a given NonSystemToken</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathToStringVisitor.WriteNextStructuralProperties(Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken,Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken@)">
            <summary>
            Follow a chain of structrual properties until we hit a non-structural property
            </summary>
            <param name="firstStructuralProperty">the first structural property we hit</param>
            <param name="firstNonStructuralProperty">the first non structural property we hit</param>
            <returns>a comma separated list of structural properties</returns>
        </member>
        <member name="T:Microsoft.OData.Client.AddNewEndingTokenVisitor">
            <summary>
            Traverse the tree to the last token, then add a new token there if provided.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.AddNewEndingTokenVisitor.newTokenToAdd">
            <summary>
            The new token to add to the tree
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.AddNewEndingTokenVisitor.#ctor(Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken)">
            <summary>
            Create a new AddNewEndingTokenVisitor, with the new token to add at the end.
            </summary>
            <param name="newTokenToAdd">a new token to add at the end of the path, can be null</param>
        </member>
        <member name="M:Microsoft.OData.Client.AddNewEndingTokenVisitor.Visit(Microsoft.OData.Client.ALinq.UriParser.SystemToken)">
            <summary>
            Traverse a SystemToken. Always throws because a SystemToken is illegal in this case.
            </summary>
            <param name="tokenIn">The system token to traverse</param>
        </member>
        <member name="M:Microsoft.OData.Client.AddNewEndingTokenVisitor.Visit(Microsoft.OData.Client.ALinq.UriParser.NonSystemToken)">
            <summary>
            Traverse a NonSystemToken. 
            </summary>
            <param name="tokenIn">The NonSystemToken to traverse.</param>
        </member>
        <member name="T:Microsoft.OData.Client.NewTreeBuilder">
            <summary>
            Construct a new copy of an existing tree
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.NewTreeBuilder.Visit(Microsoft.OData.Client.ALinq.UriParser.SystemToken)">
            <summary>
            Visit a SystemToken
            </summary>
            <param name="tokenIn">The SystemToken to visit</param>
            <returns>Always throws, since a SystemToken is illegal in a select or expand path.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.NewTreeBuilder.Visit(Microsoft.OData.Client.ALinq.UriParser.NonSystemToken)">
            <summary>
            Visit a NonSystemToken
            </summary>
            <param name="tokenIn">The non system token to visit</param>
            <returns>A new copy of the input token.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.RemoveWildcardVisitor">
            <summary>
            Remove any wildcard characters from a given path.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.RemoveWildcardVisitor.previous">
            <summary>
            The previous token, used as a cursor so that we can cut off the 
            next pointer of the previous token if we find a wildcard.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.RemoveWildcardVisitor.Visit(Microsoft.OData.Client.ALinq.UriParser.SystemToken)">
            <summary>
            Translate a SystemToken, this is illegal so this always throws.
            </summary>
            <param name="tokenIn">The SystemToken to translate.</param>
        </member>
        <member name="M:Microsoft.OData.Client.RemoveWildcardVisitor.Visit(Microsoft.OData.Client.ALinq.UriParser.NonSystemToken)">
            <summary>
            Translate a NonSystemToken.
            </summary>
            <param name="tokenIn">The NonSystemToken to translate.</param>
        </member>
        <member name="T:Microsoft.OData.Client.SelectExpandPathBuilder">
            <summary>
            Holds state (Path, lambda parameter stack, etc) for projection analysis.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathBuilder.EntireEntityMarker">
            <summary>
            This class is used as a marker for an entity projected in its entirety.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathBuilder.projectionPaths">
            <summary>
            The list of projection paths as PathSegmentTokens.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathBuilder.expandPaths">
            <summary>
            The list of expansion paths as PathSegmentTokens.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathBuilder.parameterExpressions">
            <summary>
            The stack of parameter expressions.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathBuilder.basePaths">
            <summary>
            The dictionary linking parameter expressions to their base paths.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathBuilder.uriVersion">
            <summary>
            The request data service version for the projection and expand paths
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathBuilder.firstSegmentInNewPath">
            <summary>
            Flag indicating whether we're processing the first segment in a new path.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SelectExpandPathBuilder.basePathIsEmpty">
            <summary>
            Summary to indicate whether we're building from an empty base path or not
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathBuilder.#ctor">
            <summary>
            Initializes a new <see cref="T:Microsoft.OData.Client.SelectExpandPathBuilder"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathBuilder.PushParamExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Add a new ParameterExpression to the stack.
            </summary>
            <param name="pe">The parameter expression to add.</param>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathBuilder.PopParamExpression">
            <summary>
            Pop the top parameter expression off the stack.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathBuilder.StartNewPath">
            <summary>
            Starts a new path.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathBuilder.AppendPropertyToPath(System.Reflection.PropertyInfo,System.Type,Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Appends the given property and source TypeAs to the projection and expand paths.
            </summary>
            <param name="pi">Navigation property</param>
            <param name="convertedSourceType">The TypeAs type if the source of the member access expression is a TypeAs operation. Null otherwise.</param>
            <param name="context">Data service context instance.</param>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathBuilder.WriteExpansionPaths">
            <summary>
            Write out the current list of expansion paths as a list of strings.
            </summary>
            <returns>The current list of expansion paths as a list of strings.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathBuilder.WriteProjectionPaths">
            <summary>
            Write out the current list of projection paths as a list of strings.
            </summary>
            <returns>The current list of projection paths as a list of strings.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathBuilder.AppendToProjectionPath(System.String)">
            <summary>
            Appends a name of a property/link/type to the current projection path.
            </summary>
            <param name="name">name of the property/link/type which needs to be added to the select path.</param>
        </member>
        <member name="M:Microsoft.OData.Client.SelectExpandPathBuilder.AppendToExpandPath(System.String,System.Boolean)">
            <summary>
            Appends a name of a property/link/type to the current expand path.
            </summary>
            <param name="name">name of the property/link/type which needs to be added to the expand path.</param>
            <param name="isStructural">is this a structural property.</param>
        </member>
        <member name="P:Microsoft.OData.Client.SelectExpandPathBuilder.ProjectionPaths">
            <summary>
            Get a list of strings that represent the current list of ProjectionPaths
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.SelectExpandPathBuilder.ExpandPaths">
            <summary>
            Get a list of strings that represent the current list of ExpansionPaths.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.SelectExpandPathBuilder.UriVersion">
            <summary>
            The request data service version for the projection and expand paths
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.SelectExpandPathBuilder.ParamExpressionInScope">
            <summary>
            Get the parameter expression that is currently in scope.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.OriginalNameAttribute">
            <summary>Denotes the original name of a variable defined in metadata. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.OriginalNameAttribute.originalName">
            <summary>The original name.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.OriginalNameAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.OriginalNameAttribute" /> class. </summary>
            <param name="originalName">The string that contains original name of the variable.</param>
        </member>
        <member name="P:Microsoft.OData.Client.OriginalNameAttribute.OriginalName">
            <summary>Gets the orginal names of the variable.</summary>
            <returns>String value that contains the original name of the variable. </returns>
        </member>
        <member name="T:Microsoft.OData.Client.BaseEntityType">
            <summary>
            Base type of entity type to include <see cref="T:Microsoft.OData.Client.DataServiceContext" /> for function and action invocation
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseEntityType.Context">
            <summary>DataServiceContext for query provider</summary>
        </member>
        <member name="T:Microsoft.OData.Client.BaseSaveResult">
            <summary>
            Base class for building the request and handling the response
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.BaseAsyncResult">
            <summary>
            Implementation of IAsyncResult
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.True">
            <summary>
            The int equivalent for true.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.False">
            <summary>
            The int equivalent for false.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.Source">
            <summary>Originating object, used to validate End*</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.Method">
            <summary>Originating method on source, to differentiate between different methods from same source</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.perRequest">
            <summary>wrapped request</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.userCallback">
            <summary>User callback passed to Begin*</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.userState">
            <summary>User state passed to Begin*</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.asyncWait">
            <summary>wait handle for user to wait until done, we only use this within lock of asyncWaitDisposeLock.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.failure">
            <summary>Holding exception to throw as a nested exception during to End*</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.abortable">
            <summary>Abortable request</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.completedSynchronously">
            <summary>true unless something completes asynchronously</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.userCompleted">
            <summary>true when really completed for the user</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.completed">
            <summary>true when no more changes are pending, 0 false, 1 completed, 2 aborted</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.userNotified">
            <summary>verify we only invoke the user callback once, 0 false, 1 true</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.done">
            <summary>non-zero after End*, 0 false, 1, true</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.asyncWaitDisposed">
            <summary>true if the AsyncWaitHandle has already been disposed.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.asyncWaitDisposeLock">
            <summary>delay created object to lock to prevent using disposed asyncWait handle.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.#ctor(System.Object,System.String,System.AsyncCallback,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="source">source object of async request</param>
            <param name="method">async method name on source object</param>
            <param name="callback">user callback to invoke when complete</param>
            <param name="state">user state</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.EndExecute``1(System.Object,System.String,System.IAsyncResult)">
            <summary>
            common handler for EndExecuteBatch &amp; EndSaveChanges
            </summary>
            <typeparam name="T">derived type of the AsyncResult</typeparam>
            <param name="source">source object of async request</param>
            <param name="method">async method name on source object</param>
            <param name="asyncResult">the asyncResult being ended</param>
            <returns>data service response for batch</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.InvokeAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.AsyncCallback,System.Object)">
            <summary>
            Due to the unexpected behaviors of IAsyncResult.CompletedSynchronously in the System.Net networking stack, we have to make
            async calls to their APIs using the specific pattern they've prescribed. This method runs in the caller thread and invokes
            the BeginXXX methods.  It then checks IAsyncResult.CompletedSynchronously and if it is true, we invoke the callback in the
            caller thread.
            </summary>
            <param name="asyncAction">
            This is the action that invokes the BeginXXX method. Note we MUST use our special callback from GetDataServiceAsyncCallback()
            when invoking the async call.
            </param>
            <param name="callback">async callback to be called when the operation is complete</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>Returns the async result from the BeginXXX method.</returns>
            <remarks>
            CompletedSynchronously (for System.Net networking stack) means "was the operation completed before the first time
            that somebody asked if it was completed synchronously"? They do this because some of their asynchronous operations
            (particularly those in the Socket class) will avoid the cost of capturing and transferring the ExecutionContext
            to the callback thread by checking CompletedSynchronously, and calling the callback from within BeginXxx instead of
            on the completion port thread if the native winsock call completes quickly.
            
            For other operations however (notably those in HttpWebRequest), they use the same underlying IAsyncResult implementation,
            but do NOT check CompletedSynchronously before returning from BeginXxx.  That means that CompletedSynchronously will
            be false if and only if you checked it from the thread which called BeginXxx BEFORE the operation completed.  It will
            then continue to be false even after IsCompleted becomes true.
            
            Note that CompletedSynchronously == true does not guarantee anything about how much of your callback has executed.
            
            The usual pattern for handling synchronous completion is that both the caller and callback should check CompletedSynchronously.
            If its true, the callback should do nothing and the caller should call EndRead and process the result.
            This guarantees that the caller and callback are not accessing the stream or buffer concurrently without the need
            for explicit synchronization between the two.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.InvokeAsync(Microsoft.OData.Client.BaseAsyncResult.AsyncAction,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Due to the unexpected behaviors of IAsyncResult.CompletedSynchronously in the System.Net networking stack, we have to make
            async calls to their APIs using the specific pattern they've prescribed. This method runs in the caller thread and invokes
            the BeginXXX methods.  It then checks IAsyncResult.CompletedSynchronously and if it is true, we invoke the callback in the
            caller thread.
            </summary>
            <param name="asyncAction">
            This is the action that invokes the BeginXXX method. Note we MUST use our special callback from GetDataServiceAsyncCallback()
            when invoking the async call.
            </param>
            <param name="buffer">buffer to transfer the data</param>
            <param name="offset">byte offset in buffer</param>
            <param name="length">max number of bytes in the buffer</param>
            <param name="callback">async callback to be called when the operation is complete</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous operation, which could still be pending</returns>
            <remarks>
            Please see remarks on the other InvokeAsync() overload.
            Also note that the InvokeTask method above is a Win8 version of this method, so it should be kept in sync with any changes that occur here.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.SetCompletedSynchronously(System.Boolean)">
            <summary>
            Sets the CompletedSynchronously property.
            </summary>
            <param name="isCompletedSynchronously">true if the async operation was completed synchronously, false otherwise.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.HandleCompleted">
            <summary>Set the AsyncWait and invoke the user callback.</summary>
            <remarks>
            If the background thread gets a ThreadAbort, the userCallback will never be invoked.
            This is why it's generally important to never wait forever, but to have more specific
            time limit.  Also then cancel the operation, to make sure its stopped, to avoid 
            multi-threading if your wait time limit was just too short.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.HandleFailure(System.Exception)">
            <summary>Cache the exception that happened on the background thread for the caller of EndSaveChanges.</summary>
            <param name="e">exception object from background thread</param>
            <returns>true if the exception (like StackOverflow or ThreadAbort) should be rethrown</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.SetAborted">
            <summary>Set the async result as completed and aborted.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.SetCompleted">
            <summary>Set the async result as completed.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.EqualRefCheck(Microsoft.OData.Client.BaseAsyncResult.PerRequest,Microsoft.OData.Client.BaseAsyncResult.PerRequest,Microsoft.OData.Client.InternalError)">
            <summary>verify they have the same reference</summary>
            <param name="actual">the actual thing</param>
            <param name="expected">the expected thing</param>
            <param name="errorcode">error code if they are not</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.CompletedRequest">
            <summary>invoked for derived classes to cleanup before callback is invoked</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.HandleCompleted(Microsoft.OData.Client.BaseAsyncResult.PerRequest)">
            <summary>Disposes the request object if it is not null. Invokes the user callback</summary>
            <param name="pereq">the request object</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.AsyncEndGetResponse(System.IAsyncResult)">
            <summary>handle request.BeginGetResponse with request.EndGetResponse and then copy response stream</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.CompleteCheck(Microsoft.OData.Client.BaseAsyncResult.PerRequest,Microsoft.OData.Client.InternalError)">
            <summary>verify non-null and not completed</summary>
            <param name="value">the request in progress</param>
            <param name="errorcode">error code if null or completed</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.FinishCurrentChange(Microsoft.OData.Client.BaseAsyncResult.PerRequest)">
            <summary>Read and store response data for the current change, and try to start the next one</summary>
            <param name="pereq">the completed per request object</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.HandleFailure(Microsoft.OData.Client.BaseAsyncResult.PerRequest,System.Exception)">
            <summary>Cache the exception that happened on the background thread for the caller of EndSaveChanges.</summary>
            <param name="pereq">the request object</param>
            <param name="e">exception object from background thread</param>
            <returns>true if the exception should be rethrown</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.AsyncEndGetRequestStream(System.IAsyncResult)">
            <summary>handle request.BeginGetRequestStream with request.EndGetRequestStream and then write out request stream</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.PostInvokeAsync(System.IAsyncResult,System.AsyncCallback)">
            <summary>
            Due to the unexpected behaviors of IAsyncResult.CompletedSynchronously in the System.Net networking stack, we have to make
            async calls to their APIs using the specific pattern they've prescribed. This method runs in the caller thread after the
            BeginXXX method returns.  It checks IAsyncResult.CompletedSynchronously and if it is true, we invoke the callback in the
            caller thread.
            </summary>
            <param name="asyncResult">The IAsyncResult that represents the asynchronous operation we just called, which could still be pending</param>
            <param name="callback">Callback to be invoked when IAsyncResult.CompletedSynchronously is true.</param>
            <returns>Returns an IAsyncResult that represents the asynchronous operation we just called, which could still be pending</returns>
            <remarks>
            Please see remarks on BaseAsyncResult.InvokeAsync().
            Also note that PostInvokeTask below is a Win8 version of this method, so it should be kept in sync with any changes that occur here.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.GetDataServiceAsyncCallback(System.AsyncCallback)">
            <summary>
            Due to the unexpected behaviors of IAsyncResult.CompletedSynchronously in the System.Net networking stack, we have to make
            async calls to their APIs using the specific pattern they've prescribed. This method returns an AsyncCallback which we can pass
            to the BeginXXX methods in the caller thread.  The returned callback will only run the wrapped callback if
            IAsyncResult.CompletedSynchronously is false, otherwise it returns immediately.
            </summary>
            <param name="callback">callback to be wrapped</param>
            <returns>Returnes a callback which will only run the wrapped callback if IAsyncResult.CompletedSynchronously is false, otherwise it returns immediately.</returns>
            <remarks>
            Please see remarks on BaseAsyncResult.InvokeAsync().
            Also note that the GetDataServiceTaskCallback method below is a Win8 version of this method, so it should be kept in sync with any changes that occur here.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.SetAsyncWaitHandle">
            <summary>
            Sets the async wait handle
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.AsyncRequestContentEndRead(System.IAsyncResult)">
            <summary>
            Callback for Stream.BeginRead on the request content input stream. Calls request content output stream BeginWrite
            and in case of synchronous also the next BeginRead.
            </summary>
            <param name="asyncResult">The asynchronous result associated with the completed operation.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.AsyncEndWrite(System.IAsyncResult)">
            <summary>handle requestStream.BeginWrite with requestStream.EndWrite then BeginGetResponse.</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.AsyncState">
            <summary>user state object parameter</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.AsyncWaitHandle">
            <summary>wait handle for when waiting is required</summary>
            <remarks>if displayed by debugger, it undesirable to create the WaitHandle</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.CompletedSynchronously">
            <summary>did the result complete synchronously?</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.IsCompleted">
            <summary>is the result complete?</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.IsCompletedInternally">
            <summary>is the result complete?</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.IsAborted">
            <summary>abort the result</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.Abortable">
            <summary>
            WebRequest available for DataServiceContext.CancelRequest
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.Failure">
            <summary>first exception that happened</summary>
        </member>
        <member name="T:Microsoft.OData.Client.BaseAsyncResult.AsyncAction">
            <summary>
            This delegate exists to workaround limitations in the WP7 runtime.
            When limitations on the number of parameters to Func&lt;&gt; are resolved, this can be subsumed by the following:
            Func&lt;byte[], int, int, AsyncCallback, object, IAsyncResult&gt;
            </summary>
            <param name="buffer">buffer to transfer the data</param>
            <param name="offset">byte offset in buffer</param>
            <param name="length">max number of bytes in the buffer</param>
            <param name="asyncCallback">async callback to be called when the operation is complete</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous operation, which could still be pending</returns>
        </member>
        <member name="T:Microsoft.OData.Client.BaseAsyncResult.AsyncStateBag">
            <summary>
            Wraps PerRequest and context reference together to save state information.
            Used instead of KeyValuePair in order to avoid FxCop CA908.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.AsyncStateBag.PerRequest">
            <summary>the request wrapper.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.AsyncStateBag.#ctor(Microsoft.OData.Client.BaseAsyncResult.PerRequest)">
            <summary>
            Constructor for the state object
            </summary>
            <param name="pereq">See PerRequest field.</param>
        </member>
        <member name="T:Microsoft.OData.Client.BaseAsyncResult.PerRequest">
            <summary>wrap the full request</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.PerRequest.True">
            <summary>
            The int equivalent for true.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.PerRequest.False">
            <summary>
            The int equivalent for false.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.PerRequest.requestStatus">
            <summary>
            did the sequence (BeginGetRequest, EndGetRequest, ... complete. 0 = In Progress, 1 = Completed, 2 = Aborted
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.PerRequest.requestContentBuffer">
            <summary>
            Buffer used when pumping data from the write stream to the request content stream
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.PerRequest.isDisposed">
            <summary>True if Dispose is called.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.PerRequest.disposeLock">
            <summary>Synchronize the Dispose method calls.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseAsyncResult.PerRequest.requestCompletedSynchronously">
            <summary>Did the request complete all of its steps synchronously? 1 represents true and 0 represents false.</summary>
            <remarks>Note that there is no overload for Interlocked.CompareExchange that takes booleans, we workaround using the overload for int.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.PerRequest.#ctor">
            <summary>ctor</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.PerRequest.SetRequestCompletedSynchronously(System.Boolean)">
            <summary>
            Sets the RequestCompletedSynchronously property.
            </summary>
            <param name="completedSynchronously">true if the async operation was completed synchronously, false otherwise.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.PerRequest.SetComplete">
            <summary>
            Change the request status to completed
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.PerRequest.SetAborted">
            <summary>
            Change the request status to aborted
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseAsyncResult.PerRequest.Dispose">
            <summary>
            dispose of the request object
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.PerRequest.Request">
            <summary>active web request</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.PerRequest.RequestStream">
            <summary>active web request stream</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.PerRequest.RequestContentStream">
            <summary>content to write to request stream</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.PerRequest.ResponseMessage">
            <summary>web response</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.PerRequest.ResponseStream">
            <summary>async web response stream</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.PerRequest.RequestCompletedSynchronously">
            <summary>did the request complete all of its steps synchronously?</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.PerRequest.RequestCompleted">
            <summary>
            Short cut for testing if request has finished (either completed or aborted)
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.PerRequest.RequestAborted">
            <summary>
            Short cut for testing request status is 2 (Aborted)
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.PerRequest.RequestContentBuffer">
            <summary>
            Buffer used when pumping data from the write stream to the request content stream
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseAsyncResult.PerRequest.RequestContentBufferValidLength">
            <summary>
            The length of the valid content in the RequestContentBuffer
            Once the data is read from the request content stream into the RequestContent buffer
            this length is set to the amount of data read.
            When the data is written into the request stream it is set back to 0.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.RequestInfo">
            <summary>where to pull the changes from</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.SerializerInstance">
            <summary>serializer to serialize the request data.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.ChangedEntries">
            <summary>sorted list of entries by change order</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.Options">
            <summary>option in use for SaveChanges</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.batchResponseMessage">
            <summary>batch web response</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.entryIndex">
            <summary>The ResourceBox or RelatedEnd currently in flight</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.streamRequestKind">
            <summary>what kind of request are we processing - POST MR or PUT MR</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.mediaResourceRequestStream">
            <summary>
            If the <see cref="F:Microsoft.OData.Client.BaseSaveResult.streamRequestKind"/> is set to anything but None,
            this field holds a stream needs to be send in the request.
            This can be null in the case where the content of MR is empty. (In which case
            we will not try to open the request stream and thus avoid additional async call).
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.buildBatchBuffer">
            <summary>temporary buffer when cache results from CUD op in non-batching save changes</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.#ctor(Microsoft.OData.Client.DataServiceContext,System.String,Microsoft.OData.Client.DataServiceRequest[],Microsoft.OData.Client.SaveChangesOptions,System.AsyncCallback,System.Object)">
            <summary>
            constructor for operations
            </summary>
            <param name="context">context</param>
            <param name="method">method</param>
            <param name="queries">queries</param>
            <param name="options">options</param>
            <param name="callback">user callback</param>
            <param name="state">user state object</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CreateSaveResult(Microsoft.OData.Client.DataServiceContext,System.String,Microsoft.OData.Client.DataServiceRequest[],Microsoft.OData.Client.SaveChangesOptions,System.AsyncCallback,System.Object)">
            <summary>
            factory method for SaveResult
            </summary>
            <param name="context">context</param>
            <param name="method">method</param>
            <param name="queries">queries</param>
            <param name="options">options</param>
            <param name="callback">user callback</param>
            <param name="state">user state object</param>
            <returns>a new instance of SaveResult or BatchSaveResult, depending on the options value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleResponse(Microsoft.OData.Client.RequestInfo,System.Net.HttpStatusCode,System.String,System.Func{System.IO.Stream},System.Boolean,System.Version@)">
            <summary>
            Handle response by looking at status and possibly throwing an exception.
            </summary>
            <param name="requestInfo">The request info.</param>
            <param name="statusCode">response status code</param>
            <param name="responseVersion">Version string on the response header; possibly null.</param>
            <param name="getResponseStream">delegate to get response stream</param>
            <param name="throwOnFailure">throw or return on failure</param>
            <param name="parsedResponseVersion">Parsed response version (null if no version was specified).</param>
            <returns>exception on failure</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.GetResponseText(System.Func{System.IO.Stream},System.Net.HttpStatusCode)">
            <summary>
            get the response text into a string
            </summary>
            <param name="getResponseStream">method to get response stream</param>
            <param name="statusCode">status code</param>
            <returns>text</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.EndRequest">
            <summary>process the batch</summary>
            <returns>data service response</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.GetLinkHttpMethod(Microsoft.OData.Client.LinkDescriptor)">
            <summary>Get the value of HttpMethod enum from link resource state</summary>
            <param name="link">Instance of LinkDescriptor containing the link state and type of link.</param>
            <returns>HttpMethod enum value for the link descriptor state.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.ApplyPreferences(Microsoft.OData.Client.HeaderCollection,System.String,Microsoft.OData.Client.DataServiceResponsePreference,System.Version@)">
            <summary>
            Apply the response preferences for the client.
            </summary>
            <param name="headers">Headers to which preferences will be added.</param>
            <param name="method">HTTP method.</param>
            <param name="responsePreference">Response preference.</param>
            <param name="requestVersion">Request version so far for the request. The method may modify it.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleResponse">
            <summary>
            Handle response.
            </summary>
            <returns>an instance of the DataServiceResponse.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CreateRequestMessage(System.String,System.Uri,Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.HttpStack,Microsoft.OData.Client.Descriptor,System.String)">
            <summary>
            Returns the request message to write the headers and payload into.
            </summary>
            <param name="method">Http method for the request.</param>
            <param name="requestUri">Base Uri for the request.</param>
            <param name="headers">Request headers.</param>
            <param name="httpStack">HttpStack to use.</param>
            <param name="descriptor">Descriptor for the request, if there is one.</param>
            <param name="contentId">Content-ID header that could be used in batch request.</param>
            <returns>an instance of IODataRequestMessage.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.GetHttpMethod(Microsoft.OData.Client.EntityStates,System.Version@)">
            <summary>Get the value of the HttpMethod enum from entity resource state</summary>
            <param name="state">resource state</param>
            <param name="requestVersion">The version of the request determined so far. The method may modify this if needed.</param>
            <returns>HttpMethod value from the entity resource state.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CreateChangeData(System.Int32,Microsoft.OData.Client.ODataRequestMessageWrapper)">
            <summary>
            Create request message for the descriptor at the given index.
            </summary>
            <param name="index">Index into changed entries</param>
            <param name="requestMessage">IODataRequestMessage that needs to be used for writing the payload.</param>
            <returns>true, if any request payload was generated, else false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleCompleted(Microsoft.OData.Client.BaseAsyncResult.PerRequest)">
            <summary>Set the AsyncWait and invoke the user callback.</summary>
            <param name="pereq">the request object</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.AsyncEndGetResponse(System.IAsyncResult)">
            <summary>handle request.BeginGetResponse with request.EndGetResponse and then copy response stream</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleOperationResponse(Microsoft.OData.Core.IODataResponseMessage)">
            <summary>IODataResponseMessage contain response for the operation.</summary>
            <param name="responseMessage">IODataResponseMessage instance.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleOperationResponseHeaders(System.Net.HttpStatusCode,Microsoft.OData.Client.HeaderCollection)">
            <summary>operation with HttpWebResponse</summary>
            <param name="statusCode">status code of the response.</param>
            <param name="headers">response headers.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleOperationResponse(Microsoft.OData.Client.Descriptor,Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Handle operation response
            </summary>
            <param name="descriptor">descriptor whose response is getting processed.</param>
            <param name="contentHeaders">content headers as returned in the response.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.GetMaterializer(Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.ResponseInfo)">
            <summary>
            Get the materializer to process the response.
            </summary>
            <param name="entityDescriptor">entity descriptor whose response is getting materialized.</param>
            <param name="responseInfo">information about the response to be materialized.</param>
            <returns>an instance of MaterializeAtom, that can be used to materialize the response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CompletedRequest">
            <summary>cleanup work to do once the batch / savechanges is complete</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CreateResponseInfo(Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Create the response info instance to be passed to the materializer.
            </summary>
            <param name="entityDescriptor">entity descriptor whose response is getting handled.</param>
            <returns>instance of the response info class.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.RelatedLinks(Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            enumerate the related Modified/Unchanged links for an added item
            </summary>
            <param name="entityDescriptor">entity</param>
            <returns>related links</returns>
            <remarks>
            During a non-batch SaveChanges, an Added entity can become an Unchanged entity
            and should be included in the set of related links for the second Added entity.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.SaveResultProcessed(Microsoft.OData.Client.Descriptor)">
            <summary>flag results as being processed</summary>
            <param name="descriptor">result descriptor being processed</param>
            <returns>count of related links that were also processed</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CreateRequest(Microsoft.OData.Client.LinkDescriptor)">
            <summary>
            Generate the link payload.
            </summary>
            <param name="binding">binding</param>
            <returns>An instance of ODataRequestMessage for the link request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CreateRequest(Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Create ODataRequestMessage for the given entity.
            </summary>
            <param name="entityDescriptor">resource</param>
            <returns>An instance of ODataRequestMessage for the given entity.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CreateTopLevelRequest(System.String,System.Uri,Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.HttpStack,Microsoft.OData.Client.Descriptor)">
            <summary>
            Returns the request message to write the headers and payload into.
            </summary>
            <param name="method">Http method for the request.</param>
            <param name="requestUri">Base Uri for the request.</param>
            <param name="headers">Request headers.</param>
            <param name="httpStack">HttpStack to use.</param>
            <param name="descriptor">Descriptor for the request, if there is one.</param>
            <returns>an instance of IODataRequestMessage.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.DetermineRequestVersion(Microsoft.OData.Client.Metadata.ClientTypeAnnotation)">
            <summary>
            Figures out value to be written in OData-Version HTTP header for the given entity based on features used in this entity.
            </summary>
            <param name="clientType">Entity type for which data service version needs to be determined.</param>
            <returns>Data service version for the given entity and state.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CanHandleResponseVersion(System.String,System.Version@)">
            <summary>Checks whether a WCF Data Service version string can be handled.</summary>
            <param name="responseVersion">Version string on the response header; possibly null.</param>
            <param name="parsedResponseVersion">The response version parsed into a <see cref="T:System.Version"/> instance
            if the version was valid and can be handled, otherwise null.</param>
            <returns>true if the version can be handled; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleResponsePost(Microsoft.OData.Client.LinkDescriptor)">
            <summary>Handle changeset response.</summary>
            <param name="linkDescriptor">headers of changeset response</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.ValidateLinkDescriptorSourceAndTargetHaveIdentities(Microsoft.OData.Client.LinkDescriptor,Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Validates that the link descriptor source and target have identities.
            </summary>
            <param name="binding">The binding.</param>
            <param name="sourceResource">The source resource.</param>
            <param name="targetResource">The target resource.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.SerializeSupportedVersions">
            <summary>
            Serialize supported data service versions to a string that will be used in the exception message.
            The string contains versions in single quotes separated by comma followed by a single space (e.g. "'1.0', '2.0'").
            </summary>
            <returns>Supported data service versions in single quotes separated by comma followed by a space.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.AppendTargetEntityKeyIfNeeded(System.Uri,Microsoft.OData.Client.LinkDescriptor,Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Appends the target entity key to the uri if the binding is in the deleted state and the property is a collection.
            </summary>
            <param name="linkUri">The link URI so far.</param>
            <param name="binding">The binding.</param>
            <param name="targetResource">The target's entity descriptor.</param>
            <returns>The original link uri or one with the target entity key appended.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CreateRequestData(Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.ODataRequestMessageWrapper)">
            <summary>
            Generate a request for the given entity.
            </summary>
            <param name="entityDescriptor">Instance of EntityDescriptor.</param>
            <param name="requestMessage">Instance of IODataRequestMessage to be used to generate the payload.</param>
            <returns>True if the payload was generated, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.CreateRequestData(Microsoft.OData.Client.LinkDescriptor,Microsoft.OData.Client.ODataRequestMessageWrapper)">
            <summary>
            Generate a request for the given link.
            </summary>
            <param name="binding">Instance of LinkDescriptor.</param>
            <param name="requestMessage">Instance of IODataRequestMessage to be used to generate the payload.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleResponsePost(Microsoft.OData.Client.Descriptor,Microsoft.OData.Client.HeaderCollection)">
            <summary>Handle changeset response.</summary>
            <param name="descriptor">descriptor whose response is getting handled.</param>
            <param name="contentHeaders">response headers.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleResponsePost(Microsoft.OData.Client.EntityDescriptor,System.String)">
            <summary>Handle changeset response for the given entity descriptor.</summary>
            <param name="entityDescriptor">entity descriptor whose response is getting handled.</param>
            <param name="etag">ETag header value from the server response (or null if no etag or if there is an actual response)</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleResponsePut(Microsoft.OData.Client.Descriptor,Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Handle the PUT response sent by the server
            </summary>
            <param name="descriptor">descriptor, whose response is getting handled.</param>
            <param name="responseHeaders">response headers.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.HandleResponseDelete(Microsoft.OData.Client.Descriptor)">
            <summary>Handle response to deleted entity.</summary>
            <param name="descriptor">deleted entity</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.AsyncEndRead(System.IAsyncResult)">
            <summary>handle responseStream.BeginRead with responseStream.EndRead</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.MaterializeResponse(Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.ResponseInfo,System.String)">
            <summary>
            Materialize the response payload.
            </summary>
            <param name="entityDescriptor">entity descriptor whose response is getting materialized.</param>
            <param name="responseInfo">information about the response to be materialized.</param>
            <param name="etag">etag value, if specified in the response header.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.GetSourcePropertyUri(Microsoft.OData.Client.LinkDescriptor,Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Get the source property Uri for the link URL
            </summary>
            <param name="binding">Link descriptor object of the binding</param>
            <param name="sourceEntityDescriptor">entity descriptor for source</param>
            <returns>source property Uri string</returns>
        </member>
        <member name="P:Microsoft.OData.Client.BaseSaveResult.IsBatchRequest">
            <summary>returns true if its a batch, otherwise returns false.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseSaveResult.ResponseStream">
            <summary>
            In async case, this is a memory stream used to cache responses, as we are reading async from the underlying http web response stream.
            In sync case, this is the actual response stream, as returned by the http request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BaseSaveResult.ProcessResponsePayload">
            <summary>
            returns true if the response payload needs to be processed.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.BaseSaveResult.StreamRequestKind">
            <summary>
            enum which says what kind of request we are currently processing
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.StreamRequestKind.None">
            <summary>This request doesn't involve Media Resource or named stream.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.StreamRequestKind.PostMediaResource">
            <summary>This request is a POST to a MLE and the body contains the content of the MR.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.StreamRequestKind.PutMediaResource">
            <summary>This request is a PUT to MR and the body contains the content of the MR.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.BaseSaveResult.AsyncReadState">
            <summary>
            Async read state
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.AsyncReadState.Pereq">
            <summary>PerRequest class which tracks the request and response stream </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BaseSaveResult.AsyncReadState.totalByteCopied">
            <summary>total number of byte copied.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BaseSaveResult.AsyncReadState.#ctor(Microsoft.OData.Client.BaseAsyncResult.PerRequest)">
            <summary>
            constructor
            </summary>
            <param name="pereq">Perrequest class</param>
        </member>
        <member name="P:Microsoft.OData.Client.BaseSaveResult.AsyncReadState.TotalByteCopied">
            <summary>
            Returns the total number of byte copied till now.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.BatchSaveResult">
            <summary>
            Handles the batch requests and responses (both sync and async)
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BatchSaveResult.StreamCopyBufferSize">
            <summary>The size of the copy buffer to create.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BatchSaveResult.Queries">
            <summary>Array of queries being executed</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BatchSaveResult.responseStream">
            <summary>Response stream containing the entire batch response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BatchSaveResult.batchWriter">
            <summary>Instance of ODataBatchWriter used to write current batch request.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BatchSaveResult.batchMessageReader">
            <summary>The message reader used to read the batch response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BatchSaveResult.currentOperationResponse">
            <summary>Object representing the current operation response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BatchSaveResult.streamCopyBuffer">
            <summary>Buffer used for caching operation response body streams.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.#ctor(Microsoft.OData.Client.DataServiceContext,System.String,Microsoft.OData.Client.DataServiceRequest[],Microsoft.OData.Client.SaveChangesOptions,System.AsyncCallback,System.Object)">
            <summary>
            constructor for BatchSaveResult
            </summary>
            <param name="context">context</param>
            <param name="method">method</param>
            <param name="queries">queries</param>
            <param name="options">options</param>
            <param name="callback">user callback</param>
            <param name="state">user state object</param>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.BatchBeginRequest">
            <summary>initial the async batch save changeset</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.BatchRequest">
            <summary>
            Synchronous batch request
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.FinishCurrentChange(Microsoft.OData.Client.BaseAsyncResult.PerRequest)">
            <summary>Read and store response data for the current change</summary>
            <param name="pereq">The completed per request object</param>
            <remarks>This is called only from the async code paths, when the response to the batch has been read fully.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.HandleOperationResponse(Microsoft.OData.Core.IODataResponseMessage)">
            <summary>IODataResponseMessage contain response for the operation.</summary>
            <param name="responseMessage">IODataResponseMessage instance.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.HandleResponse">
            <summary>
            Handle response.
            </summary>
            <returns>an instance of the DataServiceResponse, containing individual operation responses for this batch request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.GetMaterializer(Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.ResponseInfo)">
            <summary>
            Get the materializer to process the response.
            </summary>
            <param name="entityDescriptor">entity descriptor whose response is getting materialized.</param>
            <param name="responseInfo">information about the response to be materialized.</param>
            <returns>an instance of MaterializeAtom, that can be used to materialize the response.</returns>
            <remarks>
            This can only be called from inside the HandleBatchResponse or during enumeration of the responses.
            This is used when processing responses for update operations.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.CreateRequestMessage(System.String,System.Uri,Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.HttpStack,Microsoft.OData.Client.Descriptor,System.String)">
            <summary>
            Returns the request message to write the headers and payload into.
            </summary>
            <param name="method">Http method for the request.</param>
            <param name="requestUri">Base Uri for the request.</param>
            <param name="headers">Request headers.</param>
            <param name="httpStack">HttpStack to use.</param>
            <param name="descriptor">Descriptor for the request, if there is one.</param>
            <param name="contentId">Content-ID header that could be used in batch request.</param>
            <returns>an instance of IODataRequestMessage.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.CreateMultiPartMimeContentType">
            <summary>
            Creates the type of the multi part MIME content.
            </summary>
            <returns>A multipart mime header with a generated batch boundary</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.CreateBatchRequest">
            <summary>
            Creates a ODataRequestMessage for batch request.
            </summary>
            <returns>Returns an instance of ODataRequestMessage for the batch request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.GenerateBatchRequest">
            <summary>
            Generate the batch request for all changes to save.
            </summary>
            <returns>Returns the instance of ODataRequestMessage containing all the headers and payload for the batch request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.HandleBatchResponse">
            <summary>
            process the batch response
            </summary>
            <returns>an instance of the DataServiceResponse, containing individual operation responses for this batch request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.HandleBatchResponseInternal(Microsoft.OData.Core.ODataBatchReader)">
            <summary>
            process the batch response
            </summary>
            <param name="batchReader">The batch reader to use for reading the batch response.</param>
            <returns>an instance of the DataServiceResponse, containing individual operation responses for this batch request.</returns>
            <remarks>
            The message reader for the entire batch response is stored in the this.batchMessageReader.
            The message reader is disposable, but this method should not dispose it itself. It will be either disposed by the caller (in case of exception)
            or the ownership will be passed to the returned response object (in case of success).
            In could also be diposed indirectly by this method when it enumerates through the responses.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.HandleBatchResponse(Microsoft.OData.Core.ODataBatchReader)">
            <summary>
            process the batch response
            </summary>
            <param name="batchReader">The batch reader to use for reading the batch response.</param>
            <returns>enumerable of QueryResponse or null</returns>
            <remarks>
            The batch message reader for the entire batch response is stored in this.batchMessageReader.
            Note that this method takes over the ownership of this reader and must Dispose it if it successfully returns.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.ProcessCurrentOperationResponse(Microsoft.OData.Core.ODataBatchReader,System.Boolean)">
            <summary>
            Processed the operation response reported by the batch reader.
            This is a side-effecting method that is tied deeply to how it is used in the batch processing pipeline.
            </summary>
            <param name="batchReader">The batch reader to get the operation response from.</param>
            <param name="isChangesetOperation">True if the current operation is inside a changeset (implying CUD, not query)</param>
            <returns>An exception if the operation response is an error response, null for success response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.ValidateContentID(System.String)">
            <summary>
            Validate the content-id.
            </summary>
            <param name="contentIdStr">The contentId read from ChangeSetHead.</param>
            <returns>Returns the correct ChangedEntries index.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.BatchSaveResult.IsBatchRequest">
            <summary>returns true since this class handles batch requests.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BatchSaveResult.ResponseStream">
            <summary>
            In async case, this is a memory stream used to cache responses, as we are reading async from the underlying http web response stream.
            In non-async case, this is the actual response stream, as returned by the http request.
            </summary>
            <remarks>
            This is the stream which holds the entire batch response, when we process any given part those streams are enumerated through
            a different field (currentOperationResponseContentStream).
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.BatchSaveResult.ProcessResponsePayload">
            <summary>
            returns true if the response payload needs to be processed.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.BatchSaveResult.CurrentOperationResponse">
            <summary>
            Stores information about the currenly processed operation response.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BatchSaveResult.CurrentOperationResponse.statusCode">
            <summary>The HTTP response status code for the current operation response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BatchSaveResult.CurrentOperationResponse.headers">
            <summary>The HTTP headers for the current operation response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BatchSaveResult.CurrentOperationResponse.contentStream">
            <summary>The content stream for the current operation response.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.CurrentOperationResponse.#ctor(System.Net.HttpStatusCode,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.IO.MemoryStream)">
            <summary>
            Constructor.
            </summary>
            <param name="statusCode">The status code of the response.</param>
            <param name="headers">The response headers.</param>
            <param name="contentStream">An in-memory copy of the response stream.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BatchSaveResult.CurrentOperationResponse.CreateResponseMessage">
            <summary>
            Creates IODataResponseMessage for the operation response.
            </summary>
            <returns>
            IODataResponseMessage for the operation response.
            null if the operation response has empty content.
            </returns>
        </member>
        <member name="P:Microsoft.OData.Client.BatchSaveResult.CurrentOperationResponse.StatusCode">
            <summary>
            The status code of the operation response.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BatchSaveResult.CurrentOperationResponse.ContentStream">
            <summary>
            The content stream of the operation response.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BatchSaveResult.CurrentOperationResponse.HasEmptyContent">
            <summary>
            true if the content stream is empty, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BatchSaveResult.CurrentOperationResponse.Headers">
            <summary>
            The response headers for the operation response.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.BodyOperationParameter">
            <summary> Represents a parameter associated with a service action.  </summary>
        </member>
        <member name="T:Microsoft.OData.Client.OperationParameter">
            <summary>Represents a parameter passed to a service action, service function or a service operation when it is Executed.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.OperationParameter.parameterName">
            <summary>The name of the operation parameter.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.OperationParameter.parameterValue">
            <summary>The value of the operation parameter.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.OperationParameter.#ctor(System.String,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.OperationParameter" /> class.</summary>
            <param name="name">The name of the operation parameter.</param>
            <param name="value">The value of the operation parameter.</param>
        </member>
        <member name="P:Microsoft.OData.Client.OperationParameter.Name">
            <summary>Gets the name of the operation parameter. </summary>
            <returns>The name of the operation parameter.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.OperationParameter.Value">
            <summary>Gets the value of the operation parameter. </summary>
            <returns>The value of the operation parameter.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BodyOperationParameter.#ctor(System.String,System.Object)">
            <summary> Instantiates a new BodyOperationParameter </summary>
            <param name="name">The name of the body operation parameter.</param>
            <param name="value">The value of the body operation parameter.</param>
        </member>
        <member name="T:Microsoft.OData.Client.BuildingRequestEventArgs">
            <summary>
            EventArgs for the BuildingRequest event.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BuildingRequestEventArgs.requestUri">
            <summary>
            Uri of the outgoing request.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.BuildingRequestEventArgs.#ctor(System.String,System.Uri,Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.Descriptor,Microsoft.OData.Client.HttpStack)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.BuildingRequestEventArgs"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="requestUri">The request URI.</param>
            <param name="headers">The request headers.</param>
            <param name="descriptor">Descriptor for this request; or null if there isn't one.</param>
            <param name="httpStack">The http stack.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BuildingRequestEventArgs.Clone">
            <summary>
            Retrieves a new RequestMessageArgs with any custom query parameters added.
            </summary>
            <returns>A new RequestMessageArgs instance that takes new custom query options into account.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.BuildingRequestEventArgs.Method">
            <summary>
            Gets the Request HTTP Method that the outgoing request will use.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BuildingRequestEventArgs.RequestUri">
            <summary>
            The Uri of the outgoing request. The Uri may be altered. No error checking will be performed against any changes made.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BuildingRequestEventArgs.Headers">
            <summary>
            The headers for this request. Adding new custom headers is supported. Behavior is undefined for changing existing headers or adding 
            system headers.  No error checking will be performed against any changes made.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BuildingRequestEventArgs.Descriptor">
            <summary>
            Descriptor for this request if there is one; null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.BuildingRequestEventArgs.ClientHttpStack">
            <summary>
            Gets the http stack.
            </summary>
            <remarks>
            The reason for having this property is that this is request specific
            and cannot be taken from the context. For e.g. In silverlight, irrespective
            of the value of HttpStack property, for stream requests (get or update), we
            use ClientHttp.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.BuildingRequestEventArgs.HeaderCollection">
            <summary>
            Returns the set of headers as HeaderCollection instance.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ClientEdmCollectionValue">
            <summary>
            Implementation of <see cref="T:Microsoft.OData.Edm.Values.IEdmCollectionValue"/> which wraps client-side objects.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmCollectionValue.#ctor(Microsoft.OData.Edm.IEdmTypeReference,System.Collections.Generic.IEnumerable{Microsoft.OData.Edm.Values.IEdmValue})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ClientEdmCollectionValue"/> class.
            </summary>
            <param name="type">The type of the collection.</param>
            <param name="elements">The elements of the collection.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmCollectionValue.Type">
            <summary>
            Gets the type of this value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmCollectionValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmCollectionValue.Elements">
            <summary>
            Gets the values stored in this collection.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ClientEdmCollectionValue.NullEdmDelayedValue">
            <summary>
            Non-delayed implementation of <see cref="T:Microsoft.OData.Edm.Values.IEdmDelayedValue"/>
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmCollectionValue.NullEdmDelayedValue.#ctor(Microsoft.OData.Edm.Values.IEdmValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ClientEdmCollectionValue.NullEdmDelayedValue"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmCollectionValue.NullEdmDelayedValue.Value">
            <summary>
            Gets the data stored in this value.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ClientEdmModel">
            <summary>
            EdmModel describing the client metadata
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ClientEdmModel.clrToEdmTypeCache">
            <summary>A cache that maps a client Clr type to it corresponding Edm type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ClientEdmModel.typeNameToClientTypeAnnotationCache">
            <summary>A cache that maps a client type name to the corresponding client type annotation.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ClientEdmModel.directValueAnnotationsManager">
            <summary>The annotations manager.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ClientEdmModel.maxProtocolVersion">
            <summary>The max protocol version this Edm model is created for.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ClientEdmModel.coreModel">
            <summary>Referenced core model.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.#ctor(Microsoft.OData.Client.ODataProtocolVersion)">
            <summary>
            Constructor.
            </summary>
            <param name="maxProtocolVersion">The protocol version this Edm model is created for.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.FindOperationImportsByNameNonBindingParameterType(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Searches for any functionImport or actionImport by name and parameter names.
            </summary>
            <param name="operationImportName">The name of the operation imports to find. May be qualified with the namespace.</param>
            <param name="parameterNames">The parameter names of the parameters.</param>
            <returns>The operation imports that matches the search criteria or empty there was no match.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.FindDeclaredType(System.String)">
            <summary>
            Searches for a schema element with the given name in this model and returns null if no such schema element exists.
            </summary>
            <param name="qualifiedName">The qualified name of the schema element being found.</param>
            <returns>The requested schema element, or null if no such schema element exists.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.FindDeclaredOperations(System.String)">
            <summary>
            Searches for operations with the given name in this model and returns null if no such operation exists.
            </summary>
            <param name="qualifiedName">The qualified name of the operation being found.</param>
            <returns>A set operations sharing the specified qualified name, or an empty enumerable if no such operation exists.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.FindDeclaredBoundOperations(Microsoft.OData.Edm.IEdmType)">
            <summary>
            Searches for bound operations based on the binding type, returns an empty enumerable if no operation exists.
            </summary>
            <param name="bindingType">Type of the binding.</param>
            <returns>A set of operations that share the binding type or empty enumerable if no such operation exists.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.FindDeclaredBoundOperations(System.String,Microsoft.OData.Edm.IEdmType)">
            <summary>
            Searches for bound operations based on the qualified name and binding type, returns an empty enumerable if no operation exists.
            </summary>
            <param name="qualifiedName">The qualified name of the operation.</param>
            <param name="bindingType">Type of the binding.</param>
            <returns>
            A set of operations that share the qualified name and binding type or empty enumerable if no such operation exists.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.FindDeclaredValueTerm(System.String)">
            <summary>
            Searches for a value term with the given name in this model and returns null if no such value term exists.
            </summary>
            <param name="qualifiedName">The qualified name of the value term being found.</param>
            <returns>The requested value term, or null if no such value term exists.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.FindDirectlyDerivedTypes(Microsoft.OData.Edm.IEdmStructuredType)">
            <summary>
            Finds a list of types that derive directly from the supplied type.
            </summary>
            <param name="type">The base type that derived types are being searched for.</param>
            <returns>A list of types that derive directly from the type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.FindDeclaredVocabularyAnnotations(Microsoft.OData.Edm.IEdmVocabularyAnnotatable)">
            <summary>
            Searches for vocabulary annotations specified by this model or a referenced model for a given element.
            </summary>
            <param name="element">The annotated element.</param>
            <returns>The vocabulary annotations for the element.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.GetOrCreateEdmType(System.Type)">
            <summary>
            Get or create a client EDM type instance.
            </summary>
            <param name="type">type to wrap</param>
            <returns>client type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.GetClientTypeAnnotation(System.String)">
            <summary>
            Get the client type annotation for the given name.
            </summary>
            <param name="edmTypeName">Name of the type.</param>
            <returns>An instance of ClientTypeAnnotation for the type with the given name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.GetTypeHierarchy(System.Type,System.Reflection.PropertyInfo[]@,System.Boolean@)">
            <summary>Returns <paramref name="type"/> and its base types, in the order of most base type first and <paramref name="type"/> last.</summary>
            <param name="type">Type instance in question.</param>
            <param name="keyProperties">Returns the list of key properties if <paramref name="type"/> is an entity type; null otherwise.</param>
            <param name="hasProperties">true if <paramref name="type"/> has any (declared or inherited) properties; otherwise false.</param>
            <returns>Returns <paramref name="type"/> and its base types, in the order of most base type first and <paramref name="type"/> last.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.ValidateComplexType(System.Type,Microsoft.OData.Client.ClientEdmModel.EdmTypeCacheValue)">
            <summary>
            Throw if the given complex type has no properties.
            </summary>
            <param name="type">The type in question</param>
            <param name="cachedEdmType">The EdmTypeCacheValue of the type in question.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.SetMimeTypeForProperties(Microsoft.OData.Edm.IEdmStructuredType)">
            <summary>
            Find properties with dynamic MIME type related properties and 
            set the references from each ClientProperty to its related MIME type property
            </summary>
            <param name="edmStructuredType">Client edm type instance to wire up the mime type properties.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.GetOrCreateEdmTypeInternal(Microsoft.OData.Edm.IEdmStructuredType,System.Type,System.Reflection.PropertyInfo[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Get or create a client EDM type instance.
            </summary>
            <param name="edmBaseType">The base type of this structured type.</param>
            <param name="type">type to wrap</param>
            <param name="keyProperties">List of key properties to add to <paramref name="type"/> if the type is an entity type; null otherwise.</param>
            <param name="isEntity">true if <paramref name="type"/> is an entity type; false otherwise.</param>
            <param name="hasProperties">true if the <paramref name="type"/> is known to have properties; false if <paramref name="type"/> is known to have no properties; null if nothing is known about the properties.</param>
            <returns>client type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.CreateEdmProperty(Microsoft.OData.Edm.IEdmStructuredType,System.Reflection.PropertyInfo)">
            <summary>
            Creates an Edm property.
            </summary>
            <param name="declaringType">Type declaring this property.</param>
            <param name="propertyInfo">PropertyInfo instance for this property.</param>
            <returns>Returns a new instance of Edm property.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.GetOrCreateClientTypeAnnotation(Microsoft.OData.Edm.IEdmType,System.Type)">
            <summary>
            Gets or creates client type annotation.
            </summary>
            <param name="edmType">The EdmType to use for creating client type annotation</param>
            <param name="type">The Clr type to create client type annotation for.</param>
            <returns>Client type annotation</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.GetHasStreamValue(Microsoft.OData.Edm.IEdmEntityType,System.Type)">
            <summary>
            Check based on edm base entity type and attribute on CLR type whether or not
            the to-be-created type is a media entity.
            </summary>
            <param name="edmBaseType">Base EDM Entity type</param>
            <param name="type">The CLR type to check on</param>
            <returns>HasStream value to set on the to-be-created EntityType</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmModel.VocabularyAnnotations">
            <summary>
            Returns all the vocabulary annotations defined in the model.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmModel.ReferencedModels">
            <summary>
            Returns all the referenced models.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmModel.SchemaElements">
            <summary>
            Returns all the schema elements.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmModel.DeclaredNamespaces">
            <summary>
            Gets the collection of namespaces that schema elements use contained in this model.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmModel.DirectValueAnnotationsManager">
            <summary>
            Returns the model's annotations manager.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmModel.EntityContainer">
            <summary>
            Gets the only one entity container of the model.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmModel.EdmStructuredSchemaElements">
            <summary>
            Gets the state of whether the edm structured schema elements have been set.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmModel.MaxProtocolVersion">
            <summary>
            Gets the max protocol version of the model.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ClientEdmModel.EdmTypeCacheValue">
            <summary>
            Cache value for the type cache.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ClientEdmModel.EdmTypeCacheValue.edmType">
            <summary>The cached EDM type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ClientEdmModel.EdmTypeCacheValue.hasProperties">
            <summary>true if the Clr type this EDM type is based on has settable properties; otherwise false.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmModel.EdmTypeCacheValue.#ctor(Microsoft.OData.Edm.IEdmType,System.Nullable{System.Boolean})">
            <summary>
            Creates a new instance of the EDM type cache value.
            </summary>
            <param name="edmType">The cached EDM type.</param>
            <param name="hasProperties">true if the Clr type this EDM type is based on has settable properties; otherwise false.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmModel.EdmTypeCacheValue.EdmType">
            <summary>
            The cached EDM type.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmModel.EdmTypeCacheValue.HasProperties">
            <summary>
            true if the Clr type this EDM type is based on has settable properties; otherwise false.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ClientEdmStructuredValue">
            <summary>
            Implementation of <see cref="T:Microsoft.OData.Edm.Values.IEdmStructuredValue"/> which wraps client-side objects.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ClientEdmStructuredValue.structuredValue">
            <summary>The structured value this instance is wrapping.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ClientEdmStructuredValue.typeAnnotation">
            <summary>The client-side metadata about this value.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ClientEdmStructuredValue.model">
            <summary>The model.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmStructuredValue.#ctor(System.Object,Microsoft.OData.Client.ClientEdmModel,Microsoft.OData.Client.Metadata.ClientTypeAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ClientEdmStructuredValue"/> class.
            </summary>
            <param name="structuredValue">The structured value.</param>
            <param name="model">The model.</param>
            <param name="clientTypeAnnotation">The client type annotation.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmStructuredValue.FindPropertyValue(System.String)">
            <summary>
            Finds the value corresponding to the provided property name.
            </summary>
            <param name="propertyName">Property to find the value of.</param>
            <returns>
            The found property, or null if no property was found.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmStructuredValue.BuildEdmPropertyValue(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation)">
            <summary>
            Builds an edm property value from the given annotation.
            </summary>
            <param name="propertyAnnotation">The property annotation.</param>
            <returns>The property value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientEdmStructuredValue.ConvertToEdmValue(System.Object,Microsoft.OData.Edm.IEdmTypeReference)">
            <summary>
            Converts a clr value to an edm value.
            </summary>
            <param name="propertyValue">The property value.</param>
            <param name="edmPropertyType">Type of the property.</param>
            <returns>
            The converted value
            </returns>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmStructuredValue.Type">
            <summary>
            Gets the type of this value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmStructuredValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ClientEdmStructuredValue.PropertyValues">
            <summary>
            Gets the property values of this structured value.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ContentStream">
            <summary>
            Helper class to wrap the stream with the content of the request.
            We need to remember if the stream came from us (IsKnownMemoryStream is true)
            or if it came from outside. For backward compatibility we set the Content-Length for our streams
            since they are always MemoryStream and thus know their length.
            For outside streams (content of the MR requests) we don't set Content-Length since the stream
            might not be able to answer to the Length call.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ContentStream.stream">
            <summary>
            The stream with the content of the request
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ContentStream.isKnownMemoryStream">
            <summary>
            Set to true if the stream is a MemoryStream and we produced it (so it does have the buffer accesible)
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ContentStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The stream with the request content</param>
            <param name="isKnownMemoryStream">The stream was create by us and it's a MemoryStream</param>
        </member>
        <member name="P:Microsoft.OData.Client.ContentStream.Stream">
            <summary>
            The stream with the content of the request
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ContentStream.IsKnownMemoryStream">
            <summary>
            Set to true if the stream is a MemoryStream and we produced it (so it does have the buffer accesible)
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder">
            <summary>
            Implementation of <see cref="T:Microsoft.OData.Client.ODataEntityMetadataBuilder"/> which uses OData conventions.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.entityInstance">
            <summary>The entity instance to build metadata for.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.entitySetName">
            <summary>The name of the set the entity instance belongs to.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.baseUri">
            <summary>The base uri of the service.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.uriBuilder">
            <summary>The convention-based uri builder to use.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.#ctor(System.Uri,System.String,Microsoft.OData.Edm.Values.IEdmStructuredValue,Microsoft.OData.Client.DataServiceUrlConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder"/> class.
            </summary>
            <param name="baseUri">The base URI of the service.</param>
            <param name="entitySetName">Name of the entity set the entity belongs to.</param>
            <param name="entityInstance">The entity instance to build metadata for.</param>
            <param name="conventions">The user-specified conventions to use.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.#ctor(Microsoft.OData.Client.UriResolver,System.String,Microsoft.OData.Edm.Values.IEdmStructuredValue,Microsoft.OData.Client.DataServiceUrlConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder"/> class.
            </summary>
            <param name="resolver">The URI resolver to use.</param>
            <param name="entitySetName">Name of the entity set the entity belongs to.</param>
            <param name="entityInstance">The entity instance to build metadata for.</param>
            <param name="conventions">The user-specified conventions to use.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.GetEditLink">
            <summary>
            Gets the edit link of the entity.
            </summary>
            <returns>
            The absolute URI of the edit link for the entity.
            Or null if it is not possible to determine the edit link.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.GetId">
            <summary>
            Gets the ID of the entity.
            </summary>
            <returns>
            The ID for the entity.
            Or null if it is not possible to determine the ID.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.GetETag">
            <summary>
            Gets the ETag of the entity.
            </summary>
            <returns>
            The ETag for the entity.
            Or null if it is not possible to determine the ETag.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.GetReadLink">
            <summary>
            Gets the read link of the entity.
            </summary>
            <returns>
            The absolute URI of the read link for the entity.
            Or null if it is not possible to determine the read link.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.TryGetIdForSerialization(System.Uri@)">
            <summary>
            Get the id that need to be written into wire
            </summary>
            <param name="id">The id return to the caller</param>
            <returns>
            If writer should write odata.id property into wire
            </returns> 
        </member>
        <member name="T:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.ConventionalODataUriBuilder">
            <summary>
            Implementation of <see cref="T:Microsoft.OData.Client.ODataUriBuilder"/> that uses conventions.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.ConventionalODataUriBuilder.resolver">
            <summary>The uri resolver to use for entity sets.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.ConventionalODataUriBuilder.conventions">
            <summary>The user specified conventions.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.ConventionalODataUriBuilder.#ctor(Microsoft.OData.Client.UriResolver,Microsoft.OData.Client.DataServiceUrlConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.ConventionalODataUriBuilder"/> class.
            </summary>
            <param name="resolver">The uri resolver to use.</param>
            <param name="conventions">The user specified conventions to use.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.ConventionalODataUriBuilder.BuildEntitySetUri(System.Uri,System.String)">
            <summary>
            Appends to create the URI for an entity set.
            </summary>
            <param name="baseUri">The URI to append to</param>
            <param name="entitySetName">The entity set name.</param>
            <returns>
            The entity set URI.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ConventionalODataEntityMetadataBuilder.ConventionalODataUriBuilder.BuildEntityInstanceUri(System.Uri,Microsoft.OData.Edm.Values.IEdmStructuredValue)">
            <summary>
            Appends to create the entity instance URI for the specified <paramref name="entityInstance"/>.
            </summary>
            <param name="baseUri">The URI to append to</param>
            <param name="entityInstance">The entity instance to use.</param>
            <returns>
            The entity instance URI.
            </returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceClientMessageWriterSettingsShim">
            <summary>
            Client writer settings shim class to restrict settings to the base for OData message writers.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientMessageWriterSettingsShim.settings">
            <summary> The settings. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientMessageWriterSettingsShim.#ctor(Microsoft.OData.Core.ODataMessageWriterSettingsBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceClientMessageWriterSettingsShim"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientMessageWriterSettingsShim.Indent">
            <summary>
            Flag to control whether the writer should use indentation or not.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientMessageWriterSettingsShim.CheckCharacters">
            <summary>
            Flag to control whether the writer should check for valid Xml characters or not.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientMessageWriterSettingsShim.MessageQuotas">
            <summary>
            Quotas to use for limiting resource consumption when writing an OData message.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceClientMessageReaderSettingsShim">
            <summary>
            Client reader settings shim class to restrict settings to the base for OData message reader.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientMessageReaderSettingsShim.settings">
            <summary> The settings. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientMessageReaderSettingsShim.#ctor(Microsoft.OData.Core.ODataMessageReaderSettingsBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceClientMessageReaderSettingsShim"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientMessageReaderSettingsShim.EnableAtomMetadataReading">
            <summary>
            Flag to control whether ATOM metadata is read in ATOM payloads.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientMessageReaderSettingsShim.CheckCharacters">
            <summary>
            Flag to control whether the writer should check for valid Xml characters or not.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientMessageReaderSettingsShim.MessageQuotas">
            <summary>
            Quotas to use for limiting resource consumption when writing an OData message.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientMessageReaderSettingsShim.ShouldIncludeAnnotation">
            <summary>
            Func to evaluate whether an instance annotation should be read or skipped by the reader. The func should return true if the instance annotation should
            be read and false if the instance annotation should be skipped.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceQuerySingle`1">
            <summary>
            Query object of a single item.
            </summary>
            <typeparam name="TElement">Type of object to materialize.</typeparam>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQuerySingle`1.Query">
            <summary>
            Query object.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQuerySingle`1.isFunction">
            <summary>
            The flag of whether this query is a function.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.#ctor(Microsoft.OData.Client.DataServiceContext,System.String)">
            <summary>
            Query object of a single item.
            </summary>
            <param name="context">Context associated with this query.</param>
            <param name="path">A string that resolves to a URI.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.#ctor(Microsoft.OData.Client.DataServiceContext,System.String,System.Boolean)">
            <summary>
            Query object of a single item.
            </summary>
            <param name="context">Context associated with this query.</param>
            <param name="path">A string that resolves to a URI.</param>
            <param name="isComposable">Whether this query is composable.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.#ctor(Microsoft.OData.Client.DataServiceQuerySingle{`0})">
            <summary>Create a query of a single item based on another one.</summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.#ctor(Microsoft.OData.Client.DataServiceQuery{`0},System.Boolean)">
            <summary>
            Query object of a function which returns a single item.
            </summary>
            <param name="query">Query object.</param>
            <param name="isComposable">Whether this query is composable.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.CreateFunctionQuery``1(System.String,System.Boolean,Microsoft.OData.Client.UriOperationParameter[])">
            <summary>Creates a data service query for function which return collection of data.</summary>
            <typeparam name="T">The type returned by the query</typeparam>
            <param name="functionName">The function name.</param>
            <param name="isComposable">Whether this query is composable.</param>
            <param name="parameters">The function parameters.</param>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> instance that represents the function call.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.CreateFunctionQuerySingle``1(System.String,System.Boolean,Microsoft.OData.Client.UriOperationParameter[])">
            <summary>Creates a data service query for function which return single data.</summary>
            <typeparam name="T">The type returned by the query</typeparam>
            <param name="functionName">The function name.</param>
            <param name="isComposable">Whether this query is composable.</param>
            <param name="parameters">The function parameters.</param>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuerySingle`1" /> instance that represents the function call.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.GetValue">
            <summary>
            Executes the query and returns the result.
            </summary>
            <returns>Query result.</returns>
            <exception cref="T:System.InvalidOperationException">Problem materializing result of query into object.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.BeginGetValue(System.AsyncCallback,System.Object)">
            <summary>Starts an asynchronous network operation that executes the query represented by this object instance.</summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</returns>
            <param name="callback">The delegate to invoke when the operation completes.</param>
            <param name="state">User defined object used to transfer state between the start of the operation and the callback defined by <paramref name="callback" />.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.GetValueAsync">
            <summary>Starts an asynchronous network operation that executes the query represented by this object instance.</summary>
            <returns>A task that represents the result of the query operation.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.EndGetValue(System.IAsyncResult)">
            <summary>Ends an asynchronous query request to a data service.</summary>
            <returns>Returns the results of the query operation.</returns>
            <param name="asyncResult">The pending asynchronous query request.</param>
            <exception cref="T:Microsoft.OData.Client.DataServiceQueryException">When the data service returns an HTTP 404: Resource Not Found error.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.GetPath(System.String)">
            <summary>
            Get a new URI path string by adding <paramref name="nextSegment"/> to the original one.
            </summary>
            <param name="nextSegment">The next segment to add to path.</param>
            <returns>The new URI path string.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.AppendRequestUri(System.String)">
            <summary>
            Get a new URI string by adding <paramref name="nextSegment"/> to the original one.
            </summary>
            <param name="nextSegment">Name of the action.</param>
            <returns>The new URI string.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Projects the element of this query into a new form.
            </summary>
            <typeparam name="TResult">The type of the value returned by selector.</typeparam>
            <param name="selector">A lambda expression that indicates the property returns.</param>
            <returns>A <see cref="T:Microsoft.OData.Client.DataServiceQuerySingle`1" /> whose element is the result of invoking the transform function on the element of source.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.Expand``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Expands a query to include entity from a related entity set in the query response, where the related entity is of a specific type in a type hierarchy.
            </summary>
            <typeparam name="TTarget">Target type of the last property on the expand path.</typeparam>
            <param name="navigationPropertyAccessor">A lambda expression that indicates the navigation property that returns the entity set to include in the expanded query.</param>
            <returns>Returns a <see cref="T:Microsoft.OData.Client.DataServiceQuerySingle`1" /> that with the expand option included.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.Expand(System.String)">
            <summary>Expands a query to include entities from a related entity set in the query response.</summary>
            <returns>A new query that includes the requested $expand query option appended to the URI of the supplied query.</returns>
            <param name="path">The expand path in the format Orders/Order_Details.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuerySingle`1.CastTo``1">
            <summary>
            Cast this query type into its derived type.
            </summary>
            <typeparam name="TResult">Derived type of TElement to be casted to.</typeparam>
            <returns>Returns a <see cref="T:Microsoft.OData.Client.DataServiceQuerySingle`1" /> of TResult type.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuerySingle`1.Context">
            <summary>
            Context associated with this query.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuerySingle`1.IsComposable">
            <summary>
            Whether this query is composable.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuerySingle`1.RequestUri">
            <summary>
            Get the URI for the query.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.EnumValueMaterializationPolicy">
            <summary>
            Creates a policy that is used for materializing Enum values
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.EnumValueMaterializationPolicy.context">
            <summary> MaterializerContext used to resolve types for materialization. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EnumValueMaterializationPolicy.#ctor(Microsoft.OData.Client.Materialization.IODataMaterializerContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.EnumValueMaterializationPolicy"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EnumValueMaterializationPolicy.MaterializeEnumTypeProperty(System.Type,Microsoft.OData.Core.ODataProperty)">
            <summary>
            Materializes the enum data value.
            </summary>
            <param name="valueType">Type of the collection item.</param>
            <param name="property">The ODataProperty.</param>
            <returns>Materialized enum data CLR value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EnumValueMaterializationPolicy.MaterializeEnumDataValueCollectionElement(System.Type,System.String,System.String)">
            <summary>
            Materializes the enum data value collection element.
            </summary>
            <param name="collectionItemType">The collection item type.</param>
            <param name="wireTypeName">Name of the wire type.</param>
            <param name="item">The ODataEnumValue object.</param>
            <returns>Materialized enum collection element value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EnumValueMaterializationPolicy.MaterializeODataEnumValue(System.Type,Microsoft.OData.Core.ODataEnumValue)">
            <summary>Materializes an enum value. No op or non-primitive values.</summary>
            <param name="enumType">The clr Type of value to set.</param>
            <param name="enumValue">The value of enum.</param>
            <returns>The materialized value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EnumValueMaterializationPolicy.MaterializeODataEnumValue(System.Type,System.String,System.String,System.Func{System.String},System.Object@)">
            <summary>Materializes an enum value. No op or non-primitive values.</summary>
            <param name="type">The clr Type of value to set.</param>
            <param name="wireTypeName">The Type name from the payload.</param>
            <param name="enumValueStr">The string of enum value.</param>
            <param name="throwOnNullMessage">The exception message if the value is null.</param>
            <param name="materializedValue">The materialized value.</param>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy">
            <summary>
            Use this class to materialize instance annnotations in an <see cref="T:Microsoft.OData.Core.ODataAnnotatable"/>.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.collectionValueMaterializationPolicy">
            <summary>
            The collection value materialization policy.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.complexValueMaterializerPolicy">
            <summary>
            The complex value materialization policy.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.enumValueMaterializationPolicy">
            <summary>
            The enum value materialization policy
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.#ctor(Microsoft.OData.Client.Materialization.IODataMaterializerContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy"/> class.
            </summary>
            <param name="materializerContext">The materializer context.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.SetInstanceAnnotations(Microsoft.OData.Core.ODataEntry,System.Object)">
            <summary>
            Materialize instance annotation for an OData entry
            </summary>
            <param name="entry">Odata entry</param>
            <param name="entity">Client clr object for the OData entry</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.SetInstanceAnnotations(Microsoft.OData.Core.ODataProperty,System.Object)">
            <summary>
            Materialize instance annotation for an OData property
            </summary>
            <param name="property">OData property</param>
            <param name="instance">the clr object of the property</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.SetInstanceAnnotations(Microsoft.OData.Core.ODataComplexValue,System.Object)">
            <summary>
            Materialize instance annotation for an OData complex value
            </summary>
            <param name="complexValue">OData complex value</param>
            <param name="complexInstance">Client clr object for the complex value</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.SetInstanceAnnotations(Microsoft.OData.Core.ODataProperty,System.Type,System.Object)">
            <summary>
            Materialize instance annotation for OData property
            </summary>
            <param name="property">OData property</param>
            <param name="type">The type of declaringInstance</param>
            <param name="declaringInstance">the client object that the property belongs to</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.SetInstanceAnnotations(System.String,Microsoft.OData.Core.ODataEntry,System.Type,System.Object)">
            <summary>
            Materialize instance annotation for OData navigation property
            </summary>
            <param name="navigationPropertyName">navigation property name</param>
            <param name="navigationProperty">OData single navigation property</param>
            <param name="type">The type of the declaringInstance</param>
            <param name="declaringInstance">the client object that the navigation property belongs to</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.ConvertToClrInstanceAnnotations(System.Collections.Generic.ICollection{Microsoft.OData.Core.ODataInstanceAnnotation})">
            <summary>
            Convert a collection of instance annotations to clr objects.
            </summary>
            <param name="instanceAnnotations">A collection of instance annotation to be converted</param>
            <returns>A dictionary of clr-typed instance annotation</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.SetInstanceAnnotations(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Set instance annotations for an object
            </summary>
            <param name="instance">Object instance</param>
            <param name="instanceAnnotations">The instance annotations to be set</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.SetInstanceAnnotations(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Object)">
            <summary>
            Set instance annotation for a property
            </summary>
            <param name="propertyName">Property name</param>
            <param name="instanceAnnotations">Intance annotations to be set</param>
            <param name="type">The type of the containing object</param>
            <param name="declaringInstance">The containing object instance</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.GetClrInstanceAnnotationsFromODataProperty(Microsoft.OData.Core.ODataProperty)">
            <summary>
            Convert instance annotations of the ODataProperty to clr objects.
            </summary>
            <param name="property">OData property</param>
            <returns>A dictionary of clr-typed instance annotation which is materialized from the instance annotations of the ODataProperty</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.TryConvertToClrInstanceAnnotation(Microsoft.OData.Core.ODataInstanceAnnotation,System.Object@)">
            <summary>
            Convert an instance annotation to clr object.
            </summary>
            <param name="instanceAnnotation">Instance annotation to be converted</param>
            <param name="clrInstanceAnnotation">The clr object</param>
            <returns>A dictionary of clr-typed instance annotation</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.CollectionValueMaterializationPolicy">
            <summary>
            The collection value materialization policy.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.ComplexValueMaterializationPolicy">
            <summary>
            The complex value materialization policy.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.EnumValueMaterializationPolicy">
            <summary>
            The Enum value materialization policy.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.InstanceAnnotationMaterializationPolicy.MaterializerContext">
            <summary>
            The materializer context.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataLoadNavigationPropertyMaterializer">
            <summary>
            Materializer for LoadProperty API call for navigation properties.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer">
            <summary>
            Materializes feeds and entities from an ODataReader
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataEntityMaterializer">
            <summary>
            Used to materialize entities from a <see cref="T:Microsoft.OData.Core.ODataEntry"/> objects.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataMaterializer">
            <summary>
            Use this class to materialize objects provided from an <see cref="T:Microsoft.OData.Core.ODataMessageReader"/>.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMaterializer.EmptyLinks">
            <summary>Empty navigation links collection</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMaterializer.EmptyProperties">
            <summary>Empty property collection</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMaterializer.nextLinkTable">
            <summary>Collection->Next Link Table for nested links</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMaterializer.collectionValueMaterializationPolicy">
            <summary>The collection value materialization policy. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMaterializer.complexValueMaterializerPolicy">
            <summary>The complex value materializer policy. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMaterializer.enumValueMaterializationPolicy">
            <summary>The enum value materialization policy. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMaterializer.instanceAnnotationMaterializationPolicy">
            <summary>The instance annotation materialization policy. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMaterializer.primitiveValueMaterializationPolicy">
            <summary> The materialization policy used to materialize primitive values. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMaterializer.lazyPrimitivePropertyConverter">
            <summary>The converter to use when assigning values of primitive properties. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializer.#ctor(Microsoft.OData.Client.Materialization.IODataMaterializerContext,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataMaterializer"/> class.
            </summary>
            <param name="materializerContext">The materializer context.</param>
            <param name="expectedType">The expected type.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializer.CreateMaterializerForMessage(Microsoft.OData.Core.IODataResponseMessage,Microsoft.OData.Client.ResponseInfo,System.Type,Microsoft.OData.Client.QueryComponents,Microsoft.OData.Client.ProjectionPlan,Microsoft.OData.Core.ODataPayloadKind)">
            <summary>
            Creates an <see cref="T:Microsoft.OData.Client.Materialization.ODataMaterializer"/> for a response.
            </summary>
            <param name="responseMessage">The response message.</param>
            <param name="responseInfo">The response context.</param>
            <param name="materializerType">The type to materialize.</param>
            <param name="queryComponents">The query components for the request.</param>
            <param name="plan">The projection plan.</param>
            <param name="payloadKind">expected payload kind.</param>
            <returns>A materializer specialized for the given response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializer.Read">
            <summary>Reads the next value from the input content.</summary>
            <returns>true if another value is available after reading; false otherwise.</returns>
            <remarks>
            After invocation, the currentValue field (and CurrentValue property) will 
            reflect the value materialized from the parser; possibly null if the
            result is true (for null values); always null if the result is false.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializer.Dispose">
            <summary>
            Disposes the materializer
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializer.ClearLog">
            <summary>Clears the materialization log of activity.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializer.ApplyLogToContext">
            <summary>Applies the materialization log to the context.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializer.CreateODataMessageReader(Microsoft.OData.Core.IODataResponseMessage,Microsoft.OData.Client.ResponseInfo,Microsoft.OData.Core.ODataPayloadKind@)">
            <summary>
            Creates an <see cref="T:Microsoft.OData.Core.ODataMessageReader"/> for a given message and context using
            WCF DS client settings.
            </summary>
            <param name="responseMessage">The response message</param>
            <param name="responseInfo">The response context</param>
            <param name="payloadKind">Type of the message.</param>
            <returns>The message reader.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializer.VerifyNotDisposed">
            <summary>
            Verifies that the object is not disposed.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializer.ReadImplementation">
            <summary>
            Implementation of <see cref="M:Microsoft.OData.Client.Materialization.ODataMaterializer.Read"/>.
            </summary>
            <returns>Return value of <see cref="M:Microsoft.OData.Client.Materialization.ODataMaterializer.Read"/></returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializer.OnDispose">
            <summary>
            Called when IDisposable.Dispose is called.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.CurrentValue">
            <summary>Current value being materialized; possibly null.</summary>
            <remarks>
            This will typically be an entity if <see cref="P:Microsoft.OData.Client.Materialization.ODataMaterializer.CurrentEntry"/>
            is assigned, but may contain a string for example if a top-level
            primitive of type string is found.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.CurrentFeed">
            <summary>Feed being materialized; possibly null.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.CurrentEntry">
            <summary>Entry being materialized; possibly null.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.NextLinkTable">
            <summary>Table storing the next links assoicated with the current payload</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.IsEndOfStream">
            <summary>Whether we have finished processing the current data stream.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.IsCountable">
            <summary>
            Returns true if the underlying object used for counting is available
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.SetInstanceAnnotations">
            <summary>
             The action to set instance annotation associated with current feed
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.CountValue">
            <summary>
            The count tag's value, if requested
            </summary>
            <returns>The count value returned from the server</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.MaterializeEntryPlan">
            <summary>Function to materialize an entry and produce a value.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.MaterializerContext">
            <summary>
            Gets the materializer context
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.IsDisposed">
            <summary>
            Returns true if the materializer has been disposed
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.ExpectedType">
            <summary>
            Gets the expected type.
            </summary>
            <value>
            The expected type.
            </value>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.CollectionValueMaterializationPolicy">
            <summary>
            Gets the collection value materialization policy.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.ComplexValueMaterializationPolicy">
            <summary>
            Gets the complex value materialization policy.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.EnumValueMaterializationPolicy">
            <summary>
            Gets the collection value materialization policy.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.InstanceAnnotationMaterializationPolicy">
            <summary>
            Gets the instance annotation materialization policy.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.PrimitivePropertyConverter">
            <summary>
            The converter to use when assigning values of primitive properties.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.PrimitiveValueMaterializier">
            <summary>
            The policy used to materialize primitive values.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializer.Format">
            <summary>
            The format of the response being materialized.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.currentValue">
            <summary>The value of the current materialized entity.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.materializeEntryPlan">
            <summary>The materializer plan.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.entryValueMaterializerPolicy">
            <summary> The entry value materializer policy. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.#ctor(Microsoft.OData.Client.Materialization.IODataMaterializerContext,Microsoft.OData.Client.Materialization.EntityTrackingAdapter,Microsoft.OData.Client.QueryComponents,System.Type,Microsoft.OData.Client.ProjectionPlan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataEntityMaterializer"/> class.
            </summary>
            <param name="materializerContext">The materializer context.</param>
            <param name="entityTrackingAdapter">The entity tracking adapter.</param>
            <param name="queryComponents">The query components.</param>
            <param name="expectedType">The expected type.</param>
            <param name="materializeEntryPlan">The materialize entry plan.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.EnumerateAsElementType``1(System.Collections.IEnumerable)">
            <summary>Enumerates casting each element to a type.</summary>
            <typeparam name="T">Element type to enumerate over.</typeparam>
            <param name="source">Element source.</param>
            <returns>
            An IEnumerable&lt;T&gt; that iterates over the specified <paramref name="source"/>.
            </returns>
            <remarks>
            This method should be unnecessary with .NET 4.0 covariance support.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.EnumerateAsElementTypeInternal``1(System.Collections.IEnumerable)">
            <summary>Enumerates casting each element to a type.</summary>
            <typeparam name="T">Element type to enumerate over.</typeparam>
            <param name="source">Element source.</param>
            <returns>
            An IEnumerable&lt;T&gt; that iterates over the specified <paramref name="source"/>.
            </returns>
            <remarks>
            This method should be unnecessary with .NET 4.0 covariance support.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ListAsElementType``2(Microsoft.OData.Client.Materialization.ODataEntityMaterializer,System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a list to a target element type.</summary>
            <param name="materializer">Materializer used to flow link tracking.</param>
            <typeparam name="T">Element type to enumerate over.</typeparam>
            <typeparam name="TTarget">Element type for list.</typeparam>
            <param name="source">Element source.</param>
            <returns>
            An IEnumerable&lt;T&gt; that iterates over the specified <paramref name="source"/>.
            </returns>
            <remarks>
            This method should be unnecessary with .NET 4.0 covariance support.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.CreatePlanForDirectMaterialization(System.Type)">
            <summary>Creates an entry materialization plan that is payload-driven.</summary>
            <param name="lastSegmentType">Segment type for the entry to materialize (typically last of URI in query).</param>
            <returns>A payload-driven materialization plan.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.CreatePlanForShallowMaterialization(System.Type)">
            <summary>Creates an entry materialization plan that is payload-driven and does not traverse expanded links.</summary>
            <param name="lastSegmentType">Segment type for the entry to materialize (typically last of URI in query).</param>
            <returns>A payload-driven materialization plan.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ProjectionCheckValueForPathIsNull(Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type,Microsoft.OData.Client.ProjectionPath)">
            <summary>Checks whether the entity on the specified <paramref name="path"/> is null.</summary>
            <param name="entry">Root entry for paths.</param>
            <param name="expectedType">Expected type for <paramref name="entry"/>.</param>
            <param name="path">Path to pull value for.</param>
            <returns>Whether the specified <paramref name="path"/> is null.</returns>
            <remarks>
            This method will not instantiate entity types on the path.
            Note that if the target is a collection, the result is always false,
            as the model does not allow null feeds (but instead gets an empty
            collection, possibly with continuation tokens and such).
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ProjectionSelect(Microsoft.OData.Client.Materialization.ODataEntityMaterializer,Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type,System.Type,Microsoft.OData.Client.ProjectionPath,System.Func{System.Object,System.Object,System.Type,System.Object})">
            <summary>Provides support for Select invocations for projections.</summary>
            <param name="materializer">Materializer under which projection is taking place.</param>
            <param name="entry">Root entry for paths.</param>
            <param name="expectedType">Expected type for <paramref name="entry"/>.</param>
            <param name="resultType">Expected result type.</param>
            <param name="path">Path to traverse.</param>
            <param name="selector">Selector callback.</param>
            <returns>An enumerable with the select results.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ProjectionGetEntry(Microsoft.OData.Client.Materialization.MaterializerEntry,System.String)">
            <summary>Provides support for getting payload entries during projections.</summary>
            <param name="entry">Entry to get sub-entry from.</param>
            <param name="name">Name of sub-entry.</param>
            <returns>The sub-entry (never null).</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ProjectionInitializeEntity(Microsoft.OData.Client.Materialization.ODataEntityMaterializer,Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type,System.Type,System.String[],System.Func{System.Object,System.Object,System.Type,System.Object}[])">
            <summary>Initializes a projection-driven entry (with a specific type and specific properties).</summary>
            <param name="materializer">Materializer under which projection is taking place.</param>
            <param name="entry">Root entry for paths.</param>
            <param name="expectedType">Expected type for <paramref name="entry"/>.</param>
            <param name="resultType">Expected result type.</param>
            <param name="properties">Properties to materialize.</param>
            <param name="propertyValues">Functions to get values for functions.</param>
            <returns>The initialized entry.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ProjectionEnsureEntryAvailableOfType(Microsoft.OData.Client.Materialization.ODataEntityMaterializer,Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type)">
            <summary>
            Ensures that an entry of <paramref name="requiredType"/> is 
            available on the specified <paramref name="entry"/>.
            </summary>
            <param name="materializer">Materilizer used for logging. </param>
            <param name="entry">Entry to ensure.</param>
            <param name="requiredType">Required type.</param>
            <remarks>
            As the 'Projection' suffix suggests, this method should only
            be used during projection operations; it purposefully avoid
            "source tree" type usage and POST reply entry resolution.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.DirectMaterializePlan(Microsoft.OData.Client.Materialization.ODataEntityMaterializer,Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type)">
            <summary>Materializes an entry with no special selection.</summary>
            <param name="materializer">Materializer under which materialization should take place.</param>
            <param name="entry">Entry with object to materialize.</param>
            <param name="expectedEntryType">Expected type for the entry.</param>
            <returns>The materialized instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ShallowMaterializePlan(Microsoft.OData.Client.Materialization.ODataEntityMaterializer,Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type)">
            <summary>Materializes an entry without including in-lined expanded links.</summary>
            <param name="materializer">Materializer under which materialization should take place.</param>
            <param name="entry">Entry with object to materialize.</param>
            <param name="expectedEntryType">Expected type for the entry.</param>
            <returns>The materialized instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ProjectionValueForPath(Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type,Microsoft.OData.Client.ProjectionPath)">
            <summary>Projects a simple value from the specified <paramref name="path"/>.</summary>
            <param name="entry">Root entry for paths.</param>
            <param name="expectedType">Expected type for <paramref name="entry"/>.</param>
            <param name="path">Path to pull value for.</param>
            <returns>The value for the specified <paramref name="path"/>.</returns>
            <remarks>
            This method will not instantiate entity types, except to satisfy requests
            for payload-driven feeds or leaf entities.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ClearLog">
            <summary>Clears the materialization log of activity.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ApplyLogToContext">
            <summary>Applies the materialization log to the context.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.PropagateContinuation``1(System.Collections.Generic.IEnumerable{``0},Microsoft.OData.Client.DataServiceCollection{``0})">
            <summary>Helper method for constructor of DataServiceCollection.</summary>
            <typeparam name="T">Element type for collection.</typeparam>
            <param name="from">The enumerable which has the continuation on it.</param>
            <param name="to">The DataServiceCollection to apply the continuation to.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ReadImplementation">
            <summary>
            Implementation of Read/>.
            </summary>
            <returns>
            Return value of Read/>
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.ReadNextFeedOrEntry">
            <summary>
            Reads the next feed or entry.
            </summary>
            <returns>True if an entry was read, otherwise false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.CheckEntryToAccessNotNull(Microsoft.OData.Client.Materialization.MaterializerEntry,System.String)">
            <summary>
            Checks that the specified <paramref name="entry"/> isn't null.
            </summary>
            <param name="entry">Entry to check.</param>
            <param name="name">Name of entry being accessed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.CreatePlan(Microsoft.OData.Client.QueryComponents)">
            <summary>Creates an entry materialization plan for a given projection.</summary>
            <param name="queryComponents">Query components for plan to materialize.</param>
            <returns>A materialization plan.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.MaterializeToList(Microsoft.OData.Client.Materialization.ODataEntityMaterializer,System.Collections.IEnumerable,System.Type,System.Collections.Generic.IEnumerable{Microsoft.OData.Core.ODataEntry})">
            <summary>Materializes the result of a projection into a list.</summary>
            <param name="materializer">Materializer to use for the operation.</param>
            <param name="list">Target list.</param>
            <param name="nestedExpectedType">Expected type for nested object.</param>
            <param name="entries">Entries to materialize from.</param>
            <remarks>
            This method supports projections and as such does shallow payload-driven
            materialization of entities.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.GetPropertyOrThrow(System.Collections.Generic.IEnumerable{Microsoft.OData.Core.ODataNavigationLink},System.String)">
            <summary>Gets a property from the specified <paramref name="links"/> list, throwing if not found.</summary>
            <param name="links">List to get value from.</param>
            <param name="propertyName">Property name to look up.</param>
            <returns>The specified property (never null).</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.MergeLists(Microsoft.OData.Client.Materialization.MaterializerEntry,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,System.Collections.IEnumerable,System.Uri,Microsoft.OData.Client.ProjectionPlan)">
            <summary>Merges a list into the property of a given <paramref name="entry"/>.</summary>
            <param name="entry">Entry to merge into.</param>
            <param name="property">Property on entry to merge into.</param>
            <param name="list">List of materialized values.</param>
            <param name="nextLink">Next link for feed from which the materialized values come from.</param>
            <param name="plan">Projection plan for the list.</param>
            <remarks>
            This method will handle entries that shouldn't be updated correctly.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.NeedToAssignCollectionDirectly(System.Object)">
            <summary>
            Returns if the left collection needs to be directly assigned from the right collection.
            </summary>
            <param name="collection">The given collection.</param>
            <returns>If the left collection needs to be directly assigned from the right collection.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.EntityTrackingAdapter">
            <summary>
            Gets the Entity Materializer Context
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.TargetInstance">
            <summary>
            Target instance that the materializer expects to update.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.CurrentValue">
            <summary>
            Current value being materialized; possibly null.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.MaterializeEntryPlan">
            <summary>
            Function to materialize an entry and produce a value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntityMaterializer.EntryValueMaterializationPolicy">
            <summary>
            Gets the entry value materialization policy.
            </summary>
            <value>
            The entry value materialization policy.
            </value>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.feedEntryAdapter">
            <summary>The enty or feed reader.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.messageReader">
            <summary>The message reader.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.#ctor(Microsoft.OData.Core.ODataMessageReader,Microsoft.OData.Client.Materialization.ODataReaderWrapper,Microsoft.OData.Client.Materialization.IODataMaterializerContext,Microsoft.OData.Client.Materialization.EntityTrackingAdapter,Microsoft.OData.Client.QueryComponents,System.Type,Microsoft.OData.Client.ProjectionPlan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer"/> class.
            </summary>
            <param name="odataMessageReader">The odata message reader.</param>
            <param name="reader">The reader.</param>
            <param name="materializerContext">The materializer context.</param>
            <param name="entityTrackingAdapter">The entity tracking adapter.</param>
            <param name="queryComponents">The query components.</param>
            <param name="expectedType">The expected type.</param>
            <param name="materializeEntryPlan">The materialize entry plan.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.ParseSingleEntityPayload(Microsoft.OData.Core.IODataResponseMessage,Microsoft.OData.Client.ResponseInfo,System.Type)">
            <summary>
            This method is for parsing CUD operation payloads which should contain
            1 a single entry
            2 An Error
            </summary>
            <param name="message">the message for the payload</param>
            <param name="responseInfo">The current ResponseInfo object</param>
            <param name="expectedType">The expected type</param>
            <returns>the MaterializerEntry that was read</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.OnDispose">
            <summary>
            Called when IDisposable.Dispose is called.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.ReadNextFeedOrEntry">
            <summary>
            Reads the next feed or entry.
            </summary>
            <returns>
            True if an entry was read, otherwise false
            </returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.CurrentFeed">
            <summary>
            Feed being materialized; possibly null.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.CurrentEntry">
            <summary>
            Entry being materialized; possibly null.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.IsEndOfStream">
            <summary>
            Whether we have finished processing the current data stream.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.CountValue">
            <summary>
            The count tag's value, if requested
            </summary>
            <returns>The count value returned from the server</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.IsCountable">
            <summary>
            Returns true if the underlying object used for counting is available
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.IsDisposed">
            <summary>
            Returns true if the materializer has been disposed
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataReaderEntityMaterializer.Format">
            <summary>
            The format of the response being materialized.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataLoadNavigationPropertyMaterializer.responseInfo">
            <summary>
            Response Info object.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataLoadNavigationPropertyMaterializer.items">
            <summary>
            Items that have been read from the feed or entry.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataLoadNavigationPropertyMaterializer.iteration">
            <summary>
            Iteration of the entity collection reader.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataLoadNavigationPropertyMaterializer.#ctor(Microsoft.OData.Core.ODataMessageReader,Microsoft.OData.Client.Materialization.ODataReaderWrapper,Microsoft.OData.Client.Materialization.IODataMaterializerContext,Microsoft.OData.Client.Materialization.EntityTrackingAdapter,Microsoft.OData.Client.QueryComponents,System.Type,Microsoft.OData.Client.ProjectionPlan,Microsoft.OData.Client.LoadPropertyResponseInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataLoadNavigationPropertyMaterializer"/> class.
            </summary>
            <param name="odataMessageReader">The odata message reader.</param>
            <param name="reader">The reader.</param>
            <param name="materializerContext">The materializer context.</param>
            <param name="entityTrackingAdapter">The entity tracking adapter.</param>
            <param name="queryComponents">The query components.</param>
            <param name="expectedType">The expected type.</param>
            <param name="materializeEntryPlan">The materialize entry plan.</param>
            <param name="responseInfo">LoadProperty Response Info object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataLoadNavigationPropertyMaterializer.ReadImplementation">
            <summary>
            Implementation of Read/>.
            </summary>
            <returns>
            Return value of Read/>
            </returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceClientRequestMessageArgs">
            <summary>
            Arguments for creating an instance of DataServiceClientRequestMessage.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientRequestMessageArgs.actualMethod">
            <summary> The actual method. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessageArgs.#ctor(System.String,System.Uri,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceClientRequestMessageArgs"/> class.
            </summary>
            <param name="method">Method of the request.</param>
            <param name="requestUri">The Request Uri.</param>
            <param name="useDefaultCredentials">True if the default credentials need to be sent with the request. Otherwise false.</param>
            <param name="usePostTunneling">True if the request message must use POST verb for the request and pass the actual verb in X-HTTP-Method header, otherwise false.</param>
            <param name="headers">The set of headers for the request.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessageArgs.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessageArgs.RequestUri">
            <summary>
            Gets the request URI.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessageArgs.UsePostTunneling">
            <summary>
            Returns whether the request message should use Post-Tunneling.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessageArgs.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessageArgs.ActualMethod">
            <summary>
            Gets the actual method. Indicates correct method to use in the post tunneling case.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessageArgs.UseDefaultCredentials">
            <summary>
            Gets a System.Boolean value that controls whether default credentials are sent with requests.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.HttpStack">
            <summary>Represents the type of HTTP implementation to use when accessing the data service.Supported only by the WCF Data Services 5.0 client for Silverlight.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.HttpStack.Auto">
            <summary>
            Automatically choose the HTTP stack
            When possible XmlHttp stack will be used, otherwise the Client stack will be used
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.EntityParameterSendOption">
            <summary>
            Used to specify a strategy to send entity parameter.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityParameterSendOption.SendFullProperties">
            <summary>
            Send full properties of an entity parameter to service.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityParameterSendOption.SendOnlySetProperties">
            <summary>
            Send only set properties of an entity parameter to service.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.MessageReaderSettingsArgs">
            <summary>
            Arguments used to configure the odata message reader settings.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.MessageReaderSettingsArgs.#ctor(Microsoft.OData.Core.ODataMessageReaderSettingsBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.MessageReaderSettingsArgs"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Microsoft.OData.Client.MessageReaderSettingsArgs.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.MessageWriterSettingsArgs">
            <summary>
            Arguments used to configure the odata message writer settings.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.MessageWriterSettingsArgs.#ctor(Microsoft.OData.Core.ODataMessageWriterSettingsBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.MessageWriterSettingsArgs"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Microsoft.OData.Client.MessageWriterSettingsArgs.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceClientConfigurations">
            <summary>
            Configurations on the behavior of the Client.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientConfigurations.#ctor(System.Object)">
            <summary>
            Creates a data service client configurations class
            </summary>
            <param name="sender"> The sender for the Reading Atom event.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientConfigurations.ResponsePipeline">
            <summary>
            Gets the response configuration pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientConfigurations.RequestPipeline">
            <summary>
            Gets the request pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy">
            <summary>
            Use this class to materialize objects provided from an <see cref="T:Microsoft.OData.Core.ODataMessageReader"/>.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.MaterializationPolicy">
            <summary>
            Class responsible for materializing from OData to Objects
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializationPolicy.CreateNewInstance(Microsoft.OData.Edm.IEdmTypeReference,System.Type)">
            <summary>
            Creates the specified edm type.
            </summary>
            <param name="edmTypeReference">Type of the edm.</param>
            <param name="type">The type.</param>
            <remarks>In the future this class will have Materialize and Update will be adding this in upcoming changes</remarks>
            <returns>A created object</returns>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.materializerContext">
            <summary> The materializer context. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.complexValueMaterializationPolicy">
            <summary> The complex value materialization policy. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.primitiveValueMaterializationPolicy">
            <summary> The primitive value materialization policy. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.instanceAnnotationMaterializationPolicy">
            <summary> The instance annotation materialization policy. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.#ctor(Microsoft.OData.Client.Materialization.IODataMaterializerContext,Microsoft.OData.Client.Materialization.PrimitiveValueMaterializationPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="primitivePolicy">The primitive policy.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.CreateCollectionPropertyInstance(Microsoft.OData.Core.ODataProperty,System.Type)">
            <summary>
            Creates Collection instance of store Collection items.
            </summary>
            <param name="collectionProperty">ODataProperty instance representing the Collection as seen in the atom payload.</param>
            <param name="userCollectionType">CLR type of the Collection as defined by the user.</param>
            <returns>Newly created Collection instance. Never null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.CreateCollectionInstance(Microsoft.OData.Edm.IEdmCollectionTypeReference,System.Type)">
            <summary>
            Creates the collection instance.
            </summary>
            <param name="edmCollectionTypeReference">The edm collection type reference.</param>
            <param name="clientCollectionType">Type of the client collection.</param>
            <returns>New Collection Instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.ApplyCollectionDataValues(Microsoft.OData.Core.ODataProperty,System.Object,System.Type,System.Action{System.Object,System.Object},System.Boolean)">
            <summary>
            Applies collectionValue item to the provided <paramref name="collectionInstance"/>. 
            </summary>
            <param name="collectionProperty">Atom property containing materialized Collection items.</param>
            <param name="collectionInstance">Collection instance. Must implement ICollection&lt;T&gt; where T is either primitive or complex type (not an entity).</param>
            <param name="collectionItemType">Type of items in the Collection. Note: this could be calculated from collectionInstance but we already have it in upstream methods.</param>
            <param name="addValueToBackingICollectionInstance">Action called actually add a Collection item to <paramref name="collectionInstance" /></param>
            <param name="isElementNullable">If element type is nullable.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.ApplyCollectionDataValues(System.Collections.IEnumerable,System.String,System.Object,System.Type,System.Action{System.Object,System.Object},System.Boolean)">
            <summary>
            Applies the collection data values to a collection instance.
            </summary>
            <param name="items">The items.</param>
            <param name="wireTypeName">Name of the wire type.</param>
            <param name="collectionInstance">The collection instance.</param>
            <param name="collectionItemType">Type of the collection item.</param>
            <param name="addValueToBackingICollectionInstance">The add value to backing I collection instance.</param>
            <param name="isElementNullable">If element type is nullable.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.CreateCollectionInstance(Microsoft.OData.Edm.IEdmCollectionTypeReference,System.Type,System.Func{System.String})">
            <summary>
            Creates Collection instance of store Collection items.
            </summary>
            <param name="edmCollectionTypeReference">The edm collection type reference.</param>
            <param name="clientCollectionType">Type of the client collection.</param>
            <param name="error">Error to throw.</param>
            <returns>
            Newly created Collection instance. Never null.
            </returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.ComplexValueMaterializationPolicy">
            <summary>
            Gets the complex value materialization policy.
            </summary>
            <value>
            The complex value materialization policy.
            </value>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.CollectionValueMaterializationPolicy.InstanceAnnotationMaterializationPolicy">
            <summary>
            Gets the instance annotation materialization policy.
            </summary>
            <value>
            The instance annotation materialization policy.
            </value>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ComplexValueMaterializationPolicy">
            <summary>
            Use this class to materialize objects provided from an <see cref="T:Microsoft.OData.Client.Materialization.ComplexValueMaterializationPolicy"/>.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy">
            <summary>
            Contains logic on how to materialize properties into an instance
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.collectionValueMaterializationPolicy">
            <summary> The collection value materialization policy. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.instanceAnnotationMaterializationPolicy">
            <summary> The instance annnotation materialization policy. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.lazyPrimitivePropertyConverter">
            <summary> The primitive property converter. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.#ctor(Microsoft.OData.Client.Materialization.IODataMaterializerContext,Microsoft.OData.Client.SimpleLazy{Microsoft.OData.Client.Materialization.PrimitivePropertyConverter})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ComplexValueMaterializationPolicy"/> class.
            </summary>
            <param name="materializerContext">The materializer context.</param>
            <param name="lazyPrimitivePropertyConverter">The lazy primitive property converter.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.MaterializePrimitiveDataValue(System.Type,Microsoft.OData.Core.ODataProperty)">
            <summary>Materializes a primitive value. No op for non-primitive values.</summary>
            <param name="type">Type of value to set.</param>
            <param name="property">Property holding value.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.ApplyDataValues(Microsoft.OData.Client.Metadata.ClientTypeAnnotation,System.Collections.Generic.IEnumerable{Microsoft.OData.Core.ODataProperty},System.Object)">
            <summary>
            Applies the values of the specified <paramref name="properties"/> to a given <paramref name="instance"/>.
            </summary>
            <param name="type">Type to which properties will be applied.</param>
            <param name="properties">Properties to assign to the specified <paramref name="instance"/>.</param>
            <param name="instance">Instance on which values will be applied.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.ApplyDataValue(Microsoft.OData.Client.Metadata.ClientTypeAnnotation,Microsoft.OData.Core.ODataProperty,System.Object)">
            <summary>Applies a data value to the specified <paramref name="instance"/>.</summary>
            <param name="type">Type to which a property value will be applied.</param>
            <param name="property">Property with value to apply.</param>
            <param name="instance">Instance on which value will be applied.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.MaterializeDataValues(Microsoft.OData.Client.Metadata.ClientTypeAnnotation,System.Collections.Generic.IEnumerable{Microsoft.OData.Core.ODataProperty},System.Boolean)">
            <summary>
            Materializes the primitive data values in the given list of <paramref name="values"/>.
            </summary>
            <param name="actualType">Actual type for properties being materialized.</param>
            <param name="values">List of values to materialize.</param>
            <param name="ignoreMissingProperties">
            Whether properties missing from the client types should be ignored.
            </param>
            <remarks>
            Values are materialized in-place withi each <see cref="T:Microsoft.OData.Core.ODataProperty"/>
            instance.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.CollectionValueMaterializationPolicy">
            <summary>
            Gets the collection value materialization policy.
            </summary>
            <value>
            The collection value materialization policy.
            </value>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.InstanceAnnotationMaterializationPolicy">
            <summary>
            Gets the instance annnotation materialization policy.
            </summary>
            <value>
            The instance annnotation materialization policy.
            </value>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.PrimitivePropertyConverter">
            <summary>
            Gets the primitive property converter.
            </summary>
            <value>
            The primitive property converter.
            </value>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.StructuralValueMaterializationPolicy.MaterializerContext">
            <summary>
            Gets the materializer context.
            </summary>
            <value>
            The materializer context.
            </value>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ComplexValueMaterializationPolicy.#ctor(Microsoft.OData.Client.Materialization.IODataMaterializerContext,Microsoft.OData.Client.SimpleLazy{Microsoft.OData.Client.Materialization.PrimitivePropertyConverter})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ComplexValueMaterializationPolicy"/> class.
            </summary>
            <param name="materializerContext">The materializer context.</param>
            <param name="lazyPrimitivePropertyConverter">The lazy primitive property converter.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ComplexValueMaterializationPolicy.MaterializeComplexTypeProperty(System.Type,Microsoft.OData.Core.ODataComplexValue)">
            <summary>Materializes a complex type property.</summary>
            <param name="propertyType">Type of the complex type to set.</param>
            <param name="complexValue">The OData complex value.</param>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.EntityTrackingAdapter">
            <summary>
            Determines if there is an existing entity or whether a new one is created
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.targetInstance">
            <summary>Target instance that the materializer expects to update.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.#ctor(Microsoft.OData.Client.EntityTrackerBase,Microsoft.OData.Client.MergeOption,Microsoft.OData.Client.ClientEdmModel,Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.EntityTrackingAdapter"/> class.
            </summary>
            <param name="entityTracker">The entity tracker.</param>
            <param name="mergeOption">The merge option.</param>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.TryResolveExistingEntity(Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type)">
            <summary>Resolved or creates an instance on the specified <paramref name="entry"/>.</summary>
            <param name="entry">Entry on which to resolve or create an instance.</param>
            <param name="expectedEntryType">Expected type for the <paramref name="entry"/>.</param>
            <remarks>
            After invocation, the ResolvedObject value of the <paramref name="entry"/>
            will be assigned, along with the ActualType value.
            </remarks>
            <returns>True if an existing entity is found.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.TryResolveAsExistingEntry(Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type)">
            <summary>
            Tries to resolve the specified entry as an entry that has already been created in this materialization session or is already in the context.
            </summary>
            <param name="entry">Entry to resolve.</param>
            <param name="expectedEntryType">Expected type of the entry.</param>
            <returns>True if the entry was resolved, otherwise False.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.TryResolveAsTarget(Microsoft.OData.Client.Materialization.MaterializerEntry)">
            <summary>Tries to resolve the object as the target one in a POST refresh.</summary>
            <param name="entry">Entry to resolve.</param>
            <returns>true if the entity was resolved; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.TryResolveFromContext(Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type)">
            <summary>Tries to resolve the object as one from the context (only if tracking is enabled).</summary>
            <param name="entry">Entry to resolve.</param>
            <param name="expectedEntryType">Expected entry type for the specified <paramref name="entry"/>.</param>
            <returns>true if the entity was resolved; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.TryResolveAsCreated(Microsoft.OData.Client.Materialization.MaterializerEntry)">
            <summary>Tries to resolve the object from those created in this materialization session.</summary>
            <param name="entry">Entry to resolve.</param>
            <returns>true if the entity was resolved; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.MergeOption">
            <summary>
            Gets the value of the MergeOption
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.Context">
            <summary>
            Gets the Context
            </summary>
            <remarks>Implementation Note, only used in when a new DataServiceCollection, 
             would like to remove this dependency but would need to change projection
             plan, might happen in a subsequent refactor
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.MaterializationLog">
            <summary>
            Gets the materialization log.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.EntityTracker">
            <summary>
            Gets the entity tracker.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.Model">
            <summary>
            Gets the model.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.EntityTrackingAdapter.TargetInstance">
            <summary>
            Target instance that the materializer expects to update.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy">
            <summary>
            Used to materialize entities from an <see cref="T:Microsoft.OData.Core.ODataEntry"/> to an object.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.nextLinkTable">
            <summary>Collection->Next Link Table for nested links</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.#ctor(Microsoft.OData.Client.Materialization.IODataMaterializerContext,Microsoft.OData.Client.Materialization.EntityTrackingAdapter,Microsoft.OData.Client.SimpleLazy{Microsoft.OData.Client.Materialization.PrimitivePropertyConverter},System.Collections.Generic.Dictionary{System.Collections.IEnumerable,Microsoft.OData.Client.DataServiceQueryContinuation})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="entityTrackingAdapter">The entity tracking adapter.</param>
            <param name="lazyPrimitivePropertyConverter">The lazy primitive property converter.</param>
            <param name="nextLinkTable">The next link table.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.ValidatePropertyMatch(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,Microsoft.OData.Core.ODataNavigationLink)">
            <summary>
            Validates the specified <paramref name="property"/> matches 
            the parsed <paramref name="link"/>.
            </summary>
            <param name="property">Property as understood by the type system.</param>
            <param name="link">Property as parsed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.ValidatePropertyMatch(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,Microsoft.OData.Core.ODataProperty)">
            <summary>
            Validates the specified <paramref name="property"/> matches 
            the parsed <paramref name="atomProperty"/>.
            </summary>
            <param name="property">Property as understood by the type system.</param>
            <param name="atomProperty">Property as parsed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.ValidatePropertyMatch(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,Microsoft.OData.Core.ODataNavigationLink,Microsoft.OData.Client.ClientEdmModel,System.Boolean)">
            <summary>
            Validates the specified <paramref name="property"/> matches 
            the parsed <paramref name="link"/>.
            </summary>
            <param name="property">Property as understood by the type system.</param>
            <param name="link">Property as parsed.</param>
            <param name="model">Client Model.</param>
            <param name="performEntityCheck">whether to do the entity check or not.</param>
            <returns>The type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.ValidatePropertyMatch(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,Microsoft.OData.Core.ODataProperty,Microsoft.OData.Client.ClientEdmModel,System.Boolean)">
            <summary>
            Validates the specified <paramref name="property"/> matches 
            the parsed <paramref name="atomProperty"/>.
            </summary>
            <param name="property">Property as understood by the type system.</param>
            <param name="atomProperty">Property as parsed.</param>
            <param name="model">Client model.</param>
            <param name="performEntityCheck">whether to do the entity check or not.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.Materialize(Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type,System.Boolean)">
            <summary>Materializes the specified <paramref name="entry"/>.</summary>
            <param name="entry">Entry with object to materialize.</param>
            <param name="expectedEntryType">Expected type for the entry.</param>
            <param name="includeLinks">Whether links that are expanded should be materialized.</param>
            <remarks>This is a payload-driven materialization process.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.ApplyItemsToCollection(Microsoft.OData.Client.Materialization.MaterializerEntry,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,System.Collections.IEnumerable,System.Uri,Microsoft.OData.Client.ProjectionPlan,System.Boolean)">
            <summary>
            Applies the values of the <paramref name="items"/> enumeration to the
            <paramref name="property"/> of the specified <paramref name="entry"/>.
            </summary>
            <param name="entry">Entry with collection to be modified.</param>
            <param name="property">Collection property on the entry.</param>
            <param name="items">Values to apply onto the collection.</param>
            <param name="nextLink">Next link for collection continuation.</param>
            <param name="continuationPlan">Projection plan for collection continuation.</param>
            <param name="isContinuation">Whether this is a continuation request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.FoundNextLinkForCollection(System.Collections.IEnumerable,System.Uri,Microsoft.OData.Client.ProjectionPlan)">
            <summary>Records the fact that a rel='next' link was found for the specified <paramref name="collection"/>.</summary>
            <param name="collection">Collection to add link to.</param>
            <param name="link">Link (possibly null).</param>
            <param name="plan">Projection plan for the collection (null allowed only if link is null).</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.FoundNextLinkForUnmodifiedCollection(System.Collections.IEnumerable)">
            <summary>Records the fact that a <paramref name="collection"/> was found but won't be modified.</summary>
            <param name="collection">Collection to add link to.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.ResolveByCreatingWithType(Microsoft.OData.Client.Materialization.MaterializerEntry,System.Type)">
            <summary>"Resolved" the entity in the <paramref name="entry"/> by instantiating it.</summary>
            <param name="entry">Entry to resolve.</param>
            <param name="type">Type to create.</param>
            <remarks>
            After invocation, entry.ResolvedObject is exactly of type <paramref name="type"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.ValidateCollectionElementTypeIsItemType(System.Type,System.Type)">
            <summary>
            Matches the given item type with the corresponding collection element type.
            </summary>
            <param name="itemType">Item type.</param>
            <param name="collectionElementType">Collection element type.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.ApplyLinkProperties(Microsoft.OData.Client.Metadata.ClientTypeAnnotation,Microsoft.OData.Client.Materialization.MaterializerEntry)">
            <summary>
            Materializes the link properties if any with the url in the response payload
            </summary>
            <param name="actualType">Actual client type that is getting materialized.</param>
            <param name="entry">MaterializerEntry instance containing all the links that came in the response.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.PopulateCollectionProperty(Microsoft.OData.Client.Materialization.MaterializerEntry,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,System.Collections.Generic.IEnumerable{System.Object},System.Uri,Microsoft.OData.Client.ProjectionPlan)">
            <summary>
            Populates the collection property on the entry's resolved object with the given items enumerator.
            </summary>
            <param name="entry">Entry with collection to be modified.</param>
            <param name="property">Collection property on the entry.</param>
            <param name="items">Values to apply onto the collection.</param>
            <param name="nextLink">Next link for collection continuation.</param>
            <param name="continuationPlan">Projection plan for collection continuation.</param>
            <returns>Collection instance that was populated.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.GetOrCreateCollectionProperty(System.Object,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,System.Boolean)">
            <summary>
            Gets or creates a collection property on the specified <paramref name="instance"/>.
            </summary>
            <param name="instance">Instance on which to get/create the collection.</param>
            <param name="property">Collection property on the <paramref name="instance"/>.</param>
            <param name="forLoadProperty">Is this collection being created for LoadProperty scenario.</param>
            <returns>
            The collection corresponding to the specified <paramref name="property"/>;
            never null.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.ApplyFeedToCollection(Microsoft.OData.Client.Materialization.MaterializerEntry,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,Microsoft.OData.Core.ODataFeed,System.Boolean)">
            <summary>
            Applies the values of a nested <paramref name="feed"/> to the collection
            <paramref name="property"/> of the specified <paramref name="entry"/>.
            </summary>
            <param name="entry">Entry with collection to be modified.</param>
            <param name="property">Collection property on the entry.</param>
            <param name="feed">Values to apply onto the collection.</param>
            <param name="includeLinks">Whether links that are expanded should be materialized.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.MaterializeResolvedEntry(Microsoft.OData.Client.Materialization.MaterializerEntry,System.Boolean)">
            <summary>Materializes the specified <paramref name="entry"/>.</summary>
            <param name="entry">Entry with object to materialize.</param>
            <param name="includeLinks">Whether links that are expanded should be materialized.</param>
            <remarks>This is a payload-driven materialization process.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.EntryValueMaterializationPolicy.EntityTrackingAdapter">
            <summary>
            Gets the Entity Materializer Context
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataReaderWrapper">
            <summary>
            Contains an odata reader that is wrapped
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataReaderWrapper.reader">
            <summary> The reader. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataReaderWrapper.responsePipeline">
            <summary> The payload reading events. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataReaderWrapper.#ctor(Microsoft.OData.Core.ODataReader,Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration)">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataReaderWrapper"/> class from being created.
            </summary>
            <param name="reader">The reader.</param>
            <param name="responsePipeline">The data service response pipeling configuration object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataReaderWrapper.Read">
            <summary>
            Reads the next <see cref="T:Microsoft.OData.Core.ODataItem"/> from the message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataReaderWrapper.Create(Microsoft.OData.Core.ODataMessageReader,Microsoft.OData.Core.ODataPayloadKind,Microsoft.OData.Edm.IEdmType,Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration)">
            <summary>
            Creates and Wraps an ODataReader for feeds or entries.
            </summary>
            <param name="messageReader">The message reader.</param>
            <param name="messageType">The message type.</param>
            <param name="expectedType">The expected EDM type.</param>
            <param name="responsePipeline">The data service response pipeling configuration object.</param>
            <returns>A reader.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataReaderWrapper.CreateForTest(Microsoft.OData.Core.ODataReader,Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration)">
            <summary>
            Wraps an ODataReader
            </summary>
            <param name="reader">The reader.</param>
            <param name="responsePipeline">The data service response pipeling configuration object.</param>
            <returns>A reader.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataReaderWrapper.State">
            <summary>
            The current state of the reader.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataReaderWrapper.Item">
            <summary>
            The most recent <see cref="T:Microsoft.OData.Core.ODataItem"/> that has been read.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter">
            <summary>
            Converter for primitive values which do not match the client property types. This can happen for two reasons:
              1) The client property types do not exist in the protocol (Uri, XElement, etc)
              2) The values were read using the service's model, and the client types are slightly different (ie float vs double, int vs long).
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter.format">
            <summary>The response format the values were originally read from. Required for re-interpreting spatial values correctly.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter.lazyGeoJsonFormatter">
            <summary>Geo JSON formatter used for converting spatial values. Lazily created in case no spatial values are ever converted.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter.lazyGmlFormatter">
            <summary>Gml formatter used for converting spatial values. Lazily created in case no spatial values are ever converted.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter.#ctor(Microsoft.OData.Core.ODataFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter"/> class.
            </summary>
            <param name="format">The response format the values were originally read from. Required for re-interpreting spatial values correctly.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter.ConvertPrimitiveValue(System.Object,System.Type)">
            <summary>
            Converts a value to primitive value.
            </summary>
            <param name="value">The value.</param>
            <param name="propertyType">Type of the property.</param>
            <returns>The converted value if the value can be converted</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter.ConvertNonSpatialValue(System.Object,System.Type)">
            <summary>
            Converts a non-spatial primitive value to the target type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type of the conversion.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter.ConvertValueIfNeeded(System.Object,System.Type)">
            <summary>
            Converts the value to the target type if needed.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter.ConvertSpatialValue(System.Object,System.Type)">
            <summary>
            Converts a spatial value by from geometry to geography or vice versa. Will return the original instance if it is already of the appropriate hierarchy.
            Will throw whatever parsing/format exceptions occur if the sub type is not the same.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type of the conversion.</param>
            <returns>The original or converted value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.PrimitivePropertyConverter.ConvertSpatialValue``2(``0)">
            <summary>
            Converts a spatial value by from geometry to geography or vice versa. Will return the original instance if it is already of the appropriate hierarchy.
            Will throw whatever parsing/format exceptions occur if the sub type is not the same.
            </summary>
            <typeparam name="TIn">The type of the value being converted.</typeparam>
            <typeparam name="TOut">The target type of the conversion.</typeparam>
            <param name="valueToConvert">The value to convert.</param>
            <returns>The original or converted value.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.PrimitiveValueMaterializationPolicy">
            <summary>
            Creates a policy that is used for materializing Primitive values
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.PrimitiveValueMaterializationPolicy.context">
            <summary> MaterializerContext used to resolve types for materialization. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.PrimitiveValueMaterializationPolicy.lazyPrimitivePropertyConverter">
            <summary>
            primitive property converter used to convert the property have the value has been materialized. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.PrimitiveValueMaterializationPolicy.#ctor(Microsoft.OData.Client.Materialization.IODataMaterializerContext,Microsoft.OData.Client.SimpleLazy{Microsoft.OData.Client.Materialization.PrimitivePropertyConverter})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.PrimitiveValueMaterializationPolicy"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="lazyPrimitivePropertyConverter">The lazy primitive property converter.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.PrimitiveValueMaterializationPolicy.MaterializePrimitiveDataValue(System.Type,System.String,System.Object)">
            <summary>
            Materializes the primitive data value.
            </summary>
            <param name="collectionItemType">Type of the collection item.</param>
            <param name="wireTypeName">Name of the wire type.</param>
            <param name="item">The item.</param>
            <returns>Materialized primitive data value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.PrimitiveValueMaterializationPolicy.MaterializePrimitiveDataValueCollectionElement(System.Type,System.String,System.Object)">
            <summary>
            Materializes the primitive data value collection element.
            </summary>
            <param name="collectionItemType">The collection item type.</param>
            <param name="wireTypeName">Name of the wire type.</param>
            <param name="item">The item.</param>
            <returns>Materialized primitive collection element value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.PrimitiveValueMaterializationPolicy.MaterializePrimitiveDataValue(System.Type,System.String,System.Object,System.Func{System.String},System.Object@)">
            <summary>Materializes a primitive value. No op or non-primitive values.</summary>
            <param name="type">Type of value to set.</param>
            <param name="wireTypeName">Type name from the payload.</param>
            <param name="value">Value of primitive provided by ODL.</param>
            <param name="throwOnNullMessage">The exception message if the value is null.</param>
            <param name="materializedValue">The materialized value.</param>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.PrimitiveValueMaterializationPolicy.PrimitivePropertyConverter">
            <summary>
            Gets the primitive property converter.
            </summary>
            <value>
            The primitive property converter.
            </value>
        </member>
        <member name="T:Microsoft.OData.Client.MaterializedEntityArgs">
            <summary>
            Materialized Entity arguments
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializedEntityArgs.#ctor(Microsoft.OData.Core.ODataEntry,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.MaterializedEntityArgs"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Microsoft.OData.Client.MaterializedEntityArgs.Entry">
            <summary>
            Gets the entry.
            </summary>
            <value>
            The entry.
            </value>
        </member>
        <member name="P:Microsoft.OData.Client.MaterializedEntityArgs.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceClientRequestMessage">
            <summary>
            This class represents the contract WCF Data Services client with the request message.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientRequestMessage.actualHttpMethod">
            <summary>Http method.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceClientRequestMessage"/> class.
            </summary>
            <param name="actualMethod">The actual method.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessage.GetHeader(System.String)">
            <summary>
            Returns the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <returns>Returns the value of the header with the given name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessage.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <param name="headerValue">Value of the header.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessage.GetStream">
            <summary>
            Gets the stream to be used to write the request payload.
            </summary>
            <returns>Stream to which the request payload needs to be written.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessage.Abort">
            <summary>
            Abort the current request.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessage.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a System.IO.Stream object to use to write data.
            </summary>
            <param name="callback">The System.AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An System.IAsyncResult that references the asynchronous request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessage.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request for a System.IO.Stream object to use to write data.
            </summary>
            <param name="asyncResult">The pending request for a stream.</param>
            <returns>A System.IO.Stream to use to write request data.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessage.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
             Begins an asynchronous request to an Internet resource.
            </summary>
            <param name="callback">The System.AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An System.IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessage.EndGetResponse(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to an Internet resource.
            </summary>
            <param name="asyncResult">The pending request for a response.</param>
            <returns>A System.Net.WebResponse that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestMessage.GetResponse">
            <summary>
            Returns a response from an Internet resource.
            </summary>
            <returns>A System.Net.WebResponse that contains the response from the Internet resource.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessage.Headers">
            <summary>
            Returns the collection of request headers.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessage.Url">
            <summary>
            Gets or sets the request url.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessage.Method">
            <summary>
            Gets or sets the method for this request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessage.Credentials">
            <summary>
            Gets or set the credentials for this request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessage.Timeout">
            <summary>
            Gets or sets the timeout (in seconds) for this request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessage.SendChunked">
            <summary>
            Gets or sets a value that indicates whether to send data in segments to the
             Internet resource. 
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestMessage.ActualMethod">
            <summary>
            Gets or the actual method. In post tunneling situations method will be POST instead of the specified verb method.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.UriEntityOperationParameter">
            <summary>
            Represents a function parameter that is either entity or collection of entities.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.UriOperationParameter">
            <summary>
            Represents a parameter associated with a service operation  or a service function.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.UriOperationParameter.#ctor(System.String,System.Object)">
            <summary> Instantiates a new UriOperationParameter </summary>
            <param name="name">The name of the uri operation parameter.</param>
            <param name="value">The value of the uri operation parameter.</param>
        </member>
        <member name="F:Microsoft.OData.Client.UriEntityOperationParameter.useEntityReference">
            <summary>
            If true, use entity reference instead of entity as the operation parameter.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.UriEntityOperationParameter.#ctor(System.String,System.Object)">
            <summary> Instantiates a new UriEntityOperationParameter </summary>
            <param name="name">The name of the uri operation parameter.</param>
            <param name="value">The value of the uri operation parameter.</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriEntityOperationParameter.#ctor(System.String,System.Object,System.Boolean)">
            <summary> Instantiates a new UriOperationParameter </summary>
            <param name="name">The name of the uri operation parameter.</param>
            <param name="value">The value of the uri operation parameter.</param>
            <param name="useEntityReference">If true, use entity reference, instead of entity to serialize the parameter.</param>
        </member>
        <member name="P:Microsoft.OData.Client.UriEntityOperationParameter.UseEntityReference">
            <summary>Use entity reference link.</summary>
            <returns>True if it uses entity reference link.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Utility">
            <summary>
            Helper class for T4 Template, provide uniform API for different platforms
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Utility.GetCustomAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of custom attributes
            applied to this member and identified by System.Type.
            </summary>
            <param name="type">
            The type to query custom attributes on.
            </param>
            <param name="attributeType">
            The type of attribute to search for. Only attributes that are assignable
            to this type are returned.
            </param>
            <param name="inherit">
            true to search this member's inheritance chain to find the attributes; otherwise,
            false. This parameter is ignored for properties and events; see Remarks.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of custom attributes applied to this member, or an array with zero
            elements if no attributes assignable to attributeType have been applied.
            </returns>
        </member>
        <member name="T:Microsoft.OData.Client.WeakDictionary`2">
            <summary>
            A generic dictionary, which allows its keys to be garbage collected if there are no other references
            to them than from the dictionary itself.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <remarks>
            If the key of a particular entry in the dictionary has been collected, then the key becomes
            effectively unreachable. However, left-over WeakReference objects for the key will physically remain in
            the dictionary until RemoveCollectedEntries is called.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.WeakDictionary`2.dictionary">
            <summary>
            Internal Dictionary which actually stores the key and value.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.WeakDictionary`2.comparer">
            <summary>
            The comparer used to determine equality of keys for the internal dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.WeakDictionary`2.intervalForRefresh">
            <summary>
            The interval for calling RemoveCollectedEntries to refresh the internal dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.WeakDictionary`2.countLimitForRefresh">
            <summary>
            The count limit for calling RemoveCollectedEntries to refresh the internal dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.WeakDictionary`2.countForRefresh">
            <summary>
            Count on how many entries has been added.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.WeakDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            The constructor with a specified comparer.
            </summary>
            <param name="comparer">
            The IEqualityComparer used to determine equals of object of <typeparamref name="TKey"/>.
            </param>
        </member>
        <member name="M:Microsoft.OData.Client.WeakDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            The constructor with a specified comparer and a referesh interval.
            </summary>
            <param name="comparer">
            The IEqualityComparer used to determine equals of object of <typeparamref name="TKey"/>.
            </param>
            <param name="refreshInterval">
            The interval for calling RemoveCollectedEntries to refresh the dictionary.
            </param>
        </member>
        <member name="M:Microsoft.OData.Client.WeakDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:Microsoft.OData.Client.WeakDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.WeakDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully found and removed; 
            otherwise, false if key is not found in the dictionary.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified 
            key, if the key is found; otherwise, the default value for the type of the value parameter.
            </param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WeakDictionary`2.RemoveCollectedEntries">
            <summary>
            Removes the left-over weak references for entries in the dictionary whose key has already been
            reclaimed by the garbage collector. This will reduce the dictionary's Count by the number of 
            dead key-value pairs that were eliminated.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.WeakDictionary`2.CreateWeakKey">
            <summary>
            Defines how the keys are stored in this dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.WeakDictionary`2.RemoveCollectedEntriesRules">
            <summary>
            Get the list of rules that define whether an entry can be removed.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.WeakDictionary`2.Count">
            <summary>
            Get the count of entries in this dictionary.
            </summary>
            <remarks>
            The count returned here may include entries for which the key has already been garbage collected.
            Call RemoveCollectedEntries to weed out collected entries and update the count accordingly.
            </remarks>        
        </member>
        <member name="P:Microsoft.OData.Client.WeakDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key"> The key of the value to get or set.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.WeakKeyReference`1">
            <summary>
            A weak reference for an object of <typeparamref name="T"/>, which can be used as key in a dictionary.
            </summary>
            <typeparam name="T">The type of the keys in the dictionary.</typeparam>
        </member>
        <member name="P:Microsoft.OData.Client.WeakKeyReference`1.HashCode">
            <summary>
            The hash code of the target.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.WeakKeyReference`1.Target">
            <summary>
             Gets the object (the target) referenced by the current weak reference object.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.WritingEntityReferenceLinkArgs">
            <summary>
            The writing entity reference link arguments
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.WritingEntityReferenceLinkArgs.#ctor(Microsoft.OData.Core.ODataEntityReferenceLink,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.WritingEntityReferenceLinkArgs"/> class.
            </summary>
            <param name="entityReferenceLink">The entity reference link.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Microsoft.OData.Client.WritingEntityReferenceLinkArgs.EntityReferenceLink">
            <summary>
            Gets the feed.
            </summary>
            <value>
            The feed.
            </value>
        </member>
        <member name="P:Microsoft.OData.Client.WritingEntityReferenceLinkArgs.Source">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.WritingEntityReferenceLinkArgs.Target">
            <summary>
            Gets the target.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.WritingEntryArgs">
            <summary>
            Writing entry arguments
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.WritingEntryArgs.#ctor(Microsoft.OData.Core.ODataEntry,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.WritingEntryArgs"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Microsoft.OData.Client.WritingEntryArgs.Entry">
            <summary>
            Gets the entry.
            </summary>
            <value>
            The entry.
            </value>
        </member>
        <member name="P:Microsoft.OData.Client.WritingEntryArgs.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.WritingNavigationLinkArgs">
            <summary>
            Writing navigation link arguments
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.WritingNavigationLinkArgs.#ctor(Microsoft.OData.Core.ODataNavigationLink,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.WritingNavigationLinkArgs"/> class.
            </summary>
            <param name="link">The link.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Microsoft.OData.Client.WritingNavigationLinkArgs.Link">
            <summary>
            Gets the link.
            </summary>
            <value>
            The link.
            </value>
        </member>
        <member name="P:Microsoft.OData.Client.WritingNavigationLinkArgs.Source">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.WritingNavigationLinkArgs.Target">
            <summary>
            Gets the target.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration">
            <summary>
            Class that holds a variety of events for writing the payload from the OData to the wire
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.writingStartEntryActions">
            <summary> Actions to execute before start entry called. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.writingEndEntryActions">
            <summary> Actions to execute before end entry called. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.writeEntityReferenceLinkActions">
            <summary> Actions to execute before entity reference link written. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.writingStartNavigationLinkActions">
            <summary> Actions to execute after before start navigation link called. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.writingEndNavigationLinkActions">
            <summary> Actions to execute before end navigation link called. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.messageWriterSettingsConfigurationActions">
            <summary> The message writer setting configurations. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.onmessageCreating">
            <summary> The delegate that represents how a message is created.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.#ctor">
            <summary>
            Creates a request pipeline configuration class
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.OnMessageWriterSettingsCreated(System.Action{Microsoft.OData.Client.MessageWriterSettingsArgs})">
            <summary>
            Called when [message writer created].
            </summary>
            <param name="args">The args.</param>
            <returns>The request pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.OnEntryStarting(System.Action{Microsoft.OData.Client.WritingEntryArgs})">
            <summary>
            Called when [entry starting].
            </summary>
            <param name="action">The action.</param>
            <returns>The request pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.OnEntryEnding(System.Action{Microsoft.OData.Client.WritingEntryArgs})">
            <summary>
            Called when [entry ending].
            </summary>
            <param name="action">The action.</param>
            <returns>The request pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.OnEntityReferenceLink(System.Action{Microsoft.OData.Client.WritingEntityReferenceLinkArgs})">
            <summary>
            Called when [entity reference link].
            </summary>
            <param name="action">The action.</param>
            <returns>The request pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.OnNavigationLinkStarting(System.Action{Microsoft.OData.Client.WritingNavigationLinkArgs})">
            <summary>
            Called when [navigation link starting].
            </summary>
            <param name="action">The action.</param>
            <returns>The request pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.OnNavigationLinkEnding(System.Action{Microsoft.OData.Client.WritingNavigationLinkArgs})">
            <summary>
            Called when [navigation link end].
            </summary>
            <param name="action">The action.</param>
            <returns>The request pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.ExecuteWriterSettingsConfiguration(Microsoft.OData.Core.ODataMessageWriterSettingsBase)">
            <summary>
            Called when [create message writer settings configurations].
            </summary>
            <param name="writerSettings">The writer settings.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.ExecuteOnEntryEndActions(Microsoft.OData.Core.ODataEntry,System.Object)">
            <summary>
            Fires before entry end.
            </summary>
            <param name="entry">The entry.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.ExecuteOnEntryStartActions(Microsoft.OData.Core.ODataEntry,System.Object)">
            <summary>
            Fires before entry start.
            </summary>
            <param name="entry">The entry.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.ExecuteOnNavigationLinkEndActions(Microsoft.OData.Core.ODataNavigationLink,System.Object,System.Object)">
            <summary>
            Fires before navigation end.
            </summary>
            <param name="link">The link.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.ExecuteOnNavigationLinkStartActions(Microsoft.OData.Core.ODataNavigationLink,System.Object,System.Object)">
            <summary>
            Fires before navigation start.
            </summary>
            <param name="link">The link.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.ExecuteEntityReferenceLinkActions(Microsoft.OData.Core.ODataEntityReferenceLink,System.Object,System.Object)">
            <summary>
            Fires before writing the on entity reference link.
            </summary>
            <param name="entityReferenceLink">The entity reference link.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.OnMessageCreating">
            <summary>
            Gets the request message to be used for sending the request. By providing a custom message, users
            can replace the transport layer.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.HasOnMessageCreating">
            <summary>
            Determines if OnMessageCreating is being used or not.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration.ContextUsingSendingRequest">
            <summary>
            Gets or sets the a value indicating whether the context is using the sending request event or not.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ReadingNavigationLinkArgs">
            <summary>
            The reading navigation link arguments
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ReadingNavigationLinkArgs.#ctor(Microsoft.OData.Core.ODataNavigationLink)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ReadingNavigationLinkArgs"/> class.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ReadingNavigationLinkArgs.Link">
            <summary>
            Gets the link.
            </summary>
            <value>
            The link.
            </value>
        </member>
        <member name="T:Microsoft.OData.Client.ReadingFeedArgs">
            <summary>
            The reading feed arguments
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ReadingFeedArgs.#ctor(Microsoft.OData.Core.ODataFeed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ReadingFeedArgs"/> class.
            </summary>
            <param name="feed">The feed.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ReadingFeedArgs.Feed">
            <summary>
            Gets the feed.
            </summary>
            <value>
            The feed.
            </value>
        </member>
        <member name="T:Microsoft.OData.Client.EntityTrackerBase">
            <summary>
            Entity Tracker base, allows more decoupling for testing.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTrackerBase.TryGetEntity(System.Uri,Microsoft.OData.Client.EntityStates@)">
            <summary>
            Find tracked entity by its resourceUri and update its etag.
            </summary>
            <param name="resourceUri">resource id</param>
            <param name="state">state of entity</param>
            <returns>entity if found else null</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTrackerBase.GetLinks(System.Object,System.String)">
            <summary>
            get the related links ignoring target entity
            </summary>
            <param name="source">source entity</param>
            <param name="sourceProperty">source entity's property</param>
            <returns>enumerable of related ends</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTrackerBase.InternalAttachEntityDescriptor(Microsoft.OData.Client.EntityDescriptor,System.Boolean)">
            <summary>
            Attach entity into the context in the Unchanged state.
            </summary>
            <param name="entityDescriptorFromMaterializer">entity descriptor from the response</param>
            <param name="failIfDuplicated">fail for public api else change existing relationship to unchanged</param>
            <remarks>Caller should validate descriptor instance.</remarks>
            <returns>The attached descriptor, if one already exists in the context and failIfDuplicated is set to false, then the existing instance is returned</returns>
            <exception cref="T:System.InvalidOperationException">if entity is already being tracked by the context</exception>
            <exception cref="T:System.InvalidOperationException">if identity is pointing to another entity</exception>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTrackerBase.GetEntityDescriptor(System.Object)">
            <summary>
            verify the resource being tracked by context
            </summary>
            <param name="resource">resource</param>
            <returns>The given resource.</returns>
            <exception cref="T:System.InvalidOperationException">if resource is not contained</exception>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTrackerBase.DetachExistingLink(Microsoft.OData.Client.LinkDescriptor,System.Boolean)">
            <summary>Detach existing link</summary>
            <param name="existingLink">link to detach</param>
            <param name="targetDelete">true if target is being deleted, false otherwise</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTrackerBase.AttachLink(System.Object,System.String,System.Object,Microsoft.OData.Client.MergeOption)">
            <summary>
            attach the link with the given source, sourceProperty and target.
            </summary>
            <param name="source">source entity of the link.</param>
            <param name="sourceProperty">name of the property on the source entity.</param>
            <param name="target">target entity of the link.</param>
            <param name="linkMerge">merge option to be used to merge the link if there is an existing link.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTrackerBase.AttachIdentity(Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.MergeOption)">
            <summary>response materialization has an identity to attach to the inserted object</summary>
            <param name="entityDescriptorFromMaterializer">entity descriptor containing all the information about the entity from the response.</param>
            <param name="metadataMergeOption">mergeOption based on which EntityDescriptor will be merged.</param>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataMaterializerContext">
            <summary>
            Contains state and methods required to materialize odata collection, complex and primitive values
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.IODataMaterializerContext">
            <summary>
            Context for materialization of OData values
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.IODataMaterializerContext.ResolveTypeForMaterialization(System.Type,System.String)">
            <summary>
            Resolves the client type that should be used for materialization.
            </summary>
            <param name="expectedType">Expected client clr type based on the API called.</param>
            <param name="readerTypeName">
            The name surfaced by the ODataLib reader. 
            If we have a server model, this will be a server type name that needs to be resolved. 
            If not, then this will already be a client type name.</param>
            <returns>The resolved annotation for the client type to materialize into.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.IODataMaterializerContext.ResolveExpectedTypeForReading(System.Type)">
            <summary>
            Resolves the expected EDM type to give to the ODataLib reader based on a client CLR type.
            </summary>
            <param name="clientClrType">The client side CLR type.</param>
            <returns>The resolved EDM type to provide to ODataLib.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.IODataMaterializerContext.Context">
            <summary>
            The DataServiceContext associated with this materializer context
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.IODataMaterializerContext.IgnoreMissingProperties">
            <summary>
            Gets a value indicating whether Ignore missing properties is set or not
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.IODataMaterializerContext.Model">
            <summary>
            Gets a value indicated the Client Edm Model
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.IODataMaterializerContext.ResponsePipeline">
            <summary>
            Gets the materialization Events
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializerContext.#ctor(Microsoft.OData.Client.ResponseInfo)">
            <summary>
            Initializes a materializer context
            </summary>
            <param name="responseInfo">Response information used to initialize with the materializer</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializerContext.ResolveTypeForMaterialization(System.Type,System.String)">
            <summary>
            Resolved the given edm type to clr type.
            </summary>
            <param name="expectedType">Expected Clr type.</param>
            <param name="wireTypeName">Edm name of the type returned by the resolver.</param>
            <returns>an instance of ClientTypeAnnotation with the given name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMaterializerContext.ResolveExpectedTypeForReading(System.Type)">
            <summary>
            Resolves the EDM type for the given CLR type.
            </summary>
            <param name="expectedType">The client side CLR type.</param>
            <returns>The resolved EDM type.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializerContext.Context">
            <summary>
            Data service context associated with this materializer context
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializerContext.IgnoreMissingProperties">
            <summary>
            Gets a value indicating whether to ignore missing properties when materializing values
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializerContext.Model">
            <summary>
            Gets a Client Edm model used to materialize values
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializerContext.ResponsePipeline">
            <summary>
            Gets the materialization Events
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMaterializerContext.ResponseInfo">
            <summary>
            Gets the Response information that backs the information on the context
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.MessageSettingsHelper">
            <summary>
            Message setting helper
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.MessageSettingsHelper.WriterSettingsEnableAtom">
            <summary>
            PropertyInfo for ODataMessageWriterSettings.EnableAtom
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.MessageSettingsHelper.ReaderSettingsEnableAtom">
            <summary>
            PropertyInfo for ODataMessageReaderSettings.EnableAtom
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.MessageSettingsHelper.EnableAtomSupport(Microsoft.OData.Core.ODataMessageWriterSettings)">
            <summary>
            Enable Atom for given ODataMessageWriterSettings
            </summary>
            <param name="settings">The settings to operate on.</param>
        </member>
        <member name="M:Microsoft.OData.Client.MessageSettingsHelper.EnableAtomSupport(Microsoft.OData.Core.ODataMessageReaderSettings)">
            <summary>
            Enable Atom for given ODataMessageReaderSettings
            </summary>
            <param name="settings">The settings to operate on.</param>
        </member>
        <member name="T:Microsoft.OData.Client.ReadingEntryArgs">
            <summary>
            The reading entry args
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ReadingEntryArgs.#ctor(Microsoft.OData.Core.ODataEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ReadingEntryArgs"/> class.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ReadingEntryArgs.Entry">
            <summary>
            Gets the entry.
            </summary>
            <value>
            The entry.
            </value>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration">
            <summary>
            Class that is responsible for configuration of actions that are invoked from a response
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.readingStartEntryActions">
            <summary> Actions to be run when reading start entry called </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.readingEndEntryActions">
            <summary> Actions to be run when reading end entry called </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.readingStartFeedActions">
            <summary> Actions to be run when reading start feed called </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.readingEndFeedActions">
            <summary> Actions to be run when reading end feed called </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.readingStartNavigationLinkActions">
            <summary> Actions to be run when reading start link called </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.readingEndNavigationLinkActions">
            <summary> Actions to be run when reading end link called </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.materializedEntityActions">
            <summary> Actions to be run after an entry has been materialized </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.messageReaderSettingsConfigurationActions">
            <summary> The message reader setting configurations. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.sender">
            <summary> The sender. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.#ctor(System.Object)">
            <summary>
            Creates a Data service client response pipeline class
            </summary>
            <param name="sender"> The sender for the Reading Atom event.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.OnMessageReaderSettingsCreated(System.Action{Microsoft.OData.Client.MessageReaderSettingsArgs})">
            <summary>
            Called when [reader settings created].
            </summary>
            <param name="messageReaderSettingsAction">The reader message settings configuration.</param>
            <returns>The response pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.OnEntryStarted(System.Action{Microsoft.OData.Client.ReadingEntryArgs})">
            <summary>
            Called when [read start entry].
            </summary>
            <param name="action">The action.</param>
            <returns>The response pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.OnEntryEnded(System.Action{Microsoft.OData.Client.ReadingEntryArgs})">
            <summary>
            Called when [read end entry].
            </summary>
            <param name="action">The action.</param>
            <returns>The response pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.OnFeedStarted(System.Action{Microsoft.OData.Client.ReadingFeedArgs})">
            <summary>
            Called when [read start feed].
            </summary>
            <param name="action">The action.</param>
            <returns>The response pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.OnFeedEnded(System.Action{Microsoft.OData.Client.ReadingFeedArgs})">
            <summary>
            Called when [read end feed].
            </summary>
            <param name="action">The action.</param>
            <returns>The response pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.OnNavigationLinkStarted(System.Action{Microsoft.OData.Client.ReadingNavigationLinkArgs})">
            <summary>
            Called when [read start navigation link].
            </summary>
            <param name="action">The action.</param>
            <returns>The response pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.OnNavigationLinkEnded(System.Action{Microsoft.OData.Client.ReadingNavigationLinkArgs})">
            <summary>
            Called when [read end navigation link].
            </summary>
            <param name="action">The action.</param>
            <returns>The response pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.OnEntityMaterialized(System.Action{Microsoft.OData.Client.MaterializedEntityArgs})">
            <summary>
            Called when [entity materialized].
            </summary>
            <param name="action">The action.</param>
            <returns>The response pipeline configuration.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.ExecuteReaderSettingsConfiguration(Microsoft.OData.Core.ODataMessageReaderSettingsBase)">
            <summary>
            Executes actions that configure reader settings.
            </summary>
            <param name="readerSettings">The reader settings.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.ExecuteOnEntryEndActions(Microsoft.OData.Core.ODataEntry)">
            <summary>
            Executes the on entry end actions.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.ExecuteOnEntryStartActions(Microsoft.OData.Core.ODataEntry)">
            <summary>
            Executes the on entry start actions.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.ExecuteOnFeedEndActions(Microsoft.OData.Core.ODataFeed)">
            <summary>
            Executes the on feed end actions.
            </summary>
            <param name="feed">The feed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.ExecuteOnFeedStartActions(Microsoft.OData.Core.ODataFeed)">
            <summary>
            Executes the on feed start actions.
            </summary>
            <param name="feed">The feed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.ExecuteOnNavigationEndActions(Microsoft.OData.Core.ODataNavigationLink)">
            <summary>
            Executes the on navigation end actions.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.ExecuteOnNavigationStartActions(Microsoft.OData.Core.ODataNavigationLink)">
            <summary>
            Executes the on navigation start actions.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.ExecuteEntityMaterializedActions(Microsoft.OData.Core.ODataEntry,System.Object)">
            <summary>
            Fires after the entry was materialized
            </summary>
            <param name="entry">The entry.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.FireEndEntryEvents(Microsoft.OData.Client.Materialization.MaterializerEntry)">
            <summary>
            Fires the end entry events.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.HasConfigurations">
            <summary>
            Gets a value indicating whether this instance has handlers.
            </summary>
            <value>
            <c>true</c> if this instance has handlers; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientResponsePipelineConfiguration.HasReadingEntityHandlers">
            <summary>
            Gets whether there is a reading entity handler
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter">
            <summary>
            Class for reading top level feeds or entries and adapting it for the materializer
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.readODataFormat">
            <summary>The odata format being read.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.reader">
            <summary>The reader.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.clientEdmModel">
            <summary>The Client Edm Model used to determine type information.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.mergeOption">
            <summary>MergeOption information to determine how to merge descriptors.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.feedEntries">
            <summary>An enumerator of <see cref="T:Microsoft.OData.Core.ODataEntry"/> values.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.currentFeed">
            <summary>The current feed.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.currentEntry">
            <summary>The current entry.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.#ctor(Microsoft.OData.Core.ODataMessageReader,Microsoft.OData.Client.Materialization.ODataReaderWrapper,Microsoft.OData.Client.ClientEdmModel,Microsoft.OData.Client.MergeOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter"/> class.
            </summary>
            <param name="messageReader">The messageReader that is used to get the format of the reader.</param>
            <param name="reader">The reader.</param>
            <param name="model">The model.</param>
            <param name="mergeOption">The mergeOption.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.#ctor(Microsoft.OData.Core.ODataFormat,Microsoft.OData.Client.Materialization.ODataReaderWrapper,Microsoft.OData.Client.ClientEdmModel,Microsoft.OData.Client.MergeOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter"/> class. Used for tests so no ODataMessageReader is required
            </summary>
            <param name="odataFormat">The format of the reader.</param>
            <param name="reader">The reader.</param>
            <param name="model">The model.</param>
            <param name="mergeOption">The mergeOption.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.GetCountValue(System.Boolean)">
            <summary>
            The count tag's value, if requested
            </summary>
            <param name="readIfNoFeed">Should read pull if no feed exists.</param>
            <returns>The count value returned from the server</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.Read">
            <summary>
            Read a feed or entry, with the expected type.
            </summary>
            <returns>true if a value was read, otherwise false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.Dispose">
            <summary>
            Disposes the reader
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.TryReadFeedOrEntry(System.Boolean,Microsoft.OData.Core.ODataFeed@,Microsoft.OData.Client.Materialization.MaterializerEntry@)">
            <summary>
            Tries to read a feed or entry.
            </summary>
            <param name="lazy">if set to <c>true</c> [lazy].</param>
            <param name="feed">The feed.</param>
            <param name="entry">The entry.</param>
            <returns>true if a value was read, otherwise false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.TryStartReadFeedOrEntry">
            <summary>
            Tries to read the start of a feed or entry.
            </summary>
            <returns>true if a value was read, otherwise false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.TryReadFeed(System.Boolean,Microsoft.OData.Core.ODataFeed@)">
            <summary>
            Tries to read a feed.
            </summary>
            <param name="lazy">if set to <c>true</c> [lazy].</param>
            <param name="feed">The feed.</param>
            <returns>true if a value was read, otherwise false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.ReadFeedCore(System.Boolean)">
            <summary>
            Reads the remainder of a feed.
            </summary>
            <param name="lazy">if set to <c>true</c> [lazy].</param>
            <returns>A feed.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.LazyReadEntries">
            <summary>
            Lazily reads entries.
            </summary>
            <returns>An enumerable that will lazily read entries when enumerated.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.TryReadEntry(Microsoft.OData.Client.Materialization.MaterializerEntry@)">
            <summary>
            Tries to read an entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>true if a value was read, otherwise false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.ReadEntryCore">
            <summary>
            Reads the remainder of an entry.
            </summary>
            <returns>An entry.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.ReadNavigationLink">
            <summary>
            Reads a navigation link.
            </summary>
            <returns>A navigation link.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.TryRead">
            <summary>
            Tries to read from the ODataReader.
            </summary>
            <returns>True if a value is read, otherwise false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.ReadAndExpectState(Microsoft.OData.Core.ODataReaderState)">
            <summary>
            Reads from the reader and asserts the reader is in the expected state.
            </summary>
            <param name="expectedState">The expected state.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.AssertRead">
            <summary>
            Asserts that an item could be read.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.ExpectState(Microsoft.OData.Core.ODataReaderState)">
            <summary>
            Asserts the reader is in the expected state.
            </summary>
            <param name="expectedState">The expected state.</param>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.CurrentFeed">
            <summary>
            Gets the current feed.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.CurrentEntry">
            <summary>
            Gets the current entry.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.FeedAndEntryMaterializerAdapter.IsEndOfStream">
            <summary>
            Gets a value indicating whether this instance is end of stream.
            </summary>
            <value>
                <c>true</c> if this instance is end of stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Microsoft.OData.Client.DictionaryExtensions">
            <summary>
            Useful extension methods for IDictionary
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DictionaryExtensions.FindOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            If the key exists in the dictionary, returns it. Otherwise creates a new value, adds it to the dictionary, and returns it.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to look in.</param>
            <param name="key">The key to find/add.</param>
            <param name="createValue">A callback to create a new value if one is not found.</param>
            <returns>The new or found value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DictionaryExtensions.SetRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Sets a range of values in the dictionary. A set operation is performed on each value in <paramref name="valuesToCopy"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to set the values in.</param>
            <param name="valuesToCopy">Enumerable of key-value pairs to set in <paramref name="dictionary"/>.</param>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceClientFormat">
            <summary>
            Tracks the user-preferred format which the client should use when making requests.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.MimeApplicationAtom">
            <summary>MIME type for ATOM bodies (http://www.iana.org/assignments/media-types/application/).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.MimeApplicationJson">
            <summary>MIME type for JSON bodies (implies light in V3, verbose otherwise) (http://www.iana.org/assignments/media-types/application/).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.MimeApplicationJsonODataLight">
            <summary>MIME type for JSON bodies in light mode (http://www.iana.org/assignments/media-types/application/).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.MimeApplicationJsonODataLightWithAllMetadata">
            <summary>MIME type for JSON bodies in light mode with all metadata.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.MimeMultiPartMixed">
            <summary>MIME type for changeset multipart/mixed</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.MimeApplicationXml">
            <summary>MIME type for XML bodies.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.MimeApplicationAtomOrXml">
            <summary>Combined accept header value for either 'application/atom+xml' or 'application/xml'.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.Utf8Encoding">
            <summary>text for the utf8 encoding</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.HttpAcceptCharset">
            <summary>The character set the client wants the response to be in.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.context">
            <summary>The context this format instance is associated with.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientFormat.serviceModel">
            <summary>The service edm model.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.#ctor(Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceClientFormat"/> class.
            </summary>
            <param name="context">DataServiceContext instance associated with this format.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.UseJson(Microsoft.OData.Edm.IEdmModel)">
            <summary>
            Indicates that the client should use the efficient JSON format.
            </summary>
            <param name="serviceModel">The model of the service.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.UseJson">
            <summary>
            Indicates that the client should use the efficient JSON format. Will invoke the LoadServiceModel delegate property in order to get the required service model.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.UseAtom">
            <summary>
            Indicates that the client should use the Atom format.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.SetRequestAcceptHeader(Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Sets the value of the Accept header to the appropriate value for the current format.
            </summary>
            <param name="headers">The headers to modify.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.SetRequestAcceptHeaderForQuery(Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.QueryComponents)">
            <summary>
            Sets the value of the Accept header for a query.
            </summary>
            <param name="headers">The headers to modify.</param>
            <param name="components">The query components for the request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.SetRequestAcceptHeaderForStream(Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Sets the value of the Accept header for a stream request (will set it to '*/*').
            </summary>
            <param name="headers">The headers to modify.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.SetRequestAcceptHeaderForCount(Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Sets the value of the Accept header for a count request (will set it to 'text/plain').
            </summary>
            <param name="headers">The headers to modify.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.SetRequestAcceptHeaderForBatch(Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Sets the value of the Accept header for a count request (will set it to 'multipart/mixed').
            </summary>
            <param name="headers">The headers to modify.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.SetRequestContentTypeForEntry(Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Sets the value of the ContentType header on the specified entry request to the appropriate value for the current format.
            </summary>
            <param name="headers">Dictionary of request headers.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.SetRequestContentTypeForOperationParameters(Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Sets the value of the  Content-Type header a request with operation parameters to the appropriate value for the current format.
            </summary>
            <param name="headers">Dictionary of request headers.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.SetRequestContentTypeForLinks(Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Sets the value of the ContentType header on the specified links request to the appropriate value for the current format.
            </summary>
            <param name="headers">Dictionary of request headers.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.ValidateCanWriteRequestFormat(Microsoft.OData.Core.IODataRequestMessage,System.Boolean)">
            <summary>
            Validates that we can write the request format.
            </summary>
            <param name="requestMessage">The request message to get the format from.</param>
            <param name="isParameterPayload">true if the writer is intended to for a parameter payload, false otherwise.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.ValidateCanReadResponseFormat(Microsoft.OData.Core.IODataResponseMessage)">
            <summary>
            Validates that we can read the response format.
            </summary>
            <param name="responseMessage">The response message to get the format from.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.ThrowInvalidOperationExceptionForJsonLightWithoutModel">
            <summary>
            Throws InvalidOperationException for JSON Light without a model.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.ValidateContentType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates that we can read or write a message with the given content-type value.
            </summary>
            <param name="contentType">The content-type value in question.</param>
            <param name="isParameterPayload">true if the writer is intended to for a parameter payload, false otherwise.</param>
            <param name="isResponse">true if content-type header value is from response, false otherwise.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.SetRequestContentTypeHeader(Microsoft.OData.Client.HeaderCollection,System.String)">
            <summary>
            Sets the request's content type header.
            </summary>
            <param name="headers">Dictionary of request headers.</param>
            <param name="mediaType">content type</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.SetAcceptHeaderAndCharset(Microsoft.OData.Client.HeaderCollection,System.String)">
            <summary>
            Sets the accept header to the given value and the charset to UTF-8.
            </summary>
            <param name="headers">The headers to update.</param>
            <param name="mediaType">The media type for the accept header.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientFormat.ChooseMediaType(System.String,System.Boolean)">
            <summary>
            Chooses between using JSON-Light and the context-dependent media type for when Atom is selected based on the user-selected format.
            </summary>
            <param name="valueIfUsingAtom">The value if using atom.</param>
            <param name="hasSelectQueryOption">
              Whether or not the select query option is present in the request URI. 
              If true, indicates that the client should ask the server to include all metadata in a JSON-Light response.
            </param>
            <returns>The media type to use (either JSON-Light or the provided value)</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientFormat.ODataFormat">
            <summary>
            Gets the current format. Defaults to Atom if nothing else has been specified.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientFormat.LoadServiceModel">
            <summary>
            Invoked when using the parameterless UseJson method in order to get the service model.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientFormat.UsingAtom">
            <summary>
            True if the format has been configured to use Atom, otherwise False.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientFormat.ServiceModel">
            <summary>
            Gets the service model.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceQueryContinuation">
            <summary>Encapsulates a URI that returns the next page of a paged WCF Data Services query result.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQueryContinuation.nextLinkUri">
            <summary>URI to next page of data.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQueryContinuation.plan">
            <summary>Projection plan for results of next page.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryContinuation.#ctor(System.Uri,Microsoft.OData.Client.ProjectionPlan)">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation"/> instance.</summary>
            <param name="nextLinkUri">URI to next page of data.</param>
            <param name="plan">Projection plan for results of next page.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryContinuation.ToString">
            <summary>Returns the next link URI as a string.</summary>
            <returns>A string representation of the next link URI.  </returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryContinuation.Create(System.Uri,Microsoft.OData.Client.ProjectionPlan)">
            <summary>Creates a new <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation"/> instance.</summary>
            <param name="nextLinkUri">Link to next page of data (possibly null).</param>
            <param name="plan">Plan to materialize the data (only null if nextLinkUri is null).</param>
            <returns>A new continuation object; null if nextLinkUri is null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryContinuation.CreateQueryComponents">
            <summary>
            Initializes a new <see cref="T:Microsoft.OData.Client.QueryComponents"/> instance that can 
            be used for this continuation.
            </summary>
            <returns>A new initializes <see cref="T:Microsoft.OData.Client.QueryComponents"/>.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQueryContinuation.NextLinkUri">
            <summary>Gets the URI that is used to return the next page of data from a paged query result.</summary>
            <returns>A URI that returns the next page of data.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQueryContinuation.ElementType">
            <summary>Type of element to be paged over.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQueryContinuation.Plan">
            <summary>Projection plan for the next page of data; null if not available.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceQueryContinuation`1">
            <summary>Encapsulates a URI that returns the next page of a paged WCF Data Services query result. </summary>
            <typeparam name="T">The type of continuation token.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryContinuation`1.#ctor(System.Uri,Microsoft.OData.Client.ProjectionPlan)">
            <summary>Initializes a new typed instance.</summary>
            <param name="nextLinkUri">URI to next page of data.</param>
            <param name="plan">Projection plan for results of next page.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQueryContinuation`1.ElementType">
            <summary>Type of element to be paged over.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceResponsePreference">
            <summary>Determines whether the client requests that the data service return inserted or updated entity data as an entry in the response message.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceResponsePreference.None">
            <summary>default option, no Prefer header is sent.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceResponsePreference.IncludeContent">
            <summary>Prefer header with value return=representation is sent with all PUT/PATCH/POST requests to entities.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceResponsePreference.NoContent">
            <summary>Prefer header with value return=minimal is sent with all PUT/PATCH/POST requests to entities.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceSaveStream">
            <summary>Stream wrapper for MR POST/PUT which also holds the information if the stream should be closed or not.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceSaveStream.args">
            <summary>Arguments for the request when POST/PUT of the stream is issued.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceSaveStream.stream">
            <summary>The stream we are wrapping.
            Can be null in which case we didn't open it yet.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceSaveStream.close">
            <summary>Set to true if the stream should be closed once we're done with it.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceSaveStream.#ctor(System.IO.Stream,System.Boolean,Microsoft.OData.Client.DataServiceRequestArgs)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="close">Should the stream be closed before SaveChanges returns.</param>
            <param name="args">Additional arguments to apply to the request before sending it.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceSaveStream.Close">
            <summary>
            Close the stream if required.
            This is so that callers can simply call this method and don't have to care about the settings.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceSaveStream.Stream">
            <summary>The stream to use.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceSaveStream.Args">
            <summary>
            Arguments to be used for creation of the HTTP request when POST/PUT for the MR is issued.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceStreamLink">
            <summary>Represents the URL of a binary resource stream.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceStreamLink.name">
            <summary>name of the stream whose link needs to be populated.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceStreamLink.selfLink">
            <summary>self link for the stream.</summary>
            <remarks>This should always be an absolute uri, if specified. If the payload contains an relative uri,
            we always use the context base uri to convert this into an absolute uri.</remarks>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceStreamLink.editLink">
            <summary>edit link for the stream.</summary>
            <remarks>This should always be an absolute uri, if specified. If the payload contains an relative uri,
            we always use the context base uri to convert this into an absolute uri.</remarks>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceStreamLink.contentType">
            <summary>content type of the stream.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceStreamLink.etag">
            <summary>etag for the stream.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceStreamLink.#ctor(System.String)">
            <summary>
            Internal constructor to be used by the projection plan compiler, so that we capture the ri
            </summary>
            <param name="name">name of the stream.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceStreamLink.OnPropertyChanged(System.String)">
            <summary>
            One of the properties changed its value
            </summary>
            <param name="propertyName">property name</param>
        </member>
        <member name="E:Microsoft.OData.Client.DataServiceStreamLink.PropertyChanged">
            <summary>
            PropertyChanged Event
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceStreamLink.Name">
            <summary>The name of the binary resource stream.</summary>
            <returns>The name of the binary resource stream.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceStreamLink.SelfLink">
            <summary>The URI that returns the binary resource stream.</summary>
            <returns>The URI of the stream.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceStreamLink.EditLink">
            <summary>Gets the URI used to edit the binary resource stream.</summary>
            <returns>The URI used to edit the stream.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceStreamLink.ContentType">
            <summary>Gets the MIME Content-Type of the binary resource stream. </summary>
            <returns>The Content-Type value for the stream.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceStreamLink.ETag">
            <summary>The eTag value that is used to determine concurrency for a binary resource stream.</summary>
            <returns>The value of the eTag header for the stream.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceTransportException">
            <summary>
            Class to describe errors thrown by transport layer.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceTransportException.state">
            <summary>
            Contains the state for this exception.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceTransportException.#ctor(Microsoft.OData.Core.IODataResponseMessage,System.Exception)">
            <summary>
            Constructs a new instance of DataServiceTransportException.
            </summary>
            <param name="response">ResponseMessage from the exception so that the error payload can be read.</param>
            <param name="innerException">Actual exception that this exception is wrapping.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceTransportException.Response">
            <summary>
            Gets the response message for this exception.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceTransportException.DataServiceWebExceptionSerializationState">
            <summary>
            Contains the state of the exception, used for serialization in security transparent code.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceTransportException.DataServiceWebExceptionSerializationState.System#Runtime#Serialization#ISafeSerializationData#CompleteDeserialization(System.Object)">
            <summary>
            Called when deserialization of the exception is complete.
            </summary>
            <param name="deserialized">The deserialized exception.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceTransportException.DataServiceWebExceptionSerializationState.ResponseMessage">
            <summary>
            Gets or sets the response message for this exception.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DynamicProxyMethodGenerator">
            <summary>
            Generates proxy methods for external callers to call internal methods
            All lambda_methods are considered external. When these methods need
            to access internal resources, a proxy must be used. Otherwise the call
            will fail for partial trust scenario.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DynamicProxyMethodGenerator.dynamicProxyMethods">
            <summary>
            Dynamically generated proxy methods for external callers (lambda_method are external callers)
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DynamicProxyMethodGenerator.GetCallWrapper(System.Reflection.MethodBase,System.Linq.Expressions.Expression[])">
            <summary>
            Builds an expression to best call the specified <paramref name="method"/>.
            </summary>
            <param name="method">The original method or constructor</param>
            <param name="arguments">The arguments with which to call the method.</param>
            <returns>An expression to call the argument method or constructor</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DynamicProxyMethodGenerator.ThisAssemblyCanCreateHostedDynamicMethodsWithSkipVisibility">
            <summary>
            Determines whether this assembly has enough permissions to create
            <see cref="T:System.Reflection.Emit.DynamicMethod"/>s that can be hosted within this assembly
            and also skip visibility checks (access modifier checks) in order to call potentially
            internal user types (e.g., anonymous types).
            </summary>
            <returns>True if this assembly has enough permissions. Otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DynamicProxyMethodGenerator.GetDynamicMethodCallWrapper(System.Reflection.MethodBase,System.Linq.Expressions.Expression[])">
            <summary>
            Build a externally visible <see cref="T:System.Reflection.Emit.DynamicMethod"/> to call the argument method.
            </summary>
            <param name="method">The original method or constructor</param>
            <param name="arguments">The arguments with which to call the method.</param>
            <returns>An expression to call the argument method or constructor</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DynamicProxyMethodGenerator.CreateDynamicMethod(System.String,System.Type,System.Type[])">
            <summary>
            Create a new dynamic method
            </summary>
            <param name="name">the name</param>
            <param name="returnType">the return type</param>
            <param name="parameterTypes">the parameter types</param>
            <returns>a new instance of dynamic method</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DynamicProxyMethodGenerator.WrapOriginalMethodWithExpression(System.Reflection.MethodBase,System.Linq.Expressions.Expression[])">
            <summary>
            Wraps the specified <see cref="T:System.Reflection.MethodBase"/> in an expression that invokes it.
            </summary>
            <param name="method">The method to wrap in an expression.</param>
            <param name="arguments">The arguments with which to invoke the <paramref name="method"/>.</param>
            <returns>An expression which invokes the <paramref name="method"/> with the specified <paramref name="arguments"/>.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.EntityTracker">
            <summary>
            context
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityTracker.model">
            <summary>Storage for the client model.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityTracker.entityDescriptors">
            <summary>Set of tracked resources</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityTracker.identityToDescriptor">
            <summary>Set of tracked resources by Identity</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityTracker.bindings">
            <summary>Set of tracked bindings</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityTracker.nextChange">
            <summary>change order</summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.#ctor(Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Creates a new instance of EntityTracker class which tracks all instances of entities and links tracked by the context.
            </summary>
            <param name="maxProtocolVersion">max protocol version that the client understands.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.TryGetEntityDescriptor(System.Object)">
            <summary>Gets the entity descriptor corresponding to a particular entity</summary>
            <param name="entity">Entity for which to find the entity descriptor</param>
            <returns>EntityDescriptor for the <paramref name="entity"/> or null if not found</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.GetEntityDescriptor(System.Object)">
            <summary>
            verify the resource being tracked by context
            </summary>
            <param name="resource">resource</param>
            <returns>The given resource.</returns>
            <exception cref="T:System.InvalidOperationException">if resource is not contained</exception>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.TryGetEntityDescriptor(System.Uri)">
            <summary>
            checks whether there is a tracked entity with the given identity.
            </summary>
            <param name="identity">identity of the entity.</param>
            <returns>returns the entity if the identity matches, otherwise returns null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.AddEntityDescriptor(Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Adds the given entity descriptors to the list of the tracked entity descriptors.
            </summary>
            <param name="descriptor">entity descriptor instance to be added.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.DetachResource(Microsoft.OData.Client.EntityDescriptor)">
            <summary>the work to detach a resource</summary>
            <param name="resource">resource to detach</param>
            <returns>true if detached</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.DetachResourceIdentity(Microsoft.OData.Client.EntityDescriptor)">
            <summary>remove the identity attached to the resource</summary>
            <param name="resource">resource with an identity to detach to detach</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.TryGetLinkDescriptor(System.Object,System.String,System.Object)">
            <summary>
            Gets the link descriptor corresponding to a particular link b/w source and target objects
            </summary>
            <param name="source">Source entity</param>
            <param name="sourceProperty">Property of <paramref name="source"/></param>
            <param name="target">Target entity</param>
            <returns>LinkDescriptor for the relationship b/w source and target entities or null if not found</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.AttachLink(System.Object,System.String,System.Object,Microsoft.OData.Client.MergeOption)">
            <summary>
            attach the link with the given source, sourceProperty and target.
            </summary>
            <param name="source">source entity of the link.</param>
            <param name="sourceProperty">name of the property on the source entity.</param>
            <param name="target">target entity of the link.</param>
            <param name="linkMerge">merge option to be used to merge the link if there is an existing link.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.DetachReferenceLink(System.Object,System.String,System.Object,Microsoft.OData.Client.MergeOption)">
            <summary>
            find and detach link for reference property
            </summary>
            <param name="source">source entity</param>
            <param name="sourceProperty">source entity property name for target entity</param>
            <param name="target">target entity</param>
            <param name="linkMerge">link merge option</param>
            <returns>true if found and not removed</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.AddLink(Microsoft.OData.Client.LinkDescriptor)">
            <summary>
            Add the given link to the link descriptor collection
            </summary>
            <param name="linkDescriptor">link descriptor to add</param>
            <exception cref="T:System.InvalidOperationException">throws argument exception if the link already exists</exception>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.TryRemoveLinkDescriptor(Microsoft.OData.Client.LinkDescriptor)">
            <summary>
            Remove the link from the list of tracked link descriptors.
            </summary>
            <param name="linkDescriptor">link to be removed.</param>
            <returns>true if the link was tracked and now removed, otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.GetLinks(System.Object,System.String)">
            <summary>
            get the related links ignoring target entity
            </summary>
            <param name="source">source entity</param>
            <param name="sourceProperty">source entity's property</param>
            <returns>enumerable of related ends</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.DetachExistingLink(Microsoft.OData.Client.LinkDescriptor,System.Boolean)">
            <summary>Detach existing link</summary>
            <param name="existingLink">link to detach</param>
            <param name="targetDelete">true if target is being deleted, false otherwise</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.AttachIdentity(Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.MergeOption)">
            <summary>response materialization has an identity to attach to the inserted object</summary>
            <param name="entityDescriptorFromMaterializer">entity descriptor containing all the information about the entity from the response.</param>
            <param name="metadataMergeOption">mergeOption based on which EntityDescriptor will be merged.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.AttachLocation(System.Object,System.Uri,System.Uri)">
            <summary>use location from header to generate initial edit and identity</summary>
            <param name="entity">entity in added state</param>
            <param name="identity">identity as specified in the response header - location header or OData-EntityId header.</param>
            <param name="editLink">editlink as specified in the response header - location header.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.InternalAttachEntityDescriptor(Microsoft.OData.Client.EntityDescriptor,System.Boolean)">
            <summary>
            Attach entity into the context in the Unchanged state.
            </summary>
            <param name="entityDescriptorFromMaterializer">entity descriptor from the response</param>
            <param name="failIfDuplicated">fail for public api else change existing relationship to unchanged</param>
            <remarks>Caller should validate descriptor instance.</remarks>
            <returns>The attached descriptor, if one already exists in the context and failIfDuplicated is set to false, then the existing instance is returned</returns>
            <exception cref="T:System.InvalidOperationException">if entity is already being tracked by the context</exception>
            <exception cref="T:System.InvalidOperationException">if identity is pointing to another entity</exception>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.TryGetEntity(System.Uri,Microsoft.OData.Client.EntityStates@)">
            <summary>
            Find tracked entity by its resourceUri and update its etag.
            </summary>
            <param name="resourceUri">resource id</param>
            <param name="state">state of entity</param>
            <returns>entity if found else null</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.IncrementChange(Microsoft.OData.Client.Descriptor)">
            <summary>
            increment the resource change for sorting during submit changes
            </summary>
            <param name="descriptor">the resource to update the change order</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.EnsureIdentityToResource">
            <summary>create this.identityToResource when necessary</summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.EnsureLinkBindings">
            <summary>create this.bindings when necessary</summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTracker.ValidateDuplicateIdentity(System.Uri,Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Ensure an identity is unique and does not point to another resource
            </summary>
            <param name="identity">The identity</param>
            <param name="descriptor">The entity descriptor</param>
        </member>
        <member name="P:Microsoft.OData.Client.EntityTracker.Links">
            <summary>
            Returns a collection of all the links (ie. associations) currently being tracked by the context.
            If no links are being tracked, a collection with 0 elements is returned.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityTracker.Entities">
            <summary>
            Returns a collection of all the resources currently being tracked by the context.
            If no resources are being tracked, a collection with 0 elements is returned.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.FunctionDescriptor">
            <summary> Holds information about a ServiceFunction. </summary>
        </member>
        <member name="T:Microsoft.OData.Client.InternalODataRequestMessage">
            <summary>
            This is a just a pass through implementation of IODataRequestMessage. This class is used
            for wrapping the inner batch requests or in silverlight when we are using the
            non-silverlight http stack, we need to fire IODataRequestMessage which throws
            when GetStream is called.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.InternalODataRequestMessage.requestMessage">
            <summary>
            IODataRequestMessage implementation that this class wraps.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.InternalODataRequestMessage.allowGetStream">
            <summary>
            Boolean flag to allow calls to GetStream() on this instance
            We want to allow this because WritingRequest and ReadingResponse events on the Windows Phone platform
            requires that we pass a readable stream to user code as arguments.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.InternalODataRequestMessage.cachedRequestStream">
            <summary>
            request stream 
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.InternalODataRequestMessage.headers">
            <summary>
            dictionary containing http headers.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.InternalODataRequestMessage.#ctor(Microsoft.OData.Core.IODataRequestMessage,System.Boolean)">
            <summary>
            Creates a new instance of InternalODataRequestMessage.
            </summary>
            <param name="requestMessage">IODataRequestMessage that needs to be wrapped.</param>
            <param name="allowGetStream">boolean flag to allow calls to GetStream() on this instance</param>
        </member>
        <member name="M:Microsoft.OData.Client.InternalODataRequestMessage.GetHeader(System.String)">
            <summary>
            Returns the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <returns>Returns the value of the header with the given name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.InternalODataRequestMessage.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <param name="headerValue">Value of the header.</param>
        </member>
        <member name="M:Microsoft.OData.Client.InternalODataRequestMessage.GetStream">
            <summary>
            Gets the stream to be used to write the request payload.
            </summary>
            <returns>Stream to which the request payload needs to be written.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.InternalODataRequestMessage.Abort">
            <summary>
            Abort the current request.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.InternalODataRequestMessage.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a System.IO.Stream object to use to write data.
            </summary>
            <param name="callback">The System.AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An System.IAsyncResult that references the asynchronous request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.InternalODataRequestMessage.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request for a System.IO.Stream object to use to write data.
            </summary>
            <param name="asyncResult">The pending request for a stream.</param>
            <returns>A System.IO.Stream to use to write request data.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.InternalODataRequestMessage.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
             Begins an asynchronous request to an Internet resource.
            </summary>
            <param name="callback">The System.AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An System.IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.InternalODataRequestMessage.EndGetResponse(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to an Internet resource.
            </summary>
            <param name="asyncResult">The pending request for a response.</param>
            <returns>A System.Net.WebResponse that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.InternalODataRequestMessage.GetResponse">
            <summary>
            Returns a response from an Internet resource.
            </summary>
            <returns>A System.Net.WebResponse that contains the response from the Internet resource.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.InternalODataRequestMessage.Headers">
            <summary>
            Returns the collection of request headers.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.InternalODataRequestMessage.Url">
            <summary>
            Gets or Sets the request url.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.InternalODataRequestMessage.Method">
            <summary>
            Gets or Sets the http method for this request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.InternalODataRequestMessage.Credentials">
            <summary>
            Gets or set the credentials for this request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.InternalODataRequestMessage.Timeout">
            <summary>
            Gets or sets the timeout (in seconds) for this request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.InternalODataRequestMessage.SendChunked">
            <summary>
            Gets or sets a value that indicates whether to send data in segments to the
             Internet resource. 
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.InternalODataRequestMessage.HeaderCollection">
            <summary>
            internal headers dictionary
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.InvokeResponse">
            <summary> Response from an Invoke call. </summary>
        </member>
        <member name="T:Microsoft.OData.Client.OperationResponse">
            <summary>Operation response base class</summary>
        </member>
        <member name="F:Microsoft.OData.Client.OperationResponse.headers">
            <summary>Http headers of the response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.OperationResponse.statusCode">
            <summary>Http status code of the response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.OperationResponse.innerException">
            <summary>exception to throw during get results</summary>
        </member>
        <member name="M:Microsoft.OData.Client.OperationResponse.#ctor(Microsoft.OData.Client.HeaderCollection)">
            <summary>
            constructor
            </summary>
            <param name="headers">HTTP headers</param>
        </member>
        <member name="P:Microsoft.OData.Client.OperationResponse.Headers">
            <summary>When overridden in a derived class, contains the HTTP response headers associated with a single operation.</summary>
            <returns><see cref="T:System.Collections.IDictionary" /> object that contains name value pairs of headers and values.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.OperationResponse.StatusCode">
            <summary>When overridden in a derived class, gets or sets the HTTP response code associated with a single operation.</summary>
            <returns>Integer value that contains response code.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.OperationResponse.Error">
            <summary>Gets error thrown by the operation.</summary>
            <returns>An <see cref="T:System.Exception" /> object that contains the error.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.OperationResponse.HeaderCollection">
            <summary>Http headers of the response.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.InvokeResponse.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Consutrcts an InvokeResponse identical to an OperationResponse. </summary>
            <param name="headers">The HTTP headers.</param>
        </member>
        <member name="T:Microsoft.OData.Client.LinkInfo">
            <summary>Encapsulates information about a link, or relationship, between entities.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LinkInfo.navigationLink">
            <summary>navigation URI to the related entity.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LinkInfo.associationLink">
            <summary>association URI to the related entity.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LinkInfo.name">
            <summary>the navigation property name</summary>
        </member>
        <member name="M:Microsoft.OData.Client.LinkInfo.#ctor(System.String)">
            <summary>
            Creates a LinkInfo with a given properyName
            </summary>
            <param name="propertyName">the name of the navigation property</param>
        </member>
        <member name="P:Microsoft.OData.Client.LinkInfo.Name">
            <summary>Gets the name of the link.</summary>
            <returns>The name of the link.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.LinkInfo.NavigationLink">
            <summary>Gets the URI that is the navigation property representation of the link.</summary>
            <returns>The navigation link URI.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.LinkInfo.AssociationLink">
            <summary>Gets the URI that is the association link.</summary>
            <returns>The URI of the association link.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.LoadPropertyResult">
            <summary>wrapper around loading a property from a response</summary>
        </member>
        <member name="T:Microsoft.OData.Client.QueryResult">
            <summary>
            Wrapper HttpWebRequest &amp; HttWebResponse
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.ServiceRequest">
            <summary>Originating service request</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.RequestInfo">
            <summary>The request info.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.Request">
            <summary>Originating WebRequest</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.reusableAsyncCopyBuffer">
            <summary>reusuable async copy buffer</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.requestContentStream">
            <summary>content to write to request stream</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.responseMessage">
            <summary>web response, closed when completed</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.responseInfo">
            <summary>Response info once it's available</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.asyncStreamCopyBuffer">
            <summary>buffer when copying async stream to response stream cache</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.outputResponseStream">
            <summary>response stream, returned to other parts of the system</summary>
            <remarks>with async, the asyncResponseStream is copied into this stream</remarks>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.contentType">
            <summary>copy of HttpWebResponse.ContentType</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.contentLength">
            <summary>copy of HttpWebResponse.ContentLength</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.statusCode">
            <summary>copy of HttpWebResponse.StatusCode</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.responseStreamOwner">
            <summary>
            does this own the response stream or does the container of this QueryAsyncResult?
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryResult.usingBuffer">
            <summary>
            if the BeginRead has been called with asyncStreamCopyBuffer, but EndRead has not.
            do not return the buffer to general pool if any question of it being in use.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.#ctor(System.Object,System.String,Microsoft.OData.Client.DataServiceRequest,Microsoft.OData.Client.ODataRequestMessageWrapper,Microsoft.OData.Client.RequestInfo,System.AsyncCallback,System.Object)">
            <summary>constructor</summary>
            <param name="source">source object of async request</param>
            <param name="method">async method name on source object</param>
            <param name="serviceRequest">Originating serviceRequest</param>
            <param name="request">Originating WebRequest</param>
            <param name="requestInfo">The request info of the originating request.</param>
            <param name="callback">user callback</param>
            <param name="state">user state</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.#ctor(System.Object,System.String,Microsoft.OData.Client.DataServiceRequest,Microsoft.OData.Client.ODataRequestMessageWrapper,Microsoft.OData.Client.RequestInfo,System.AsyncCallback,System.Object,Microsoft.OData.Client.ContentStream)">
            <summary>constructor</summary>
            <param name="source">source object of async request</param>
            <param name="method">async method name on source object</param>
            <param name="serviceRequest">Originating serviceRequest</param>
            <param name="request">Originating WebRequest</param>
            <param name="requestInfo">The request info of the originating request.</param>
            <param name="callback">user callback</param>
            <param name="state">user state</param>
            <param name="requestContentStream">the stream containing the request data.</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.EndExecuteQuery``1(System.Object,System.String,System.IAsyncResult)">
            <summary>
            Ends the asynchronous query request.
            </summary>
            <typeparam name="TElement">Element type of the result.</typeparam>
            <param name="source">Source object of async request.</param>
            <param name="method">async method name.</param>
            <param name="asyncResult">The asyncResult being ended.</param>
            <returns>Data service response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.GetResponseStream">
            <summary>wrapper for HttpWebResponse.GetResponseStream</summary>
            <returns>stream</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.BeginExecuteQuery">
            <summary>start the asynchronous request</summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.ExecuteQuery">
            <summary>Synchronous web request</summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.GetResponse``1(Microsoft.OData.Client.MaterializeAtom)">
            <summary>
            Returns the response for the request.
            </summary>
            <param name="results">materialized results for the request.</param>
            <typeparam name="TElement">element type of the results.</typeparam>
            <returns>returns the instance of QueryOperationResponse containing the response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.GetResponseWithType(Microsoft.OData.Client.MaterializeAtom,System.Type)">
            <summary>
            Returns the response for the request.
            </summary>
            <param name="results">materialized results for the request.</param>
            <param name="elementType">element type of the results.</param>
            <returns>returns the instance of QueryOperationResponse containing the response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.GetMaterializer(Microsoft.OData.Client.ProjectionPlan)">
            <summary>
            Create materializer on top of response stream
            </summary>
            <param name="plan">Precompiled projection plan (possibly null).</param>
            <returns>A materializer instance ready to deserialize ther result</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.ProcessResult``1(Microsoft.OData.Client.ProjectionPlan)">
            <summary>
            Processes the result for successfull request and produces the actual result of the request.
            </summary>
            <typeparam name="TElement">Element type of the result.</typeparam>
            <param name="plan">The plan to use for the projection, if available in precompiled form.</param>
            <returns>A instance of QueryResponseResult created on top of of the request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.CompletedRequest">
            <summary>cleanup work to do once the request has completed</summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.CreateResponseInfo">
            <summary>
            Create the ResponseInfo.
            </summary>
            <returns>ResponseInfo object.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.GetAsyncResponseStreamCopy">
            <summary>get stream which of copy buffer (via response stream) will be copied into</summary>
            <returns>writtable stream, happens before GetAsyncResponseStreamCopyBuffer</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.GetAsyncResponseStreamCopyBuffer">
            <summary>get buffer which response stream will be copied into</summary>
            <returns>writtable stream</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.PutAsyncResponseStreamCopyBuffer(System.Byte[])">
            <summary>returning a buffer after being done with it</summary>
            <param name="buffer">buffer to return</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.SetHttpWebResponse(Microsoft.OData.Core.IODataResponseMessage)">
            <summary>set the http web response</summary>
            <param name="response">response object</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.HandleCompleted(Microsoft.OData.Client.BaseAsyncResult.PerRequest)">
            <summary>Disposes the request object if it is not null. Invokes the user callback</summary>
            <param name="pereq">the request object</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.AsyncEndGetResponse(System.IAsyncResult)">
            <summary>handle request.BeginGetResponse with request.EndGetResponse and then copy response stream</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.CompleteCheck(Microsoft.OData.Client.BaseAsyncResult.PerRequest,Microsoft.OData.Client.InternalError)">
            <summary>verify non-null and not completed</summary>
            <param name="pereq">async result</param>
            <param name="errorcode">error code if null or completed</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.ReadResponseStream(Microsoft.OData.Client.BaseAsyncResult.AsyncStateBag)">
            <summary>
            Make async calls to read the response stream.
            </summary>
            <param name="asyncStateBag">the state containing the information about the asynchronous operation.</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.AsyncEndRead(System.IAsyncResult)">
            <summary>handle responseStream.BeginRead with responseStream.EndRead</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryResult.CreateMaterializer(Microsoft.OData.Client.ProjectionPlan,Microsoft.OData.Core.ODataPayloadKind)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.OData.Client.MaterializeAtom"/> for the given plan.
            </summary>
            <param name="plan">The projection plan.</param>
            <param name="payloadKind">expected payload kind.</param>
            <returns>A new materializer instance</returns>
        </member>
        <member name="P:Microsoft.OData.Client.QueryResult.ContentLength">
            <summary>HttpWebResponse.ContentLength</summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryResult.ContentType">
            <summary>HttpWebResponse.ContentType</summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryResult.StatusCode">
            <summary>HttpWebResponse.StatusCode</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LoadPropertyResult.entity">
            <summary>entity whose property is being loaded</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LoadPropertyResult.plan">
            <summary>Projection plan for loading results; possibly null.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LoadPropertyResult.propertyName">
            <summary>name of the property on the entity that is being loaded</summary>
        </member>
        <member name="M:Microsoft.OData.Client.LoadPropertyResult.#ctor(System.Object,System.String,Microsoft.OData.Client.DataServiceContext,Microsoft.OData.Client.ODataRequestMessageWrapper,System.AsyncCallback,System.Object,Microsoft.OData.Client.DataServiceRequest,Microsoft.OData.Client.ProjectionPlan,System.Boolean)">
            <summary>constructor</summary>
            <param name="entity">entity</param>
            <param name="propertyName">name of collection or reference property to load</param>
            <param name="context">Originating context</param>
            <param name="request">Originating WebRequest</param>
            <param name="callback">user callback</param>
            <param name="state">user state</param>
            <param name="dataServiceRequest">request object.</param>
            <param name="plan">Projection plan for materialization; possibly null.</param>
            <param name="isContinuation">Whether this request is a continuation request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.LoadPropertyResult.LoadProperty">
            <summary>
            loading a property from a response
            </summary>
            <returns>QueryOperationResponse instance containing information about the response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LoadPropertyResult.CreateResponseInfo">
            <summary>
            Creates the ResponseInfo object.
            </summary>
            <returns>ResponseInfo object.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LoadPropertyResult.ReadByteArrayWithContentLength(System.IO.Stream,System.Int32)">
            <summary>
            Reads the data from the response stream into a buffer using the content length.
            </summary>
            <param name="responseStream">Response stream.</param>
            <param name="totalLength">Length of data to read.</param>
            <returns>byte array containing read data.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LoadPropertyResult.ReadByteArrayChunked(System.IO.Stream)">
            <summary>Reads the data from the response stream in chunks.</summary>
            <param name="responseStream">Response stream.</param>
            <returns>byte array containing read data.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LoadPropertyResult.ReadPropertyFromAtom(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation)">
            <summary>
            Load property data from an ATOM response
            </summary>
            <param name="property">The property being loaded</param>
            <returns>property values as IEnumerable.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LoadPropertyResult.ReadPropertyFromRawData(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation)">
            <summary>
            Load property data form a raw response
            </summary>
            <param name="property">The property being loaded</param>
            <returns>property values as IEnumerable.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer">
            <summary>
            Used to materialize a collection of primitive or complex values from an <see cref="T:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer">
            <summary>
            Used to materialize a value from an <see cref="T:Microsoft.OData.Core.ODataMessageReader"/>.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.SingleResult">
            <summary>Optional field that indicates if we should expect a single result to materialize, as opposed to a collection.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.messageReader">
            <summary>Reader for a message that contains a value or property.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.hasReadValue">
            <summary>Has the value been read.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.#ctor(Microsoft.OData.Core.ODataMessageReader,Microsoft.OData.Client.Materialization.IODataMaterializerContext,System.Type,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The materializer context.</param>
            <param name="expectedType">The expected type.</param>
            <param name="singleResult">The single result.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.ClearLog">
            <summary>Clears the materialization log of activity.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.ApplyLogToContext">
            <summary>Applies the materialization log to the context.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.ReadImplementation">
            <summary>
            Implementation of Read>.
            </summary>
            <returns>
            Return value of Read/>
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.OnDispose">
            <summary>
            Called when IDisposable.Dispose is called.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.ReadWithExpectedType(Microsoft.OData.Edm.IEdmTypeReference,Microsoft.OData.Edm.IEdmTypeReference)">
            <summary>
            Reads a value from the message reader.
            </summary>
            <param name="expectedClientType">The expected client type being materialized into.</param>
            <param name="expectedReaderType">The expected type for the underlying reader.</param>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.CurrentFeed">
            <summary>
            Feed being materialized; possibly null.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.CurrentEntry">
            <summary>
            Entry being materialized; possibly null.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.IsEndOfStream">
            <summary>
            Whether we have finished processing the current data stream.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.CountValue">
            <summary>
            The count tag's value, if requested
            </summary>
            <returns>The count value returned from the server</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.MaterializeEntryPlan">
            <summary>
            Function to materialize an entry and produce a value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.IsDisposed">
            <summary>
            Returns true if the materializer has been disposed
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataMessageReaderMaterializer.Format">
            <summary>
            The format of the response being materialized.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.currentValue">
            <summary>Current value being materialized; possibly null.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.#ctor(Microsoft.OData.Core.ODataMessageReader,Microsoft.OData.Client.Materialization.IODataMaterializerContext,System.Type,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="materializerContext">The materializer context.</param>
            <param name="expectedType">The expected type.</param>
            <param name="singleResult">The single result.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.ReadWithExpectedType(Microsoft.OData.Edm.IEdmTypeReference,Microsoft.OData.Edm.IEdmTypeReference)">
            <summary>
            Reads a value from the message reader.
            </summary>
            <param name="expectedClientType">The expected client type being materialized into.</param>
            <param name="expectedReaderType">The expected type for the underlying reader.</param>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.CurrentValue">
            <summary>
            Current value being materialized; possibly null.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.NonEntityItemsEnumerable">
            <summary>
            Class that wraps the collection reader to get values from the collection reader
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.NonEntityItemsEnumerable.collectionReader">
            <summary>
            Collection Reader
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.NonEntityItemsEnumerable.#ctor(Microsoft.OData.Core.ODataCollectionReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.NonEntityItemsEnumerable"/> class.
            </summary>
            <param name="collectionReader">The collection reader.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.NonEntityItemsEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.NonEntityItemsEnumerable.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.NonEntityItemsEnumerable.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataCollectionMaterializer.NonEntityItemsEnumerable.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer">
            <summary>
            Materializes entities from a sequence of ODataEntry objects
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.format">
            <summary>The format of the response being materialized.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.feedEntries">
            <summary>The entries enumerator</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.isFinished">
            <summary>Is the enumerator finished.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.#ctor(System.Collections.Generic.IEnumerable{Microsoft.OData.Core.ODataEntry},Microsoft.OData.Client.Materialization.IODataMaterializerContext,Microsoft.OData.Client.Materialization.EntityTrackingAdapter,Microsoft.OData.Client.QueryComponents,System.Type,Microsoft.OData.Client.ProjectionPlan,Microsoft.OData.Core.ODataFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer"/> class.
            </summary>
            <param name="entries">The entries.</param>
            <param name="materializerContext">The materializer context.</param>
            <param name="entityTrackingAdapter">The entity tracking adapter.</param>
            <param name="queryComponents">The query components.</param>
            <param name="expectedType">The expected type.</param>
            <param name="materializeEntryPlan">The materialize entry plan.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.ReadNextFeedOrEntry">
            <summary>
            Reads the next feed or entry.
            </summary>
            <returns>
            True if an entry was read, otherwise false
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.OnDispose">
            <summary>
            Called when IDisposable.Dispose is called.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.CurrentFeed">
            <summary>
            Feed being materialized; possibly null.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.CurrentEntry">
            <summary>
            Entry being materialized; possibly null.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.CountValue">
            <summary>
            The count tag's value, if requested
            </summary>
            <returns>The count value returned from the server</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.IsCountable">
            <summary>
            Returns true if the underlying object used for counting is available
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.IsEndOfStream">
            <summary>
            Whether we have finished processing the current data stream.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.IsDisposed">
            <summary>
            Returns true if the materializer has been disposed
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataEntriesEntityMaterializer.Format">
            <summary>
            The format of the response being materialized.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataEntityMaterializerInvoker">
            <summary>
            Use this class to invoke projection methods from <see cref="T:Microsoft.OData.Client.Materialization.ODataEntityMaterializer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializerInvoker.EnumerateAsElementType``1(System.Collections.IEnumerable)">
            <summary>Enumerates casting each element to a type.</summary>
            <typeparam name="T">Element type to enumerate over.</typeparam>
            <param name="source">Element source.</param>
            <returns>
            An IEnumerable&lt;T&gt; that iterates over the specified <paramref name="source"/>.
            </returns>
            <remarks>
            This method should be unnecessary with .NET 4.0 covariance support.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializerInvoker.ListAsElementType``2(System.Object,System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a list to a target element type.</summary>
            <param name="materializer">Materializer used to flow link tracking.</param>
            <typeparam name="T">Element type to enumerate over.</typeparam>
            <typeparam name="TTarget">Element type for list.</typeparam>
            <param name="source">Element source.</param>
            <returns>
            An IEnumerable&lt;T&gt; that iterates over the specified <paramref name="source"/>.
            </returns>
            <remarks>
            This method should be unnecessary with .NET 4.0 covariance support.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializerInvoker.ProjectionCheckValueForPathIsNull(System.Object,System.Type,System.Object)">
            <summary>Checks whether the entity on the specified <paramref name="path"/> is null.</summary>
            <param name="entry">Root entry for paths.</param>
            <param name="expectedType">Expected type for <paramref name="entry"/>.</param>
            <param name="path">Path to pull value for.</param>
            <returns>Whether the specified <paramref name="path"/> is null.</returns>
            <remarks>
            This method will not instantiate entity types on the path.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializerInvoker.ProjectionSelect(System.Object,System.Object,System.Type,System.Type,System.Object,System.Func{System.Object,System.Object,System.Type,System.Object})">
            <summary>Provides support for Select invocations for projections.</summary>
            <param name="materializer">Materializer under which projection is taking place.</param>
            <param name="entry">Root entry for paths.</param>
            <param name="expectedType">Expected type for <paramref name="entry"/>.</param>
            <param name="resultType">Expected result type.</param>
            <param name="path">Path to traverse.</param>
            <param name="selector">Selector callback.</param>
            <returns>An enumerable with the select results.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializerInvoker.ProjectionGetEntry(System.Object,System.String)">
            <summary>Provides support for getting payload entries during projections.</summary>
            <param name="entry">Entry to get sub-entry from.</param>
            <param name="name">Name of sub-entry.</param>
            <returns>The sub-entry (never null).</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializerInvoker.ProjectionInitializeEntity(System.Object,System.Object,System.Type,System.Type,System.String[],System.Func{System.Object,System.Object,System.Type,System.Object}[])">
            <summary>Initializes a projection-driven entry (with a specific type and specific properties).</summary>
            <param name="materializer">Materializer under which projection is taking place.</param>
            <param name="entry">Root entry for paths.</param>
            <param name="expectedType">Expected type for <paramref name="entry"/>.</param>
            <param name="resultType">Expected result type.</param>
            <param name="properties">Properties to materialize.</param>
            <param name="propertyValues">Functions to get values for functions.</param>
            <returns>The initialized entry.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializerInvoker.ProjectionValueForPath(System.Object,System.Object,System.Type,System.Object)">
            <summary>Projects a simple value from the specified <paramref name="path"/>.</summary>
            <param name="materializer">Materializer under which projection is taking place.</param>
            <param name="entry">Root entry for paths.</param>
            <param name="expectedType">Expected type for <paramref name="entry"/>.</param>
            <param name="path">Path to pull value for.</param>
            <returns>The value for the specified <paramref name="path"/>.</returns>
            <remarks>
            This method will not instantiate entity types, except to satisfy requests
            for payload-driven feeds or leaf entities.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializerInvoker.DirectMaterializePlan(System.Object,System.Object,System.Type)">
            <summary>Materializes an entry with no special selection.</summary>
            <param name="materializer">Materializer under which materialization should take place.</param>
            <param name="entry">Entry with object to materialize.</param>
            <param name="expectedEntryType">Expected type for the entry.</param>
            <returns>The materialized instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataEntityMaterializerInvoker.ShallowMaterializePlan(System.Object,System.Object,System.Type)">
            <summary>Materializes an entry without including in-lined expanded links.</summary>
            <param name="materializer">Materializer under which materialization should take place.</param>
            <param name="entry">Entry with object to materialize.</param>
            <param name="expectedEntryType">Expected type for the entry.</param>
            <returns>The materialized instance.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataItemExtensions">
            <summary>
            Extension methods for ODataItems
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataItemExtensions.GetMaterializedValue(Microsoft.OData.Core.ODataProperty)">
            <summary>
            Gets the materialized value.
            </summary>
            <param name="property">The property.</param>
            <returns>The materialized value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataItemExtensions.HasMaterializedValue(Microsoft.OData.Core.ODataProperty)">
            <summary>
            Determines whether a value has been materialized.
            </summary>
            <param name="property">The property.</param>
            <returns><c>true</c> if the value has been materialized; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataItemExtensions.SetMaterializedValue(Microsoft.OData.Core.ODataProperty,System.Object)">
            <summary>
            Sets the materialized value.
            </summary>
            <param name="property">The property.</param>
            <param name="materializedValue">The materialized value.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataItemExtensions.GetMaterializedValue(Microsoft.OData.Core.ODataComplexValue)">
            <summary>
            Gets the materialized value.
            </summary>
            <param name="complexValue">The complex value.</param>
            <returns>The materialized value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataItemExtensions.HasMaterializedValue(Microsoft.OData.Core.ODataComplexValue)">
            <summary>
            Determines whether a value has been materialized.
            </summary>
            <param name="complexValue">The complex value.</param>
            <returns><c>true</c> if the value has been materialized; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataItemExtensions.SetMaterializedValue(Microsoft.OData.Core.ODataComplexValue,System.Object)">
            <summary>
            Sets the materialized value.
            </summary>
            <param name="complexValue">The complex value.</param>
            <param name="materializedValue">The materialized value.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataItemExtensions.GetMaterializedValueCore(Microsoft.OData.Core.ODataAnnotatable)">
            <summary>
            Gets the materialized value.
            </summary>
            <param name="annotatableObject">The annotatable object.</param>
            <returns>The materialized value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataItemExtensions.HasMaterializedValueCore(Microsoft.OData.Core.ODataAnnotatable)">
            <summary>
            Determines whether a value has been materialized.
            </summary>
            <param name="annotatableObject">The annotatable object.</param>
            <returns><c>true</c> if the value has been materialized; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataItemExtensions.SetMaterializedValueCore(Microsoft.OData.Core.ODataAnnotatable,System.Object)">
            <summary>
            Sets the materialized value.
            </summary>
            <param name="annotatableObject">The annotatable object.</param>
            <param name="materializedValue">The materialized value.</param>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataItemExtensions.MaterializerPropertyValue">
            <summary>
            Annotation class for the materialized value
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataItemExtensions.MaterializerPropertyValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataLinksMaterializer">
            <summary>
            Materializes from $ref
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataLinksMaterializer.links">
            <summary>The links value read from the message.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataLinksMaterializer.#ctor(Microsoft.OData.Core.ODataMessageReader,Microsoft.OData.Client.Materialization.IODataMaterializerContext,System.Type,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataLinksMaterializer"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="materializerContext">The materializer context.</param>
            <param name="expectedType">The expected type.</param>
            <param name="singleResult">The single result.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataLinksMaterializer.ReadWithExpectedType(Microsoft.OData.Edm.IEdmTypeReference,Microsoft.OData.Edm.IEdmTypeReference)">
            <summary>
            Reads from message reader.
            </summary>
            <param name="expectedClientType">The expected client type being materialized into.</param>
            <param name="expectedReaderType">The expected type for the underlying reader.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataLinksMaterializer.ReadLinks">
            <summary>
            Reads the links.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataLinksMaterializer.CountValue">
            <summary>
            Gets the count value.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataLinksMaterializer.CurrentValue">
            <summary>
            Current value being materialized; possibly null.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataLinksMaterializer.IsCountable">
            <summary>
            Returns true if the underlying object used for counting is available
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataPropertyMaterializer">
            <summary>
            Used to materialize a property from an <see cref="T:Microsoft.OData.Core.ODataMessageReader"/>.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataPropertyMaterializer.currentValue">
            <summary>Current value being materialized; possibly null.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataPropertyMaterializer.#ctor(Microsoft.OData.Core.ODataMessageReader,Microsoft.OData.Client.Materialization.IODataMaterializerContext,System.Type,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataPropertyMaterializer"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="materializerContext">The materializer context.</param>
            <param name="expectedType">The expected type.</param>
            <param name="singleResult">The single result.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataPropertyMaterializer.ReadWithExpectedType(Microsoft.OData.Edm.IEdmTypeReference,Microsoft.OData.Edm.IEdmTypeReference)">
            <summary>
            Reads a value from the message reader.
            </summary>
            <param name="expectedClientType">The expected client type being materialized into.</param>
            <param name="expectedReaderType">The expected type for the underlying reader.</param>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataPropertyMaterializer.CurrentValue">
            <summary>
            Current value being materialized; possibly null.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.ODataValueMaterializer">
            <summary>
            Used to materialize a value from an <see cref="T:Microsoft.OData.Core.ODataMessageReader"/>.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.ODataValueMaterializer.currentValue">
            <summary>Current value being materialized; possibly null.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataValueMaterializer.#ctor(Microsoft.OData.Core.ODataMessageReader,Microsoft.OData.Client.Materialization.IODataMaterializerContext,System.Type,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.Materialization.ODataValueMaterializer"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="materializerContext">The materializer context.</param>
            <param name="expectedType">The expected type.</param>
            <param name="singleResult">Is a single result expected.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.ODataValueMaterializer.ReadWithExpectedType(Microsoft.OData.Edm.IEdmTypeReference,Microsoft.OData.Edm.IEdmTypeReference)">
            <summary>
            Reads a value from the message reader.
            </summary>
            <param name="expectedClientType">The expected client type being materialized into.</param>
            <param name="expectedReaderType">The expected type for the underlying reader.</param>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.ODataValueMaterializer.CurrentValue">
            <summary>
            Current value being materialized; possibly null.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.MemberAssignmentAnalysis">
            <summary>
            Use this class to analyze a member assignment and figure out the 
            target path for a member-init on an entity type.
            </summary>
            <remarks>
            This class will also detect cases in which the assignment
            expression refers to cases which we shouldn't handle during
            materialization, such as references to multiple entity types
            as sources (or refering to no source at all).
            </remarks>
        </member>
        <member name="T:Microsoft.OData.Client.ALinqExpressionVisitor">
            <summary>
            base vistor class for walking an expression tree bottom up.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Main visit method for ALinqExpressionVisitor
            </summary>
            <param name="exp">The expression to visit</param>
            <returns>The visited expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            MemberBinding visit method
            </summary>
            <param name="binding">The MemberBinding expression to visit</param>
            <returns>The visited MemberBinding expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            ElementInit visit method
            </summary>
            <param name="initializer">The ElementInit expression to visit</param>
            <returns>The visited ElementInit expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            UnaryExpression visit method
            </summary>
            <param name="u">The UnaryExpression expression to visit</param>
            <returns>The visited UnaryExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            BinaryExpression visit method
            </summary>
            <param name="b">The BinaryExpression expression to visit</param>
            <returns>The visited BinaryExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            TypeBinaryExpression visit method
            </summary>
            <param name="b">The TypeBinaryExpression expression to visit</param>
            <returns>The visited TypeBinaryExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            ConstantExpression visit method
            </summary>
            <param name="c">The ConstantExpression expression to visit</param>
            <returns>The visited ConstantExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            ConditionalExpression visit method
            </summary>
            <param name="c">The ConditionalExpression expression to visit</param>
            <returns>The visited ConditionalExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            ParameterExpression visit method
            </summary>
            <param name="p">The ParameterExpression expression to visit</param>
            <returns>The visited ParameterExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            MemberExpression visit method
            </summary>
            <param name="m">The MemberExpression expression to visit</param>
            <returns>The visited MemberExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            MethodCallExpression visit method
            </summary>
            <param name="m">The MethodCallExpression expression to visit</param>
            <returns>The visited MethodCallExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Expression list visit method
            </summary>
            <param name="original">The expression list to visit</param>
            <returns>The visited expression list</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            MemberAssignment visit method
            </summary>
            <param name="assignment">The MemberAssignment to visit</param>
            <returns>The visited MemberAssignmentt</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            MemberMemberBinding visit method
            </summary>
            <param name="binding">The MemberMemberBinding to visit</param>
            <returns>The visited MemberMemberBinding</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            MemberListBinding visit method
            </summary>
            <param name="binding">The MemberListBinding to visit</param>
            <returns>The visited MemberListBinding</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Binding List visit method
            </summary>
            <param name="original">The Binding list to visit</param>
            <returns>The visited Binding list</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            ElementInit expression list visit method
            </summary>
            <param name="original">The ElementInit expression list  to visit</param>
            <returns>The visited ElementInit expression list </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            LambdaExpression visit method
            </summary>
            <param name="lambda">The LambdaExpression to visit</param>
            <returns>The visited LambdaExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            NewExpression visit method
            </summary>
            <param name="nex">The NewExpression to visit</param>
            <returns>The visited NewExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            MemberInitExpression visit method
            </summary>
            <param name="init">The MemberInitExpression to visit</param>
            <returns>The visited MemberInitExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            ListInitExpression visit method
            </summary>
            <param name="init">The ListInitExpression to visit</param>
            <returns>The visited ListInitExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            NewArrayExpression visit method
            </summary>
            <param name="na">The NewArrayExpression to visit</param>
            <returns>The visited NewArrayExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ALinqExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            InvocationExpression visit method
            </summary>
            <param name="iv">The InvocationExpression to visit</param>
            <returns>The visited InvocationExpression</returns>
        </member>
        <member name="F:Microsoft.OData.Client.MemberAssignmentAnalysis.EmptyExpressionArray">
            <summary>Empty expression array; immutable.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MemberAssignmentAnalysis.entity">
            <summary>Entity in scope for the lambda that's providing the parameter.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MemberAssignmentAnalysis.incompatibleAssignmentsException">
            <summary>A non-null value when incompatible paths were found for an entity initializer.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MemberAssignmentAnalysis.multiplePathsFound">
            <summary>Whether multiple paths were found for this analysis.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MemberAssignmentAnalysis.pathFromEntity">
            <summary>Path traversed from the entry field.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.#ctor(System.Linq.Expressions.Expression)">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.MemberAssignmentAnalysis"/> instance.</summary>
            <param name="entity">Entity in scope for the lambda that's providing the parameter.</param>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.Analyze(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Analyzes an assignment from a member-init expression.</summary>
            <param name="entityInScope">Entity in scope for the lambda that's providing the parameter.</param>
            <param name="assignmentExpression">The expression to analyze.</param>
            <returns>The analysis results.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.CheckCompatibleAssignments(System.Type,Microsoft.OData.Client.MemberAssignmentAnalysis@)">
            <summary>
            Checks whether the this and a <paramref name="previous"/>
            paths for assignments are compatible.
            </summary>
            <param name="targetType">Type being initialized.</param>
            <param name="previous">Previously seen member accesses (null if this is the first).</param>
            <returns>An exception to be thrown if assignments are not compatible; null otherwise.</returns>
            <remarks>
            This method does not set the IncompatibleAssignmentsException property on either
            analysis instance.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.Visit(System.Linq.Expressions.Expression)">
            <summary>Visits the specified <paramref name="expression"/>.</summary>
            <param name="expression">Expression to visit.</param>
            <returns>The visited expression.</returns>
            <remarks>This method is overriden to short-circuit analysis once an error is found.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>Visits a conditional expression.</summary>
            <param name="c">Expression to visit.</param>
            <returns>The same expression.</returns>
            <remarks>
            There are three expressions of interest: the Test, the IfTrue 
            branch, and the IfFalse branch. If this is a NullCheck expression,
            then we can traverse the non-null branch, which will be the
            correct path of the resulting value.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>Parameter visit method.</summary>
            <param name="p">Parameter to visit.</param>
            <returns>The same expression.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            NewExpression visit method
            </summary>
            <param name="nex">The NewExpression to visit</param>
            <returns>The visited NewExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>Visits a nested member init.</summary>
            <param name="init">Expression to visit.</param>
            <returns>The same expression.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>Visits a member access expression.</summary>
            <param name="m">Access to visit.</param>
            <returns>The same expression.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>Visits a method call expression.</summary>
            <param name="call">Method call to visit.</param>
            <returns>The same call.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.GetExpressionsBeyondTargetEntity">
            <summary>Gets the expressions that go beyond the last entity.</summary>
            <returns>An array of member expressions coming after the last entity.</returns>
            <remarks>Currently a single member access is supported.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.GetExpressionsToTargetEntity">
            <summary>Gets the expressions that "walk down" to the last entity, ignoring the last expression.</summary>
            <returns>An array of member expressions down to, but excluding, the last entity.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.GetExpressionsToTargetEntity(System.Boolean)">
            <summary>Gets the expressions that "walk down" to the last entity.</summary>
            <param name="ignoreLastExpression">whether to ignore the last expression or not.</param>
            <returns>An array of member expressions down to the last entity.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.CheckCompatibleAssignments(System.Type,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression[])">
            <summary>
            Checks whether the <paramref name="previous"/> and <paramref name="candidate"/>
            paths for assignments are compatible.
            </summary>
            <param name="targetType">Type being initialized.</param>
            <param name="previous">Previously seen member accesses.</param>
            <param name="candidate">Member assignments under evaluate.</param>
            <returns>An exception to be thrown if assignments are not compatible; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.CheckCompatibleAssignmentsFail(System.Type,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression[])">
            <summary>Creates an exception to be used when CheckCompatibleAssignment fails.</summary>
            <param name="targetType">Type being initialized.</param>
            <param name="previous">Previously seen member accesses.</param>
            <param name="candidate">Member assignments under evaluate.</param>
            <returns>A new exception with diagnostic information.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MemberAssignmentAnalysis.CheckCompatibleAssigmentExpression(System.Linq.Expressions.Expression,System.Type,Microsoft.OData.Client.MemberAssignmentAnalysis@)">
            <summary>
            If there is a MemberInitExpression 'new Person { ID = p.ID, Friend = new Person { ID = p.Friend.ID }}'
            or a NewExpression 'new { ID = p.ID, Friend = new { ID = p.Friend.ID }}',
            this method validates against the RHS of the member assigment, the expression "p.ID" for example.
            </summary>
            <param name="expressionToAssign">The expression to validate.</param>
            <param name="initType">Type of the MemberInit or the New expression.</param>
            <param name="previousNested">The outter nested initializer of the current initializer we are checking.</param>
            <returns>true if the expression to assign is fine; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.MemberAssignmentAnalysis.IncompatibleAssignmentsException">
            <summary>A non-null value when incompatible paths were found for an entity initializer.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.MemberAssignmentAnalysis.MultiplePathsFound">
            <summary>Whether multiple paths were found during analysis.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ODataMessageReadingHelper">
            <summary>
            Helper class for creating ODataLib readers, settings, and other read-related classes based on an instance of <see cref="T:Microsoft.OData.Client.ResponseInfo"/>.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataMessageReadingHelper.responseInfo">
            <summary>The current response info.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataMessageReadingHelper.#ctor(Microsoft.OData.Client.ResponseInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ODataMessageReadingHelper"/> class.
            </summary>
            <param name="responseInfo">The response info.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataMessageReadingHelper.CreateSettings">
            <summary>
            Create message reader settings for consuming responses.
            </summary>
            <returns>Newly created message reader settings.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataMessageReadingHelper.CreateReader(Microsoft.OData.Core.IODataResponseMessage,Microsoft.OData.Core.ODataMessageReaderSettings)">
            <summary>
            Creates a new the reader for the given response message and settings.
            </summary>
            <param name="responseMessage">The response message.</param>
            <param name="settings">The settings.</param>
            <returns>Newly created message reader.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ODataMessageWritingHelper">
            <summary>
            Helper class for creating ODataLib writers, settings, and other write-related classes based on an instance of <see cref="T:Microsoft.OData.Client.RequestInfo"/>.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataMessageWritingHelper.requestInfo">
            <summary>The current request info.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataMessageWritingHelper.#ctor(Microsoft.OData.Client.RequestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ODataMessageWritingHelper"/> class.
            </summary>
            <param name="requestInfo">The request info.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataMessageWritingHelper.CreateSettings(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create message writer settings for producing requests.
            </summary>
            <param name="isBatchPartRequest">if set to <c>true</c> indicates that this is a part of a batch request.</param>
            <param name="enableAtom">Whether to enable ATOM.</param>
            <param name="odataSimplified">Whether to enable OData Simplified.</param>
            <returns>Newly created message writer settings.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataMessageWritingHelper.CreateWriter(Microsoft.OData.Core.IODataRequestMessage,Microsoft.OData.Core.ODataMessageWriterSettings,System.Boolean)">
            <summary>
            Creates a writer for the given request message and settings.
            </summary>
            <param name="requestMessage">The request message.</param>
            <param name="writerSettings">The writer settings.</param>
            <param name="isParameterPayload">true if the writer is intended to for a parameter payload, false otherwise.</param>
            <returns>Newly created writer.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataMessageWritingHelper.CreateRequestMessage(Microsoft.OData.Client.BuildingRequestEventArgs)">
            <summary>
            Creates a request message with the given arguments.
            </summary>
            <param name="requestMessageArgs">The request message args.</param>
            <returns>Newly created request message.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ODataRequestMessageWrapper">
            <summary>
            IODataRequestMessage interface implementation.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataRequestMessageWrapper.requestMessage">
            <summary>Request Url.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataRequestMessageWrapper.requestInfo">
            <summary>RequestInfo instance.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.#ctor(Microsoft.OData.Client.DataServiceClientRequestMessage,Microsoft.OData.Client.RequestInfo,Microsoft.OData.Client.Descriptor)">
            <summary>
            Creates a new instance of ODataRequestMessage. This constructor is used for top level requests.
            </summary>
            <param name="requestMessage">RequestMessage that needs to be wrapped.</param>
            <param name="requestInfo">Request Info.</param>
            <param name="descriptor">Descriptor for this request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.CreateBatchPartRequestMessage(Microsoft.OData.Core.ODataBatchWriter,Microsoft.OData.Client.BuildingRequestEventArgs,Microsoft.OData.Client.RequestInfo,System.String)">
            <summary>
            Create a request message for a batch part from the batch writer. This method copies request headers
            from <paramref name="requestMessageArgs"/> in addition to the method and Uri.
            </summary>
            <param name="batchWriter">ODataBatchWriter instance to build operation message from.</param>
            <param name="requestMessageArgs">RequestMessageArgs for the request.</param>
            <param name="requestInfo">RequestInfo instance.</param>
            <param name="contentId">The Content-ID value to write in ChangeSet head.</param>
            <returns>an instance of ODataRequestMessageWrapper.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.CreateRequestMessageWrapper(Microsoft.OData.Client.BuildingRequestEventArgs,Microsoft.OData.Client.RequestInfo)">
            <summary>
            Create a request message for a non-batch requests and outer $batch request. This method copies request headers
            from <paramref name="requestMessageArgs"/> in addition to the method and Uri.
            </summary>
            <param name="requestMessageArgs">RequestMessageArgs for the request.</param>
            <param name="requestInfo">RequestInfo instance.</param>
            <returns>an instance of ODataRequestMessageWrapper.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.CreateWriter(Microsoft.OData.Core.ODataMessageWriterSettings,System.Boolean)">
            <summary>
            Create ODataMessageWriter given the writer settings.
            </summary>
            <param name="writerSettings">Writer settings.</param>
            <param name="isParameterPayload">true if the writer is intended to for a parameter payload, false otherwise.</param>
            <returns>An instance of ODataMessageWriter.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.Abort">
            <summary>
            Abort the current request.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of an HTTP header.
            </summary>
            <param name="headerName">The name of the header to set.</param>
            <param name="headerValue">The value of the HTTP header or 'null' if the header should be removed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a System.IO.Stream object to use to write data.
            </summary>
            <param name="callback">The System.AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An System.IAsyncResult that references the asynchronous request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request for a System.IO.Stream object to use to write data.
            </summary>
            <param name="asyncResult">The pending request for a stream.</param>
            <returns>A System.IO.Stream to use to write request data.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.SetRequestStream(Microsoft.OData.Client.ContentStream)">
            <summary>
            Sets the request stream.
            </summary>
            <param name="requestStreamContent">The content stream to copy into the request stream.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
             Begins an asynchronous request to an Internet resource.
            </summary>
            <param name="callback">The System.AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An System.IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.EndGetResponse(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to an Internet resource.
            </summary>
            <param name="asyncResult">The pending request for a response.</param>
            <returns>A System.Net.WebResponse that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.GetResponse">
            <summary>
            Returns a response from an Internet resource.
            </summary>
            <returns>A System.Net.WebResponse that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.SetContentLengthHeader">
            <summary>
            Sets the content length header for the given request message.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.FireSendingEventHandlers(Microsoft.OData.Client.Descriptor)">
            <summary>
            Fires the following events, in order
            1. WritingRequest
            2. SendingRequest2
            </summary>
            <param name="descriptor">Descriptor for which this request is getting generated.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.FireSendingRequest2(Microsoft.OData.Client.Descriptor)">
            <summary>
            FireSendingRequest2 event.
            </summary>
            <param name="descriptor">Descriptor for which this request is getting generated.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.Descriptor">
            <summary>
            Descriptor for this request; or null if there isn't one.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.CachedRequestStream">
            <summary>
            Return the stream containing the request payload.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.SendChunked">
            <summary>
            Gets or sets a value that indicates whether to send request data in segments.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.IsBatchPartRequest">
            <summary>
            Returns true if the message is part of the batch request, otherwise return false;
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream">
            <summary>
            This is a just a pass through implementation of IODataRequestMessage.
            In order to keep the sync and non-async code the same, we write all requests into an cached stream and then copy
            it to the underlying network stream in sync or async manner.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream.requestMessage">
            <summary>
            IODataRequestMessage implementation that this class wraps.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream.cachedRequestStream">
            <summary>
            The cached request stream.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream.#ctor(Microsoft.OData.Client.DataServiceClientRequestMessage)">
            <summary>
            Creates a new instance of InternalODataRequestMessage.
            </summary>
            <param name="requestMessage">IODataRequestMessage that needs to be wrapped.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream.GetHeader(System.String)">
            <summary>
            Returns the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <returns>Returns the value of the header with the given name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <param name="headerValue">Value of the header.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream.GetStream">
            <summary>
            Gets the stream to be used to write the request payload.
            </summary>
            <returns>Stream to which the request payload needs to be written.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream.Headers">
            <summary>
            Returns the collection of request headers.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream.Url">
            <summary>
            Gets or Sets the request url.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream.Method">
            <summary>
            Gets or Sets the http method for this request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.RequestMessageWithCachedStream.CachedRequestStream">
            <summary>
            Return the stream containing the request payload.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ODataRequestMessageWrapper.TopLevelRequestMessageWrapper">
            <summary>
            This class wraps the request message for non-batch requests and $batch requests.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataRequestMessageWrapper.TopLevelRequestMessageWrapper.messageWithCachedStream">
            <summary>
            Wrapper for the top-level request messages which caches the request stream as it is written. In order to keep the sync and non-async 
            code the same, we write all requests into an cached stream and then copy it to the underlying network stream in sync or async manner.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.TopLevelRequestMessageWrapper.#ctor(Microsoft.OData.Client.DataServiceClientRequestMessage,Microsoft.OData.Client.RequestInfo,Microsoft.OData.Client.Descriptor)">
            <summary>
            Creates a new instance of ODataOuterRequestMessage.
            </summary>
            <param name="requestMessage">DataServiceClientRequestMessage instance.</param>
            <param name="requestInfo">RequestInfo instance.</param>
            <param name="descriptor">Descriptor for this request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.TopLevelRequestMessageWrapper.CreateWriter(Microsoft.OData.Core.ODataMessageWriterSettings,System.Boolean)">
            <summary>
            Create ODataMessageWriter given the writer settings.
            </summary>
            <param name="writerSettings">Writer settings.</param>
            <param name="isParameterPayload">true if the writer is intended to for a parameter payload, false otherwise.</param>
            <returns>An instance of ODataMessageWriter.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.TopLevelRequestMessageWrapper.IsBatchPartRequest">
            <summary>
            Returns true if the message is part of the batch request, otherwise return false;
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.TopLevelRequestMessageWrapper.CachedRequestStream">
            <summary>
            Return the stream containing the request payload.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ODataRequestMessageWrapper.InnerBatchRequestMessageWrapper">
            <summary>
            This class wraps the request message for inner batch operations.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataRequestMessageWrapper.InnerBatchRequestMessageWrapper.innerBatchRequestMessage">
            <summary>
            Inner batch request that ODataLib creates.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.InnerBatchRequestMessageWrapper.#ctor(Microsoft.OData.Client.DataServiceClientRequestMessage,Microsoft.OData.Core.IODataRequestMessage,Microsoft.OData.Client.RequestInfo,Microsoft.OData.Client.Descriptor)">
            <summary>
            Creates a new instance of InnerBatchRequestMessageWrapper;
            </summary>
            <param name="clientRequestMessage">Instance of DataServiceClientRequestMessage that represents this request.</param>
            <param name="odataRequestMessage">Instance of IODataRequestMessage created by ODataLib.</param>
            <param name="requestInfo">RequestInfo instance.</param>
            <param name="descriptor">Descriptor for this request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataRequestMessageWrapper.InnerBatchRequestMessageWrapper.CreateWriter(Microsoft.OData.Core.ODataMessageWriterSettings,System.Boolean)">
            <summary>
            Create ODataMessageWriter given the writer settings.
            </summary>
            <param name="writerSettings">Writer settings.</param>
            <param name="isParameterPayload">true if the writer is intended to for a parameter payload, false otherwise.</param>
            <returns>An instance of ODataMessageWriter.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.InnerBatchRequestMessageWrapper.IsBatchPartRequest">
            <summary>
            Returns true if the message is part of the batch request, otherwise return false;
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ODataRequestMessageWrapper.InnerBatchRequestMessageWrapper.CachedRequestStream">
            <summary>
            Return the stream containing the request payload.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ProjectionPath">
            <summary>Use this class to represent an annotated list of path segments.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPath.#ctor">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.ProjectionPath"/> instance.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPath.#ctor(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.ProjectionPath"/> instance.</summary>
            <param name="root">Root parameter for this path.</param>
            <param name="expectedRootType">Expression to get the expected root type in the target tree.</param>
            <param name="rootEntry">Expression for the root entry.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPath.#ctor(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.ProjectionPath"/> instance.</summary>
            <param name="root">Root parameter for this path.</param>
            <param name="expectedRootType">Expression to get the expected root type in the target tree.</param>
            <param name="rootEntry">Expression for the root entry.</param>
            <param name="members">Member to initialize the path with.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPath.ToString">
            <summary>Provides a string representation of this object.</summary>
            <returns>A string representation of this object, suitable for debugging.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPath.Root">
            <summary>Parameter expression in the source tree.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPath.RootEntry">
            <summary>Expression to get the entry for <see cref="P:Microsoft.OData.Client.ProjectionPath.Root"/> in the target tree.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPath.ExpectedRootType">
            <summary>Expression to get the expected root type in the target tree.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ProjectionPathBuilder">
            <summary>
            Use this class to help keep track of projection paths built
            while compiling a projection-based materialization plan.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPathBuilder.entityInScope">
            <summary>Stack of whether entities are in scope.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPathBuilder.rewrites">
            <summary>Registers rewrites for member initialization blocks.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPathBuilder.parameterExpressions">
            <summary>Stack of lambda expressions in scope.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPathBuilder.parameterExpressionTypes">
            <summary>
            Stack of expected type expression for <fieldref name="parameterExpressions"/>.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPathBuilder.parameterEntries">
            <summary>Stack of 'entry' parameter expressions.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPathBuilder.parameterProjectionTypes">
            <summary>Stack of projection (target-tree) types for parameters.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathBuilder.#ctor">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.ProjectionPathBuilder"/> instance.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathBuilder.ToString">
            <summary>Provides a string representation of this object.</summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathBuilder.EnterLambdaScope(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Records that a lambda scope has been entered when visiting a projection.</summary>
            <param name="lambda">Lambda being visited.</param>
            <param name="entry">Expression to the entry parameter from the target tree.</param>
            <param name="expectedType">Expression to the entry-expected-type from the target tree.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathBuilder.EnterMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Records that a member initialization expression has been entered 
            when visting a projection.
            </summary>
            <param name="init">Expression for initialization.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathBuilder.GetRewrite(System.Linq.Expressions.Expression)">
            <summary>Gets a rewrite for the specified expression; null if none is found.</summary>
            <param name="expression">Expression to match.</param>
            <returns>A rewrite for the expression; possibly null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathBuilder.LeaveLambdaScope">
            <summary>Records that a lambda scope has been left when visting a projection.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathBuilder.LeaveMemberInit">
            <summary>
            Records that a member initialization expression has been left when 
            visting a projection.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathBuilder.RegisterRewrite(System.Linq.Expressions.Expression,System.String[],System.Linq.Expressions.Expression)">
            <summary>Registers a member initialization rewrite.</summary>
            <param name="root">Root of member access path, typically a source tree parameter of entity type.</param>
            <param name="names">Sequence of names to match.</param>
            <param name="rewriteExpression">Rewrite expression for names.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathBuilder.RevokeRewrite(System.Linq.Expressions.Expression,System.String[])">
            <summary>Revokes the latest rewrite registered on the specified <paramref name="root"/>.</summary>
            <param name="root">Root of rewrites to revoke.</param>
            <param name="names">Names to revoke.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathBuilder.CurrentIsEntity">
            <summary>Whether the current scope is acting on an entity.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathBuilder.ExpectedParamTypeInScope">
            <summary>Expression for the expected type parameter.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathBuilder.HasRewrites">
            <summary>Whether any rewrites have been registered.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathBuilder.LambdaParameterInScope">
            <summary>Expression for the entity parameter in the source tree lambda.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathBuilder.ParameterEntryInScope">
            <summary>Expression for the entry parameter in the target tree.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ProjectionPathBuilder.MemberInitRewrite">
            <summary>Use this class to record how rewrites should occur under nested member initializations.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathBuilder.MemberInitRewrite.MemberNames">
            <summary>Sequence of member names to match.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathBuilder.MemberInitRewrite.Root">
            <summary>Root of member access path, typically a source tree parameter of entity type.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathBuilder.MemberInitRewrite.RewriteExpression">
            <summary>Rewrite expressions for the last member path.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ProjectionPathSegment">
            <summary>
            Use this class to represent a step in a path of segments
            over a parsed tree used during projection-driven materialization.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathSegment.#ctor(Microsoft.OData.Client.ProjectionPath,System.String,System.Type)">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.ProjectionPathSegment"/> instance.</summary>
            <param name="startPath">Path on which this segment is located.</param>
            <param name="member">Name of member to access when traversing a property; possibly null.</param>
            <param name="projectionType">
            Type that we expect to project out; typically the same as <paramref name="member"/>, but may be adjusted.
            </param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPathSegment.#ctor(Microsoft.OData.Client.ProjectionPath,System.Linq.Expressions.MemberExpression)">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.ProjectionPathSegment"/> instance.</summary>
            <param name="startPath">Path on which this segment is located.</param>
            <param name="memberExpression">Member expression for the projection path; possibly null.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathSegment.Member">
            <summary>Name of member to access when traversing a property; possibly null.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathSegment.ProjectionType">
            <summary>
            Type that we expect to project out; typically the same as <propertyref name="Member"/>, but may be adjusted.
            </summary>
            <remarks>
            In particular, this type will be adjusted for nested narrowing entity types.
            
            For example:
            from c in ctx.Customers select new NarrowCustomer() { 
              ID = c.ID, 
              BestFriend = new NarrowCustomer() { ID = c.BestFriend.ID }
            }
            
            In this case, ID will match types on both sides, but BestFriend
            will be of type Customer in the member access of the source tree
            and we want to project out a member-initialized NarrowCustomer
            in the target tree.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathSegment.SourceTypeAs">
            <summary>
            Contains the TypeAs at the source of the member access, null otherwise
            e.g. (p as Employee).Manager
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPathSegment.StartPath">
            <summary>Path on which this segment is located.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ProjectionPlan">
            <summary>Use this class to store a materialization plan used with projections.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlan.Run(Microsoft.OData.Client.Materialization.ODataEntityMaterializer,Microsoft.OData.Core.ODataEntry,System.Type)">
            <summary>Runs this plan.</summary>
            <param name="materializer">Materializer under which materialization should happen.</param>
            <param name="entry">Root entry to materialize.</param>
            <param name="expectedType">Expected type for the <paramref name="entry"/>.</param>
            <returns>The materialized object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPlan.LastSegmentType">
            <summary>Last segment type for query.</summary>
            <remarks>This typically matches the expected element type at runtime.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPlan.Plan">
            <summary>Provides a method to materialize a payload.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPlan.ProjectedType">
            <summary>Expected type to project.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ProjectionPlanCompiler">
            <summary>
            Use this class to create a <see cref="T:Microsoft.OData.Client.ProjectionPlan"/> for a given projection lambda.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPlanCompiler.dynamicProxyMethodGenerator">
            <summary>Creates dynamic methods that wrap calls to internal methods.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPlanCompiler.annotations">
            <summary>Annotations being tracked on this tree.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPlanCompiler.materializerExpression">
            <summary>Expression that refers to the materializer.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPlanCompiler.normalizerRewrites">
            <summary>Tracks rewrite-to-source rewrites introduced by expression normalizer.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPlanCompiler.identifierId">
            <summary>Number to suffix to identifiers to help with debugging.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPlanCompiler.pathBuilder">
            <summary>Path builder used to help with tracking state while compiling.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionPlanCompiler.topLevelProjectionFound">
            <summary>Whether the top level projection has been found.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new <see cref="T:Microsoft.OData.Client.ProjectionPlanCompiler"/> instance.
            </summary>
            <param name="normalizerRewrites">Rewrites introduces by normalizer.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.CompilePlan(System.Linq.Expressions.LambdaExpression,System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>Creates a projection plan from the specified <paramref name="projection"/>.</summary>
            <param name="projection">Projection expression.</param>
            <param name="normalizerRewrites">Tracks rewrite-to-source rewrites introduced by expression normalizer.</param>
            <returns>A new <see cref="T:Microsoft.OData.Client.ProjectionPlan"/> instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>Binary visit method.</summary>
            <param name="b">Binary expression to visit.</param>
            <returns>(Possibly rewritten) binary expression.</returns>
            <remarks>
            This override is introduced because binary expressions are one of 
            the scopes at which normalization happens.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>Visits the specified <paramref name="conditional"/> expression.</summary>
            <param name="conditional">Expression to check.</param>
            <returns>The visited expression.</returns>
            <remarks>
            This override allows us to check for rewrites created by
            ExpressionNormalizer.CreateCompareExpression.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>Unary visit method.</summary>
            <param name="u">Unary expression to visit.</param>
            <returns>(Possibly rewritten) unary expression.</returns>
            <remarks>
            This override is introduced because unary expressions are one of 
            the scopes at which normalization happens.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            MemberExpression visit method
            </summary>
            <param name="m">The MemberExpression expression to visit</param>
            <returns>The visited MemberExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>Parameter visit method.</summary>
            <param name="p">Parameter to visit.</param>
            <returns>Resulting expression.</returns>
            <remarks>
            The parameter may get rewritten as a materializing projection if
            it refers to an entity outside of member binding. In this case,
            it becomes a standalone tracked entity.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            MemberInitExpression visit method
            </summary>
            <param name="init">The MemberInitExpression to visit</param>
            <returns>The visited MemberInitExpression</returns>
            <remarks>
            A MemberInitExpression on a knownEntityType implies that we
            want to materialize the thing.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>Visits a method call expression.</summary>
            <param name="m">Expression to visit.</param>
            <returns>A (possibly rewritten) expression for <paramref name="m"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit
            </summary>
            <param name="exp">Expression to visit</param>
            <returns>an expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>LambdaExpression visit method.</summary>
            <param name="lambda">The LambdaExpression to visit</param>
            <returns>The visited LambdaExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.CallMaterializer(System.String,System.Linq.Expressions.Expression[])">
            <summary>Generates a call to a static method on AtomMaterializer.</summary>
            <param name="methodName">Name of method to invoke.</param>
            <param name="arguments">Arguments to pass to method.</param>
            <returns>The constructed expression.</returns>
            <remarks>
            There is no support for overload resolution - method names in AtomMaterializer
            must be unique.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.CallMaterializerWithType(System.String,System.Type[],System.Linq.Expressions.Expression[])">
            <summary>Generates a call to a static method on AtomMaterializer.</summary>
            <param name="methodName">Name of method to invoke.</param>
            <param name="typeArguments">Type arguments for method (possibly null).</param>
            <param name="arguments">Arguments to pass to method.</param>
            <returns>The constructed expression.</returns>
            <remarks>
            There is no support for overload resolution - method names in AtomMaterializer
            must be unique.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.RebindConstructor(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Rebind a call to DataServiceCollection constructor
            </summary>
            <param name="info">the constructor info</param>
            <param name="arguments">arguments to the constructor</param>
            <returns>An expression that calls the DSC constructor</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.CallCheckValueForPathIsNull(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,Microsoft.OData.Client.ProjectionPath)">
            <summary>Creates an expression that calls ProjectionCheckValueForPathIsNull.</summary>
            <param name="entry">Expression for root entry for paths.</param>
            <param name="entryType">Expression for expected type for entry.</param>
            <param name="path">Path to check null value for.</param>
            <returns>A new expression with the call instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.CallValueForPath(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,Microsoft.OData.Client.ProjectionPath)">
            <summary>Creates an expression that calls ProjectionValueForPath.</summary>
            <param name="entry">Expression for root entry for paths.</param>
            <param name="entryType">Expression for expected type for entry.</param>
            <param name="path">Path to pull value from.</param>
            <returns>A new expression with the call instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.CallValueForPathWithType(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,Microsoft.OData.Client.ProjectionPath,System.Type)">
            <summary>Creates an expression that calls ProjectionValueForPath.</summary>
            <param name="entry">Expression for root entry for paths.</param>
            <param name="entryType">Expression for expected type for entry.</param>
            <param name="path">Path to pull value from.</param>
            <param name="type">Path to convert result for.</param>
            <returns>A new expression with the call instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.RebindConditionalNullCheck(System.Linq.Expressions.ConditionalExpression,Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNullCheckResult)">
            <summary>
            Rebinds a conditional that performs a null check on an entity.
            </summary>
            <param name="conditional">Conditional expression.</param>
            <param name="nullCheck">Results of null check analysis.</param>
            <returns>The rebound expression.</returns>
            <remarks>
            Do a rewrite to avoid creating a type in the null check:
              a.b == null ? null : [a.b]-based expression
            becomes
              ProjectionIsNull(a.b) ? null : [a.b]-based expression
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.RebindEntityMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Rebinds the specified <paramref name="init"/> expression by gathering 
            annotated paths and returning an expression that calls the
            ProjectionGetEntity method.
            </summary>
            <param name="init">Member initialization expression.</param>
            <returns>A new expression suitable for materialization.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.GetDeepestEntry(System.Linq.Expressions.Expression[])">
            <summary>
            Creates an expression that gets the deepest entry that will be found on the 
            specified <paramref name="path"/> (for the target tree).
            </summary>
            <param name="path">Path of expressions to walk.</param>
            <returns>An expression that invokes ProjectionGetEntry on the target tree.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.GetExpressionBeforeNormalization(System.Linq.Expressions.Expression)">
            <summary>Gets an expression before its rewrite.</summary>
            <param name="expression">Expression to check.</param>
            <returns>The expression before normalization.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.RebindParameter(System.Linq.Expressions.Expression,Microsoft.OData.Client.ProjectionPlanCompiler.ExpressionAnnotation)">
            <summary>Rebinds the specified parameter expression as a path-based access.</summary>
            <param name="expression">Expression to rebind.</param>
            <param name='annotation'>Annotation for the expression to rebind.</param>
            <returns>The rebound expression.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.RebindMemberAccess(System.Linq.Expressions.MemberExpression,Microsoft.OData.Client.ProjectionPlanCompiler.ExpressionAnnotation)">
            <summary>Rebinds the specified member access expression into a path-based value retrieval method call.</summary>
            <param name='m'>Member expression.</param>
            <param name='baseAnnotation'>Annotation for the base portion of the expression.</param>
            <returns>A rebound expression.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.RebindNewExpressionForDataServiceCollectionOfT(System.Linq.Expressions.NewExpression)">
            <summary>Rewrites NewExpression for DataServiceCollection to a constructor proxy method call.
            The proxy is required for partially trusted appdomains. Paging information is preserved in the materializer.</summary>
            <param name="nex">NewExpression to create a collection</param>
            <returns>The rewritten expression.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.RebindMethodCallForMemberSelect(System.Linq.Expressions.MethodCallExpression)">
            <summary>Rewrites a call to Select() by adding to the current paths to project out.</summary>
            <param name="call">Call expression.</param>
            <returns>Expression with annotated path to include in member binding.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.RebindMethodCallForMemberToList(System.Linq.Expressions.MethodCallExpression)">
            <summary>Rewrites a call to ToList in the specified method.</summary>
            <param name="call">Call expression.</param>
            <returns>Expression with annotated path to include in member binding.</returns>
            <remarks>
            All that is necessary here is to rewrite the call to Select() and indicate
            that the target type is a given List&lt;T&gt;.
            
            TODO: we're not bubbling this all the way to the GetOrCreateCollection method - does it matter?
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.RebindMethodCallForNewSequence(System.Linq.Expressions.MethodCallExpression)">
            <summary>Rewrites a method call used in a sequence method (possibly over entity types).</summary>
            <param name="call">Call expression.</param>
            <returns>Expression that can be called directly to yield the expected value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionPlanCompiler.TypedEnumerableToList(System.Linq.Expressions.Expression,System.Type)">
            <summary>Returns a method call that returns a list from a typed enumerable.</summary>
            <param name="source">Expression to convert.</param>
            <param name="targetType">Target type to return.</param>
            <returns>The new expression.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ProjectionPlanCompiler.ExpressionAnnotation">
            <summary>Annotates an expression, typically from the target tree.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionPlanCompiler.ExpressionAnnotation.Segment">
            <summary>Segment that marks the path found to an expression.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ReceivingResponseEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> class for the <see cref="E:Microsoft.OData.Client.DataServiceContext.ReceivingResponse"/> event.
            Exposes the ResponseMessage to the user.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ReceivingResponseEventArgs.#ctor(Microsoft.OData.Core.IODataResponseMessage,Microsoft.OData.Client.Descriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ReceivingResponseEventArgs"/> class for a
            non-batch or top level $batch response.
            </summary>
            <param name="responseMessage">The response message the client is receiving.</param>
            <param name="descriptor">Descriptor for the request that the client is receiving the response for.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ReceivingResponseEventArgs.#ctor(Microsoft.OData.Core.IODataResponseMessage,Microsoft.OData.Client.Descriptor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ReceivingResponseEventArgs"/> class.
            </summary>
            <param name="responseMessage">The response message the client is receiving.</param>
            <param name="descriptor">Descriptor for the request that the client is receiving the response for.</param>
            <param name="isBatchPart">Indicates if this response is to an inner batch query or operation.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ReceivingResponseEventArgs.ResponseMessage">
            <summary>
            Gets the response message that the client is receiving.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ReceivingResponseEventArgs.IsBatchPart">
            <summary>
            True if the response is an inner batch operation or query; false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ReceivingResponseEventArgs.Descriptor">
            <summary>
            Descriptor for the request that the client is receiving the response for.
            The descriptor may be null for certain types of requests, like most GET requests
            and the top level $batch request. 
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.HeaderCollection">
            <summary>
            Collection for header name/value pairs which is known to be case insensitive.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.HeaderCollection.headers">
            <summary>
            Case-insensitive dictionary for storing the header name/value pairs.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.OData.Client.HeaderCollection"/>.
            </summary>
            <param name="headers">The initial set of headers for the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.#ctor(Microsoft.OData.Core.IODataResponseMessage)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.OData.Client.HeaderCollection"/>.
            </summary>
            <param name="responseMessage">The response message to pull the headers from.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.#ctor(System.Net.WebHeaderCollection)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.OData.Client.HeaderCollection"/>.
            </summary>
            <param name="headers">The initial set of headers for the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.OData.Client.HeaderCollection"/> which is empty.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.SetDefaultHeaders">
            <summary>
            Adds default system headers
            Currently it sets User-Agent header as default system header
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.TryGetHeader(System.String,System.String@)">
            <summary>
            Tries to get the value of the header with the given name, if it is in the collection.
            </summary>
            <param name="headerName">The header name to look for.</param>
            <param name="headerValue">The header value, if it was in the collection.</param>
            <returns>Whether or not the header was in the collection.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.GetHeader(System.String)">
            <summary>
            Gets the value of the header, or null if it is not in the collection.
            </summary>
            <param name="headerName">The header name to look for.</param>
            <returns>The header value or null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.SetHeader(System.String,System.String)">
            <summary>
            Sets a header value. Will remove the header from the underlying dictionary if the new value is null.
            </summary>
            <param name="headerName">The header name to set.</param>
            <param name="headerValue">The new value of the header.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.SetHeaders(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sets multiple header values at once.
            </summary>
            <param name="headersToSet">The headers to set.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.AsEnumerable">
            <summary>
            Gets an enumeration of the header values in the collection.
            </summary>
            <returns>An enumeration of the header values in the collection.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.SetRequestVersion(System.Version,System.Version)">
            <summary>
            Sets the request OData-Version and OData-MaxVersion.
            </summary>
            <param name="requestVersion">DSV to set the request to.</param>
            <param name="maxProtocolVersion">Max protocol version, which MDSV will essentially be set to.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.SetHeaderIfUnset(System.String,System.String)">
            <summary>
            Sets the header if it was previously unset.
            </summary>
            <param name="headerToSet">The header to set.</param>
            <param name="headerValue">The new header value.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.SetUserAgent">
            <summary>
            Sets UserAgent header
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.Copy">
            <summary>
            Creates a copy of the current header collection which uses a different dictionary to store headers.
            </summary>
            <returns>A copy of the current headers.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HeaderCollection.GetODataVersion">
            <summary>
            Gets the OData-Version as a Version object if it is encoded as a proper version string with an optional Util.VersionSuffix ending.
            </summary>
            <returns>The OData-Version header as a Version object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.HeaderCollection.UnderlyingDictionary">
            <summary>
            Gets the underlying dictionary the headers are stored in. Should only be used when absolutely necessary for maintaining public API.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.HeaderCollection.HeaderNames">
            <summary>
            Gets the names of all the headers in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.RequestInfo">
            <summary>
            Class which wraps the dataservicecontext and exposes information required for 
            generating request to send to the server
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.RequestInfo.typeResolver">
            <summary>The type resolver for the current request.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.#ctor(Microsoft.OData.Client.DataServiceContext,System.Boolean)">
            <summary>
            Creates a new instance of RequestInfo class which is used to build the request to send to the server
            </summary>
            <param name="context">wrapping context instance.</param>
            <param name="isContinuation">Whether this is a continuation request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.#ctor(Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Creates a new instance of RequestInfo class which is used to build the request to send to the server
            </summary>
            <param name="context">wrapping context instance.</param>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.GetSyncronousResponse(Microsoft.OData.Client.ODataRequestMessageWrapper,System.Boolean)">
            <summary>
            This method wraps the HttpWebRequest.GetSyncronousResponse method call. The reasons for doing this are to give us a place
            to invoke internal test hook callbacks that can validate the response headers, and also so that we can do
            debug validation to make sure that the headers have not changed since they were originally configured on the request.
            </summary>
            <param name="request">ODataRequestMessageWrapper instance</param>
            <param name="handleWebException">If set to true, this method will only re-throw the WebException that was caught if
            the response in the exception is null. If set to false, this method will always re-throw in case of a WebException.</param>
            <returns>
            Returns the HttpWebResponse from the wrapped GetSyncronousResponse method.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.EndGetResponse(Microsoft.OData.Client.ODataRequestMessageWrapper,System.IAsyncResult)">
            <summary>
            This method wraps the HttpWebRequest.EndGetResponse method call. The reason for doing this is to give us a place
            to invoke internal test hook callbacks that can validate the response headers.
            </summary>
            <param name="request">HttpWebRequest instance</param>
            <param name="asyncResult">Async result obtained from previous call to BeginGetResponse.</param>
            <returns>Returns the HttpWebResponse from the wrapped EndGetResponse method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.GetServerTypeName(Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Get the server type name - either from the entity descriptor or using the type resolver.
            </summary>
            <param name="descriptor">The entity descriptor.</param>
            <returns>The server type name for the entity.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.GetServerTypeName(Microsoft.OData.Client.Metadata.ClientTypeAnnotation)">
            <summary>
            Get the server type name - either from the entity descriptor or using the type resolver.
            </summary>
            <param name="clientTypeAnnotation">Client type annotation.</param>
            <returns>The server type name for the entity.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.InferServerTypeNameFromServerModel(Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Infers the server type name for the entity tracked in the given descriptor based on the server model.
            </summary>
            <param name="descriptor">The descriptor containing the entity to get the type name for.</param>
            <returns>The type name or null if it could not be inferred.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.ResolveNameFromType(System.Type)">
            <summary>
            The reverse of ResolveType, use for complex types and LINQ query expression building
            </summary>
            <param name="type">client type</param>
            <returns>type for the server</returns>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.GetDeserializationInfo(System.Nullable{Microsoft.OData.Client.MergeOption})">
            <summary>
            Returns the instance of ResponseInfo class, which provides all the information for response handling.
            </summary>
            <param name="mergeOption">merge option to use for handling the response conflicts.
            If this parameter is null the default MergeOption value from the context is used.</param>
            <returns>instance of response info class.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.GetDeserializationInfoForLoadProperty(System.Nullable{Microsoft.OData.Client.MergeOption},Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation)">
            <summary>
            Returns the instance of LoadPropertyResponseInfo class, which provides information for LoadProperty response handling.
            </summary>
            <param name="mergeOption">Merge option to use for conflict handling.</param>
            <param name="entityDescriptor">Entity whose property is being loaded.</param>
            <param name="property">Property which is being loaded.</param>
            <returns>Instance of the LoadPropertyResponseInfo class.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.ValidateResponseVersion(System.Version)">
            <summary>
            Validates that the response version can be accepted as a response for this request
            </summary>
            <param name="responseVersion">The version of the response (possibly null if none was specified)</param>
            <returns>Exception if the version can't be accepted, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.FireSendingRequest(Microsoft.OData.Client.SendingRequestEventArgs)">
            <summary>
            Fires the SendingRequest event.
            </summary>
            <param name="eventArgs">SendingRequestEventArgs instance containing all information about the request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.FireSendingRequest2(Microsoft.OData.Client.SendingRequest2EventArgs)">
            <summary>
            Fires the SendingRequest2 event.
            </summary>
            <param name="eventArgs">SendingRequest2EventArgs instance containing all information about the request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.CreateRequestMessage(Microsoft.OData.Client.BuildingRequestEventArgs)">
            <summary>
            Returns an instance of the IODataRequestMessage 
            </summary>
            <param name="requestMessageArgs">Arguments for creating the request message.</param>
            <returns>an instance of the IODataRequestMessage </returns>
        </member>
        <member name="M:Microsoft.OData.Client.RequestInfo.CreateRequestArgsAndFireBuildingRequest(System.String,System.Uri,Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.HttpStack,Microsoft.OData.Client.Descriptor)">
            <summary>
            Asks the context to Fire the BuildingRequest event and get RequestMessageArgs.
            </summary>
            <param name="method">Http method for the request.</param>
            <param name="requestUri">Base Uri for the request.</param>
            <param name="headers">Request headers.</param>
            <param name="httpStack">HttpStack to use.</param>
            <param name="descriptor">Descriptor for the request, if there is one.</param>
            <returns>A new RequestMessageArgs object for building the request message.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.WriteHelper">
            <summary>The writing helper to use.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.Context">
            <summary>context instance.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.IsContinuation">
            <summary>
            Whether this is a continuation request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.Configurations">
            <summary> Gets the configurations. </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.EntityTracker">
            <summary>Returns the instance of entity tracker class which tracks all the entities and links for the context.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.IgnoreResourceNotFoundException">
            <summary>Whether to ignore extra properties in the response payload.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.HasResolveName">
            <summary>True if the context's ResolveName property has been set, otherwise false.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.IsUserSuppliedResolver">
            <summary>True if the context's ResolveName property can be determined to be a user-supplied value, instead of the one provided by codegen.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.BaseUriResolver">
            <summary>Gets the BaseUriResolver</summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.AddAndUpdateResponsePreference">
            <summary>Gets the response preference for Add and Update operations.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.MaxProtocolVersionAsVersion">
            <summary>The maximum protocol version the client should understand.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.HasSendingRequest2EventHandlers">
            <summary>
            Returns true if there are subscribers to SendingRequest event.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.UserModifiedRequestInBuildingRequest">
            <summary>
            True if the user could have modified a part of the request. This lets us turn off assertions that normally
            prevent us from making certain mistakes we don't mind the user intentionally ignoring.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.Credentials">
            <summary>
            Gets the authentication information used by each query created using the context object.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.Timeout">
            <summary>
            Get the timeout span in seconds to use for the underlying HTTP request to the data service.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.UsePostTunneling">
            <summary>
            Whether to use post-tunneling for PUT/DELETE.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.Model">
            <summary>
            Gets the client model.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.Format">
            <summary>
            Gets the tracker for the user-specified format to use for requests.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.TypeResolver">
            <summary>
            Gets the type resolver.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.UrlConventions">
            <summary>
            Gets the URL conventions the user set on the context.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.HttpStack">
            <summary>
            The HTTP stack to use in Silverlight.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.RequestInfo.UseDefaultCredentials">
            <summary>
            Gets a System.Boolean value that controls whether default credentials are sent with requests.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ResponseInfo">
            <summary>
            Wrappers the context and only exposes information required for
            processing the response from the server
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResponseInfo.requestInfo">
            <summary>The request that led to this response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResponseInfo.mergeOption">
            <summary>MergeOption to use to process the response.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResponseInfo.#ctor(Microsoft.OData.Client.RequestInfo,Microsoft.OData.Client.MergeOption)">
            <summary>
            Creates a new instance of the ResponseInfo class which exposes all the information from
            the context required for processing the response from the server.
            </summary>
            <param name="requestInfo">The request info</param>
            <param name="mergeOption">mergeOption</param>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.ReadHelper">
            <summary>The reading helper to use.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.IsContinuation">
            <summary>
            Whether this is a continuation request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.MergeOption">
            <summary>MergeOption to use to merge the entities from the response and one present in the client.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.IgnoreMissingProperties">
            <summary>Whether to ignore extra properties in the response payload.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.EntityTracker">
            <summary>Returns the instance of entity tracker class which tracks all the entities and links for the context.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.ApplyingChanges">
            <summary>A flag indicating if the data service context is applying changes</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.TypeResolver">
            <summary>Gets the type resolver instance.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.BaseUriResolver">
            <summary>Gets the BaseUriResolver</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.MaxProtocolVersion">
            <summary>return the protocol version as specified in the client.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.Model">
            <summary>
            Gets the client model.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.Context">
            <summary>
            Returns the DataServiceContext
            Should be only used in DataServiceCollection constructor, where
            we need to infer the context from the results.
            </summary>
            <returns>context instance.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ResponseInfo.ResponsePipeline">
            <summary>
            Gets the reading pipeline configuration
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.LoadPropertyResponseInfo">
            <summary>
            Information used for handling response to a LoadProperty request.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.LoadPropertyResponseInfo.#ctor(Microsoft.OData.Client.RequestInfo,Microsoft.OData.Client.MergeOption,Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="requestInfo">Information about the request.</param>
            <param name="mergeOption">Merge option.</param>
            <param name="entityDescriptor">Entity whose property is being loaded.</param>
            <param name="property">Property which is being loaded.</param>
        </member>
        <member name="P:Microsoft.OData.Client.LoadPropertyResponseInfo.EntityDescriptor">
            <summary>
            Entity whose property is being loaded.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.LoadPropertyResponseInfo.Property">
            <summary>
            Property being loaded.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.SendingRequest2EventArgs">
            <summary> Event args for the SendingRequest2 event. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SendingRequest2EventArgs.#ctor(Microsoft.OData.Core.IODataRequestMessage,Microsoft.OData.Client.Descriptor,System.Boolean)">
            <summary>
            Creates a new instance of SendingRequest2EventsArgs
            </summary>
            <param name="requestMessage">request message.</param>
            <param name="descriptor">Descriptor that represents this change.</param>
            <param name="isBatchPart">True if this args represents a request within a batch, otherwise false.</param>
        </member>
        <member name="P:Microsoft.OData.Client.SendingRequest2EventArgs.RequestMessage">
            <summary>The web request reported through this event. The handler may modify it.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.SendingRequest2EventArgs.Descriptor">
            <summary>The request header collection.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.SendingRequest2EventArgs.IsBatchPart">
            <summary> Returns true if this event is fired for request within a batch, otherwise returns false. </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataStringEscapeBuilder">
            <summary>
            Take a URI string and escape the data portion of it
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataStringEscapeBuilder.SensitiveCharacters">
            <summary>
            Sensitive characters that we should always skip
            This should be the set of Http control characters intersecting with 
            the set of characters OData literal format allows outside of strings
            (In V3: only +, as used in double literals ex. 3E+8)
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataStringEscapeBuilder.input">
            <summary>
            input string
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataStringEscapeBuilder.output">
            <summary>
            output string
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataStringEscapeBuilder.index">
            <summary>
            the current index
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataStringEscapeBuilder.quotedDataBuilder">
            <summary>
            current quoted data string
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataStringEscapeBuilder.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="dataString">The string to be escaped.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataStringEscapeBuilder.EscapeDataString(System.String)">
            <summary>
            Escape a URI string's data string portion
            </summary>
            <param name="input">The input string</param>
            <returns>The escaped string</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataStringEscapeBuilder.Build">
            <summary>
            Build a new escaped string
            </summary>
            <returns>The escaped string</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataStringEscapeBuilder.ReadQuotedString(System.Char)">
            <summary>
            Read quoted string
            </summary>
            <param name="quoteStart">The character that started the quote</param>
        </member>
        <member name="T:Microsoft.OData.Client.ODataWriterWrapper">
            <summary>
            Forwards calls to an OData Writer
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataWriterWrapper.odataWriter">
            <summary> The odataWriter. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataWriterWrapper.requestPipeline">
            <summary> The payload writing events. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.#ctor(Microsoft.OData.Core.ODataWriter,Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration)">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.OData.Client.ODataWriterWrapper"/> class from being created.
            </summary>
            <param name="odataWriter">The odata writer.</param>
            <param name="requestPipeline">The request pipeline configuration.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.CreateForEntry(Microsoft.OData.Core.ODataMessageWriter,Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration)">
            <summary>
            Creates the odata entry writer.
            </summary>
            <remarks>We never create a feed writer as the client doesn't support deep insert, if we did this would need to change</remarks>
            <param name="messageWriter">The message writer.</param>
            <param name="requestPipeline">The request pipeline configuration.</param>
            <returns>The odata Writer Wrapper</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.CreateForEntryTest(Microsoft.OData.Core.ODataWriter,Microsoft.OData.Client.DataServiceClientRequestPipelineConfiguration)">
            <summary>
            Creates the odata entry writer for testing purposes only
            </summary>
            <param name="writer">The odata writer.</param>
            <param name="requestPipeline">The request pipeline configuration.</param>
            <returns>The odata Writer Wrapper</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.WriteStart(Microsoft.OData.Core.ODataEntry,System.Object)">
            <summary>
            Writes the start.
            </summary>
            <param name="entry">The entry.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.WriteEnd(Microsoft.OData.Core.ODataEntry,System.Object)">
            <summary>
            Writes the end.
            </summary>
            <param name="entry">The entry.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.WriteEnd(Microsoft.OData.Core.ODataNavigationLink,System.Object,System.Object)">
            <summary>
            Writes the end.
            </summary>
            <param name="navlink">The link.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.WriteNavigationLinkEnd(Microsoft.OData.Core.ODataNavigationLink,System.Object,System.Object)">
            <summary>
            Writes the end Actions.
            </summary>
            <param name="navlink">The link.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.WriteNavigationLinksEnd">
            <summary>
            Writes the navigation link end.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.WriteStart(Microsoft.OData.Core.ODataNavigationLink,System.Object,System.Object)">
            <summary>
            Writes the start.
            </summary>
            <param name="navigationLink">The navigation link.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.WriteNavigationLinkStart(Microsoft.OData.Core.ODataNavigationLink,System.Object,System.Object)">
            <summary>
            Writes the start for Navigation link.
            </summary>
            <param name="navigationLink">The navigation link.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.WriteNavigationLinksStart(Microsoft.OData.Core.ODataNavigationLink)">
            <summary>
            Writes the start for a collection of navigation links.
            </summary>
            <param name="navigationLink">The navigation link.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataWriterWrapper.WriteEntityReferenceLink(Microsoft.OData.Core.ODataEntityReferenceLink,System.Object,System.Object)">
            <summary>
            Writes the entity reference link.
            </summary>
            <param name="referenceLink">The reference link.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Microsoft.OData.Client.HttpWebRequestMessage">
            <summary> IODataRequestMessage interface implementation. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.HttpWebRequestMessage.requestUrl">
            <summary>Request Url.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.HttpWebRequestMessage.effectiveHttpMethod">
            <summary> The effective HTTP method. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.HttpWebRequestMessage.httpRequest">
            <summary>HttpWebRequest instance.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.HttpWebRequestMessage.inSendingRequest2Event">
            <summary>True if SendingRequest2Event is currently invoked, otherwise false.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.#ctor(Microsoft.OData.Client.DataServiceClientRequestMessageArgs)">
            <summary>
            Creates a new instance of HttpWebRequestMessage.
            </summary>
            <param name="args">Arguments for creating the request message.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.GetHeader(System.String)">
            <summary>
            Returns the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <returns>Returns the value of the header with the given name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <param name="headerValue">Value of the header.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.GetStream">
            <summary>
            Gets the stream to be used to write the request payload.
            </summary>
            <returns>Stream to which the request payload needs to be written.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.Abort">
            <summary>
            Abort the current request.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a System.IO.Stream object to use to write data.
            </summary>
            <param name="callback">The System.AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An System.IAsyncResult that references the asynchronous request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request for a System.IO.Stream object to use to write data.
            </summary>
            <param name="asyncResult">The pending request for a stream.</param>
            <returns>A System.IO.Stream to use to write request data.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
             Begins an asynchronous request to an Internet resource.
            </summary>
            <param name="callback">The System.AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An System.IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.EndGetResponse(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to an Internet resource.
            </summary>
            <param name="asyncResult">The pending request for a response.</param>
            <returns>A System.Net.WebResponse that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.GetResponse">
            <summary>
            Returns a response from an Internet resource.
            </summary>
            <returns>A System.Net.WebResponse that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.SetHttpWebRequestContentLength(System.Net.HttpWebRequest,System.Int64)">
            <summary>
            Sets the Content length of the Http web request
            </summary>
            <param name="httpWebRequest">Http web request to set the content length on</param>
            <param name="contentLength">Length to set</param>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.SetAcceptCharset(System.Net.HttpWebRequest,System.String)">
            <summary>
            Sets the accept charset.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="headerValue">The header value.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.SetUserAgentHeader(System.Net.HttpWebRequest,System.String)">
            <summary>
            Attempts to set the UserAgent property if it exists other wise returns false
            </summary>
            <param name="httpWebRequest">The http web request.</param>
            <param name="headerValue">The value of the user agent.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.BeforeSendingRequest2Event">
            <summary>
            This method is called just before firing SendingRequest2 event.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.AfterSendingRequest2Event">
            <summary>
            This method is called immd. after SendingRequest2 event has been fired.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.CreateRequest(System.String,System.Uri,Microsoft.OData.Client.DataServiceClientRequestMessageArgs)">
            <summary>
            Create an instance of HttpWebRequest from the given IODataRequestMessage instance. This method
            is also responsible for firing SendingRequest event.
            </summary>
            <param name="method">Http Method.</param>
            <param name="requestUrl">Request Url.</param>
            <param name="args">DataServiceClientRequestMessageArgs instance.</param>
            <returns>an instance of HttpWebRequest.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.SetHeaderValue(System.Net.HttpWebRequest,System.String,System.String)">
            <summary>
            Sets the value of the given header in the httpwebrequest instance.
            This has a special case for some of the headers to set the properties on the request instead of using the Headers collection.
            </summary>
            <param name="request">The request to apply the header to.</param>
            <param name="headerName">Name of the header.</param>
            <param name="headerValue">Value of the header.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.GetHeaderValue(System.Net.HttpWebRequest,System.String)">
            <summary>
            Get the value of the given header in the httpwebrequest instance.
            This has a special case for some of the headers to set the properties on the request instead of using the Headers collection.
            </summary>
            <param name="request">The request to get the header value from.</param>
            <param name="headerName">Name of the header.</param>
            <returns>the value of the header with the given name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebRequestMessage.ConvertToDataServiceWebException(System.Net.WebException)">
            <summary>
            Convert the WebException into DataServiceWebException.
            </summary>
            <param name="webException">WebException instance.</param>
            <returns>an instance of DataServiceWebException that abstracts the WebException.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.HttpWebRequestMessage.Url">
            <summary> Returns the request url. </summary>
        </member>
        <member name="P:Microsoft.OData.Client.HttpWebRequestMessage.Method">
            <summary> Returns the method for this request. </summary>
        </member>
        <member name="P:Microsoft.OData.Client.HttpWebRequestMessage.Headers">
            <summary> Returns the collection of request headers. </summary>
        </member>
        <member name="P:Microsoft.OData.Client.HttpWebRequestMessage.HttpWebRequest">
            <summary> Returns the underlying HttpWebRequest </summary>
        </member>
        <member name="P:Microsoft.OData.Client.HttpWebRequestMessage.Credentials">
            <summary>
            Gets or set the credentials for this request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.HttpWebRequestMessage.Timeout">
            <summary>
            Gets or sets the timeout (in seconds) for this request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.HttpWebRequestMessage.SendChunked">
            <summary>
            Gets or sets a value that indicates whether to send data in segments to the
             Internet resource. 
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.HttpWebResponseMessage">
            <summary>
            IODataResponseMessage interface implementation
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.HttpWebResponseMessage.headers">
            <summary>Cached headers.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.HttpWebResponseMessage.getResponseStream">
            <summary>A func which returns the response stream.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.HttpWebResponseMessage.statusCode">
            <summary>The response status code.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.HttpWebResponseMessage.httpWebResponse">
            <summary>HttpWebResponse instance.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebResponseMessage.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Int32,System.Func{System.IO.Stream})">
            <summary>
            Constructor.
            </summary>
            <param name="headers">The headers.</param>
            <param name="statusCode">The status code.</param>
            <param name="getResponseStream">A function returning the response stream.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebResponseMessage.#ctor(System.Net.HttpWebResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="httpResponse">HttpWebResponse instance.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebResponseMessage.#ctor(Microsoft.OData.Client.HeaderCollection,System.Int32,System.Func{System.IO.Stream})">
            <summary>
            Constructor.
            </summary>
            <param name="headers">The headers.</param>
            <param name="statusCode">The status code.</param>
            <param name="getResponseStream">A function returning the response stream.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebResponseMessage.GetHeader(System.String)">
            <summary>
            Returns the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <returns>Returns the value of the header with the given name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebResponseMessage.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <param name="headerValue">Value of the header.</param>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebResponseMessage.GetStream">
            <summary>
            Gets the stream to be used to read the response payload.
            </summary>
            <returns>Stream from which the response payload can be read.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebResponseMessage.Dispose">
            <summary>
            Close the underlying HttpWebResponse.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.HttpWebResponseMessage.Dispose(System.Boolean)">
            <summary>
            Perform the actual cleanup work.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="P:Microsoft.OData.Client.HttpWebResponseMessage.Headers">
            <summary>
            Returns the collection of response headers.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.HttpWebResponseMessage.Response">
            <summary>
            Gets the underlying <see cref="T:System.Net.HttpWebResponse"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.HttpWebResponseMessage.StatusCode">
            <summary>
            The response status code.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ODataPropertyConverter">
            <summary>
            Component for converting properties on client types into instance of <see cref="T:Microsoft.OData.Core.ODataProperty"/> in order to serialize insert/update payloads.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataPropertyConverter.requestInfo">
            <summary>
            The request info.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.#ctor(Microsoft.OData.Client.RequestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ODataPropertyConverter"/> class.
            </summary>
            <param name="requestInfo">The request info.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.PopulateProperties(System.Object,System.String,System.Collections.Generic.IEnumerable{Microsoft.OData.Client.Metadata.ClientPropertyAnnotation})">
            <summary>
            Creates a list of ODataProperty instances for the given set of properties.
            </summary>
            <param name="resource">Instance of the resource which is getting serialized.</param>
            <param name="serverTypeName">The server type name of the entity whose properties are being populated.</param>
            <param name="properties">The properties to populate into instance of ODataProperty.</param>
            <returns>Populated ODataProperty instances for the given properties.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.CreateODataComplexValue(System.Type,System.Object,System.String,System.Boolean,System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Creates and returns an ODataComplexValue from the given value.
            </summary>
            <param name="complexType">The value type.</param>
            <param name="value">The complex value.</param>
            <param name="propertyName">If the value is a property, then it represents the name of the property. Can be null, for non-property.</param>
            <param name="isCollectionItem">True, if the value is an item in a collection, false otherwise.</param>
            <param name="visitedComplexTypeObjects">Set of instances of complex types encountered in the hierarchy. Used to detect cycles.</param>
            <returns>An ODataComplexValue representing the given value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.CreateODataEntry(System.Type,System.Object,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation[])">
            <summary>
            Creates and returns an ODataEntry from the given value.
            </summary>
            <param name="entityType">The value type.</param>
            <param name="value">The entry value.</param>
            <param name="properties">The given properties to serialize.</param>
            <returns>An ODataEntry representing the given value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.CreateODataEntries(System.Type,System.Object)">
            <summary>
            Creates and returns an ODataEntry from the given value.
            </summary>
            <param name="entityType">The value type.</param>
            <param name="value">The entry value.</param>
            <returns>An ODataEntry representing the given value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.CreateODataEnumValue(System.Type,System.Object,System.Boolean)">
            <summary>
            Converts CLR value into ODataEnumValue. 
            </summary>
            <param name="enumClrType">The CLR type.</param>
            <param name="value">The Enum value.</param>
            <param name="isCollectionItem">The bool isCollectionItem.</param>
            <returns>An ODataEnumValue instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.CreateODataCollection(System.Type,System.String,System.Object,System.Collections.Generic.HashSet{System.Object},System.Boolean,System.Boolean)">
            <summary>
            Creates and returns an ODataCollectionValue from the given value.
            </summary>
            <param name="collectionItemType">The type of the value.</param>
            <param name="propertyName">If the value is a property, then it represents the name of the property. Can be null, for non-property.</param>
            <param name="value">The value.</param>
            <param name="visitedComplexTypeObjects">Set of instances of complex types encountered in the hierarchy. Used to detect cycles.</param>
            <param name="isDynamicProperty">Whether this collection property is a dynamic property</param>
            <param name="setTypeAnnotation">If true, set the type annotation on ODataValue.</param>
            <returns>An ODataCollectionValue representing the given value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.ConvertPrimitiveValueToRecognizedODataType(System.Object,System.Type)">
            <summary>
            Returns the primitive property value.
            </summary>
            <param name="propertyValue">Value of the property.</param>
            <param name="propertyType">Type of the property.</param>
            <returns>Returns the value of the primitive property.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.GetCollectionName(System.String)">
            <summary>
            Gets the specified type name as an EDM Collection type, e.g. Collection(Edm.String)
            </summary>
            <param name="itemTypeName">Type name of the items in the collection.</param>
            <returns>Collection type name for the specified item type name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.CreateODataPrimitivePropertyValue(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,System.Object)">
            <summary>
            Creates and returns an <see cref="T:Microsoft.OData.Core.ODataValue"/> for the given primitive value.
            </summary>
            <param name="property">The property being converted.</param>
            <param name="propertyValue">The property value to convert..</param>
            <returns>An ODataValue representing the given value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.PopulateProperties(System.Object,System.String,System.Collections.Generic.IEnumerable{Microsoft.OData.Client.Metadata.ClientPropertyAnnotation},System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Creates a list of ODataProperty instances for the given set of properties.
            </summary>
            <param name="resource">Instance of the resource which is getting serialized.</param>
            <param name="serverTypeName">The server type name of the entity whose properties are being populated.</param>
            <param name="properties">The properties to populate into instance of ODataProperty.</param>
            <param name="visitedComplexTypeObjects">Set of instances of complex types encountered in the hierarchy. Used to detect cycles.</param>
            <returns>Populated ODataProperty instances for the given properties.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.TryConvertPropertyValue(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,System.Object,System.String,System.Collections.Generic.HashSet{System.Object},Microsoft.OData.Core.ODataValue@)">
            <summary>
            Tries to convert the given value into an instance of <see cref="T:Microsoft.OData.Core.ODataValue"/>.
            </summary>
            <param name="property">The property being converted.</param>
            <param name="propertyValue">The property value to convert..</param>
            <param name="serverTypeName">The server type name of the entity whose properties are being populated.</param>
            <param name="visitedComplexTypeObjects">Set of instances of complex types encountered in the hierarchy. Used to detect cycles.</param>
            <param name="odataValue">The odata value if one was created.</param>
            <returns>Whether or not the value was converted.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.CreateODataComplexPropertyValue(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,System.Object,System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Returns the value of the complex property.
            </summary>
            <param name="property">Property which contains name, type, is key (if false and null value, will throw).</param>
            <param name="propertyValue">property value</param>
            <param name="visitedComplexTypeObjects">List of instances of complex types encountered in the hierarchy. Used to detect cycles.</param>
            <returns>An instance of ODataComplexValue containing the value of the properties of the given complex type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.CreateODataCollectionPropertyValue(Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,System.Object,System.String,System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Returns the value of the collection property.
            </summary>
            <param name="property">Collection property details. Must not be null.</param>
            <param name="propertyValue">Collection instance.</param>
            <param name="serverTypeName">The server type name of the entity whose properties are being populated.</param>
            <param name="visitedComplexTypeObjects">List of instances of complex types encountered in the hierarchy. Used to detect cycles.</param>
            <returns>An instance of ODataCollectionValue representing the value of the property.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ODataPropertyConverter.AddTypeAnnotationNotDeclaredOnServer(System.String,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation,Microsoft.OData.Core.ODataValue)">
            <summary>
            Adds a type annotation to the value if it is primitive and not defined on the server.
            </summary>
            <param name="serverTypeName">The server type name of the entity whose properties are being populated.</param>
            <param name="property">The current property.</param>
            <param name="odataValue">The already converted value of the property.</param>
        </member>
        <member name="T:Microsoft.OData.Client.PrimitiveTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveTypeConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveTypeConverter.TokenizeFromXml(System.Xml.XmlReader)">
            <summary>
            Create a parser token from xml feed
            </summary>
            <param name="reader">The xml reader</param>
            <remarks>The reader is expected to be placed at the beginning of the element, and after this method call, the reader will be placed
            at the EndElement, such that the next Element will be read in the next Read call.</remarks>
            <returns>token</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveTypeConverter.TokenizeFromText(System.String)">
            <summary>
            Create a parser token from text representation ($value end points)
            </summary>
            <param name="text">The text form reprensentation</param>
            <returns>token</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.BooleanTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.BooleanTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BooleanTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ByteTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ByteTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ByteTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ByteArrayTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ByteArrayTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ByteArrayTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.BinaryTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BinaryTypeConverter.convertToByteArrayMethodInfo">
            <summary>MethodInfo for the ToArray method on the Binary type.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BinaryTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BinaryTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BinaryTypeConverter.ToArray(System.Object)">
            <summary>
            Converts the System.Data.Linq.Binary to byte[] by calling the ToArray method on the Binary type.
            </summary>
            <param name="instance">Instance of Binary type.</param>
            <returns>Byte[] instance containing the value of the Binary type.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.BinaryTypeConverter.BinaryType">
            <summary>
            The delay loaded binary type
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DecimalTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DecimalTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DecimalTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DoubleTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DoubleTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DoubleTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.GuidTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.GuidTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.GuidTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Int16TypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Int16TypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Int16TypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Int32TypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Int32TypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Int32TypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Int64TypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Int64TypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Int64TypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.SingleTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SingleTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SingleTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.StringTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.StringTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.StringTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.SByteTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SByteTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SByteTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.CharTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.CharTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.CharTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.CharArrayTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.CharArrayTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.CharArrayTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ClrTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ClrTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClrTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.UriTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.UriTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.XDocumentTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.XDocumentTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.XDocumentTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.XElementTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.XElementTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.XElementTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DateTimeOffsetTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DateTimeOffsetTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DateTimeOffsetTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.TimeSpanTypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.TimeSpanTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TimeSpanTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.UInt16TypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.UInt16TypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UInt16TypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.UInt32TypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.UInt32TypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UInt32TypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.UInt64TypeConverter">
            <summary>
            Convert between primitive types to string and xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.UInt64TypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UInt64TypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.GeographyTypeConverter">
            <summary>
            Convert between an instance of geography and its Xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.GeographyTypeConverter.TokenizeFromXml(System.Xml.XmlReader)">
            <summary>
            Create an instance of primitive type from the xml reader
            </summary>
            <param name="reader">The xml reader</param>
            <remarks>The reader is expected to be placed at the beginning of the element, and after this method call, the reader will be placed
            at the EndElement, such that the next Element will be read in the next Read call.</remarks>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="T:Microsoft.OData.Client.GeometryTypeConverter">
            <summary>
            Convert between an instance of geometry and its Xml representation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.GeometryTypeConverter.TokenizeFromXml(System.Xml.XmlReader)">
            <summary>
            Create an instance of primitive type from the xml reader
            </summary>
            <param name="reader">The xml reader</param>
            <remarks>The reader is expected to be placed at the beginning of the element, and after this method call, the reader will be placed
            at the EndElement, such that the next Element will be read in the next Read call.</remarks>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="T:Microsoft.OData.Client.NamedStreamTypeConverter">
            <summary>
            Convert between an instance of DataServiceStreamLink and its xml representation.
            There is never a scenario in client which requires to do this, but since a converter
            is required, adding one which does nothing for namedstream.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.NamedStreamTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.NamedStreamTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DateTypeConverter">
            <summary>
            Convert between primitive types Edm.Date and string
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DateTypeConverter.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DateTypeConverter.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.TimeOfDayConvert">
            <summary>
            Convert between primitive types Edm.TimeOfDay and string
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.TimeOfDayConvert.Parse(System.String)">
            <summary>
            Create an instance of primitive type from a string representation
            </summary>
            <param name="text">The string representation</param>
            <returns>An instance of primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TimeOfDayConvert.ToString(System.Object)">
            <summary>
            Convert an instance of primitive type to string
            </summary>
            <param name="instance">The instance</param>
            <returns>The string representation of the instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.PrimitiveType">
            <summary>
            Represent a Primitive Type on the client
            </summary>
            <remarks>
            1) Performance
            For performance reasons we use several dictionaries here:
            - clrMapping contains well known primitive types. Initialized in the static constructor and never changed
              after initialization. Therefore it is safe to read without locks. Also see comment about Binary type below
            - derivedPrimitiveTypeMapping - a map for custom primitive types derived from well known primitive types -  
              especially spatial types. New items may be added at runtime so reads and writes must be locked
            - knownNonPrimitiveTypes - a HashSet of types we have seen and determined they are not primitive. Used
              to shortcircuit logic for finding derived primitive types for types we know are not primitive.
            To get a primitive type one *MUST NOT* clrMapping since clrMapping will not contain custom primitive types
            but call TryGetPrimitiveType method that knows how to handle multiple dictionaries. 
            2) System.Data.Linq.Binary
            We want to avoid static dependency on System.Data.Linq.dll. On the other hand System.Data.Linq.Binary is 
            a well known primitive type. For performance reasons and to avoid locking the clrMapping is only initialized
            in the static ctor when we don't have System.Data.Linq.Binary type handy. Therefore we use the dummy BinaryTypeSub 
            type during initialization. As a result to get a well known primitive type one *MUST NOT* use the clrMapping 
            dictionary directly but call TryGetWellKnownPrimitiveType() method which knows how to handle BinaryType.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.PrimitiveType.clrMapping">
            <summary>
            Clr Type - Primitive Type mapping for well known primitive types
            </summary>
            <remarks>
            It is being initialized in the static constructor and must not change
            later. This way we can avoid locking it. 
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.PrimitiveType.derivedPrimitiveTypeMapping">
            <summary>
            Clr Type - Primitive Type mapping for custom derived primitive type (e.g. spatial types)
            </summary>
            <remarks>
            This dictionary contains type mapping for custom derived primitive types (e.g. spatial) that
            are types discovered at runtime and added as we go. Any access to this dictionary requires locking.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.PrimitiveType.edmMapping">
            <summary>
            Edm Type - Primitive Type mapping
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.PrimitiveType.knownNonPrimitiveTypes">
            <summary>
            Cache containing known non-primitive types. Any access to this hashset requires locking.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.#ctor(System.Type,System.String,Microsoft.OData.Edm.EdmPrimitiveTypeKind,Microsoft.OData.Client.PrimitiveTypeConverter,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="clrType">The Clr Type</param>
            <param name="edmTypeName">The Edm Type Name</param>
            <param name="primitiveKind">The Edm Primitive Type Kind</param>
            <param name="typeConverter">A PrimitiveXmlConverter that provides convertion between  instances of this type to its Xml representation and back</param>
            <param name="hasReverseMapping">Whether this primitive type can be mapped from the Edm type name</param>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.TryGetPrimitiveType(System.Type,Microsoft.OData.Client.PrimitiveType@)">
            <summary>
            Try retrieve a primitive type metadata from a clr type
            </summary>
            <param name="clrType">The Clr Type</param>
            <param name="ptype">The returning primitive type</param>
            <returns>True if the type is found</returns>
            <remarks>
            See remarks for the class. 
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.TryGetPrimitiveType(System.String,Microsoft.OData.Client.PrimitiveType@)">
            <summary>
            Try retrieve a primitive type metadata from a Edm Type Name
            </summary>
            <param name="edmTypeName">Edm Type Name</param>
            <param name="ptype">The returning primitive type</param>
            <returns>True if the type is found</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.IsKnownType(System.Type)">
            <summary>
            Is this a known primitive type (including string,byte[],uri)
            </summary>
            <param name="type">type to analyze</param>
            <returns>true if known primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.IsKnownNullableType(System.Type)">
            <summary>
            Is this a known primitive type or a nullable based on a primitive type (including string,byte[],uri)
            </summary>
            <param name="type">type to analyze, possibly nullable</param>
            <returns>true if known primitive type or a nullable based on a primitive type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.DeleteKnownType(System.Type,System.String)">
            <summary>
            Delete the type from known type table
            </summary>
            <param name="clrType">The clr type</param>
            <param name="edmTypeName">The edm type name to remove, or null</param>
            <remarks>This is a test clean up hook. MUST NOT BE CALLED FROM PRODUCT CODE.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.RegisterKnownType(System.Type,System.String,Microsoft.OData.Edm.EdmPrimitiveTypeKind,Microsoft.OData.Client.PrimitiveTypeConverter,System.Boolean)">
            <summary>
            Register a known type as primitive type
            </summary>
            <param name="clrType">The Clr Type</param>
            <param name="edmTypeName">The Edm Type Name</param>
            <param name="primitiveKind">The Edm Primitive Type Kind</param>
            <param name="converter">The Type Converter</param>
            <param name="twoWay">Whether this mapping should have a reverse mapping from Edm</param>
            <remarks>
            This method is internal only for testing purposes. 
            IN PRODUCT MUST BE CALLED ONLY FROM THE STATIC CTOR OF THE PrimitiveType CLASS.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.CreateEdmPrimitiveType">
            <summary>
            Creates a new instance of the corresponding IEdmPrimitiveType
            </summary>
            <returns>Returns a new instance of the corresponding IEdmPrimitiveType</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.InitializeTypes">
            <summary>
            Populate the mapping table
            </summary>
            <remarks>
            MUST NOT BE CALLED FROM PRODUCT CODE OTHER THAN STATIC CTOR OF PrimitiveType class. 
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.TryGetWellKnownPrimitiveType(System.Type,Microsoft.OData.Client.PrimitiveType@)">
            <summary>
            Tries to get a well known PrimitiveType for a clr type. Contains logic to handle Binary type.
            </summary>
            <param name="clrType">The clr type to get well known PrimitiveType for.</param>
            <param name="ptype">PrimitiveType for the <paramref name="clrType"/> if exists. Otherwise null.</param>
            <returns><c>true</c> if a PrimitiveType for the <paramref name="clrType"/> was found. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.IsBinaryType(System.Type)">
            <summary>
            Whether the <paramref name="type"/> is System.Data.Linq.Binary. 
            </summary>
            <param name="type">Type to check.</param>
            <returns><c>true</c> if <paramref name="type"/> is System.Data.Linq.Binary. Otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.PrimitiveType.ClrType">
            <summary>
            The Clr Type
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.PrimitiveType.EdmTypeName">
            <summary>
            The Edm Type Name
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.PrimitiveType.TypeConverter">
            <summary>
            A PrimitiveXmlConverter that provides convertion between 
            instances of this type to its Xml representation and back
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.PrimitiveType.HasReverseMapping">
            <summary>
            This type has a reverse edm type mapping
            </summary>
            <remarks>
            Some known primitive types have shared edm type mapping
            Only one of these shared type can contain a reverse mapping
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.PrimitiveType.PrimitiveKind">
            <summary>
            Gets the types EDM primitive type kind
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.PrimitiveType.BinaryTypeSub">
            <summary>
            There is no static dependency on System.Data.Linq where Binary type lives. We 
            will use this type to Substitute for the missing Binary type.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType">
            <summary>
            Represents a definition of an EDM primitive type.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType.namespaceName">
            <summary>
            Namespace of the type.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType.name">
            <summary>
            Name of the type.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType.primitiveKind">
            <summary>
            The kind of primitive.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType.#ctor(System.String,System.String,Microsoft.OData.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Creates an instance of the client EDM primitive type.
            </summary>
            <param name="namespaceName">Namespace of the type.</param>
            <param name="name">Name of the type.</param>
            <param name="primitiveKind">Kind fo the primitive type.</param>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType.CreateType(Microsoft.OData.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Creates a new instance of the IEdmPrimitiveType
            </summary>
            <param name="primitiveKind">Kind of primitive type.</param>
            <returns>Returns a new instance of the IEdmPrimitiveType</returns>
        </member>
        <member name="P:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType.Name">
            <summary>
            Name of the type.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType.Namespace">
            <summary>
            Namespace of the type.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType.PrimitiveKind">
            <summary>
            Kind of the primitive type.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType.SchemaElementKind">
            <summary>
            The kind of this schema element.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.PrimitiveType.ClientEdmPrimitiveType.TypeKind">
            <summary>
            Kind of this type.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.PrimitiveParserToken">
            <summary>
            A parser token
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.PrimitiveParserToken.Materialize(System.Type)">
            <summary>
            Materialize this token using a PrimitiveTypeConverter
            </summary>
            <param name="clrType">The primitive type</param>
            <returns>A materialized instance</returns>
        </member>
        <member name="T:Microsoft.OData.Client.TextPrimitiveParserToken">
            <summary>
            Textual based parser token
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.TextPrimitiveParserToken.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text">Textual value</param>
        </member>
        <member name="M:Microsoft.OData.Client.TextPrimitiveParserToken.Materialize(System.Type)">
            <summary>
            Materialize by calling the Parse method on the converter
            </summary>
            <param name="clrType">clrType</param>
            <returns>A materialized instance</returns>
        </member>
        <member name="P:Microsoft.OData.Client.TextPrimitiveParserToken.Text">
            <summary>
            The text property
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.InstancePrimitiveParserToken`1">
            <summary>
            Instance based parser token, where the token is the materialized instance
            </summary>
            <typeparam name="T">The instance type</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.InstancePrimitiveParserToken`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="instance">The instance</param>
        </member>
        <member name="M:Microsoft.OData.Client.InstancePrimitiveParserToken`1.Materialize(System.Type)">
            <summary>
            Materialize by returning the instance
            </summary>
            <param name="clrType">A primitive type converter</param>
            <returns>The instance</returns>
        </member>
        <member name="P:Microsoft.OData.Client.InstancePrimitiveParserToken`1.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ReferenceEqualityComparer">
            <summary>Equality comparer implementation that uses reference equality.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ReferenceEqualityComparer.#ctor">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.ReferenceEqualityComparer"/> instance.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ReferenceEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <summary>Determines whether two objects are the same.</summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>true if both are the same; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ReferenceEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <summary>Serves as hashing function for collections.</summary>
            <param name="obj">Object to hash.</param>
            <returns>
            Hash code for the object; shouldn't change through the lifetime 
            of <paramref name="obj"/>.
            </returns>
        </member>
        <member name="T:Microsoft.OData.Client.ReferenceEqualityComparer`1">
            <summary>
            Use this class to compare objects by reference in collections such as 
            dictionary or hashsets.
            </summary>
            <typeparam name="T">Type of objects to compare.</typeparam>
            <remarks>
            Typically accesses statically as eg 
            ReferenceEqualityComparer&lt;Expression&gt;.Instance.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.ReferenceEqualityComparer`1.instance">
            <summary>Single instance per 'T' for comparison.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ReferenceEqualityComparer`1.#ctor">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.ReferenceEqualityComparer"/> instance.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>Determines whether two objects are the same.</summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>true if both are the same; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>Serves as hashing function for collections.</summary>
            <param name="obj">Object to hash.</param>
            <returns>
            Hash code for the object; shouldn't change through the lifetime 
            of <paramref name="obj"/>.
            </returns>
        </member>
        <member name="P:Microsoft.OData.Client.ReferenceEqualityComparer`1.Instance">
            <summary>Returns a singleton instance for this comparer type.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.GetReadStreamResult">
            <summary>
            Class which implements the <see cref="T:System.IAsyncResult"/> for the GetReadStream operation.
            Note that this effectively behaves as a simple wrapper around the IAsyncResult returned
            by the underlying HttpWebRequest, although it's implemented fully on our own to get the same
            behavior as other IAsyncResult objects returned by the client library.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.GetReadStreamResult.requestMessage">
            <summary>The web request this class wraps (effectively)</summary>
        </member>
        <member name="F:Microsoft.OData.Client.GetReadStreamResult.streamDescriptor">
            <summary>descriptor of the stream which is getting queried.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.GetReadStreamResult.requestInfo">
            <summary>RequestInfo for this request.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.GetReadStreamResult.responseMessage">
            <summary>IODataResponseMessage containing all the response information.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.GetReadStreamResult.#ctor(Microsoft.OData.Client.DataServiceContext,System.String,Microsoft.OData.Client.ODataRequestMessageWrapper,System.AsyncCallback,System.Object,Microsoft.OData.Client.StreamDescriptor)">
            <summary>
            Constructs a new async result object
            </summary>
            <param name="context">The source of the operation.</param>
            <param name="method">Name of the method which is invoked asynchronously.</param>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> object which is wrapped by this async result.</param>
            <param name="callback">User specified callback for the async operation.</param>
            <param name="state">User state for the async callback.</param>
            <param name="streamDescriptor">stream descriptor whose value is getting queried.</param>
        </member>
        <member name="M:Microsoft.OData.Client.GetReadStreamResult.Begin">
            <summary>
            Begins the async request
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.GetReadStreamResult.End">
            <summary>
            Ends the request and creates the response object.
            </summary>
            <returns>The response object for this request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.GetReadStreamResult.Execute">
            <summary>
            Executes the request synchronously.
            </summary>
            <returns>
            The response object for this request.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.GetReadStreamResult.CompletedRequest">
            <summary>invoked for derived classes to cleanup before callback is invoked</summary>
        </member>
        <member name="M:Microsoft.OData.Client.GetReadStreamResult.HandleCompleted(Microsoft.OData.Client.BaseAsyncResult.PerRequest)">
            <summary>Set the AsyncWait and invoke the user callback.</summary>
            <param name="pereq">the request object</param>
            <remarks>This method is not implemented for this class.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.GetReadStreamResult.AsyncEndGetResponse(System.IAsyncResult)">
            <summary>
            Async callback registered with the underlying HttpWebRequest object.
            </summary>
            <param name="asyncResult">The async result associated with the HttpWebRequest operation.</param>
        </member>
        <member name="T:Microsoft.OData.Client.ProjectionAnalyzer">
            <summary>
            Analyzes projection expressions to see if supported.
            To be writable, must follow these rules:
            1)  Must be known Entity Type
            2)  Must be a true narrowing of the source type.  Subset of properties + no transformations other then casts.
            
            To be materializable (read-only), must follow these rules
            1)  No transient object creation. (Entity and non-Entity types)
            2)  No referencing of other DataService queries or contexts.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.Analyze(System.Linq.Expressions.LambdaExpression,Microsoft.OData.Client.ResourceExpression,System.Boolean,Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Analyzes a lambda expression to check whether it can be satisfied with
            $select and client-side materialization.
            </summary>
            <param name="le">Lambda expression.</param>
            <param name="re">Resource expression in scope.</param>
            <param name="matchMembers">Whether member accesses are matched as top-level projections.</param>
            <param name="context">Context of expression to analyze.</param>
            <returns>true if the lambda is a client-side projection; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.IsMethodCallAllowedEntitySequence(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Checks whether the specified <see cref="T:System.Linq.Expressions.MethodCallExpression"/> refers
            to a sequence method call allowed on entity types.
            </summary>
            <param name="call">Method call expression to check.</param>
            <returns>true if the method call is allowed; false otherwise.</returns>
            <remarks>The method won't check whether the call is made on actual entity types.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.CheckChainedSequence(System.Linq.Expressions.MethodCallExpression,System.Type)">
            <summary>
            Checks whether the specified <see cref="T:System.Linq.Expressions.MethodCallExpression"/> refers
            to a Select method call that works on the results of another Select call
            </summary>
            <param name="call">Method call expression to check.</param>
            <param name="type">Type of the projection</param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.IsCollectionProducingExpression(System.Linq.Expressions.Expression)">
            <summary>
            Checks whether the specified expression creates a collection. 
            </summary>
            <param name="e">Expression to check.</param>
            <returns>true if given expression is collection producing.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.IsDisallowedExpressionForMethodCall(System.Linq.Expressions.Expression,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Checks whether the specified expression is allowed in a MethodCall. Expressions that
            produce collections are not allowed. The only exception is when collection property 
            belongs to an entity e.g. c.Orders.Select(o => o), where we allow c.Orders.
            </summary>
            <param name="e">Expression to check.</param>
            <param name="model">The client model used.</param>
            <returns>true if expression is disallowed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.Analyze(System.Linq.Expressions.MemberInitExpression,Microsoft.OData.Client.SelectExpandPathBuilder,Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Analyzes the specified expression with an entity-projection or 
            non-entity-projection analyzer.
            </summary>
            <param name="mie">Expression to analyze.</param>
            <param name="pb">Path box where select and expand paths are tracked.</param>
            <param name="context">Context of expression to analyze.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.AnalyzeResourceExpression(System.Linq.Expressions.LambdaExpression,Microsoft.OData.Client.ResourceExpression,Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Analyzes the specified <paramref name="lambda"/> for selection and updates 
            <paramref name="resource"/>.
            </summary>
            <param name="lambda">Lambda expression to analyze.</param>
            <param name="resource">Resource expression to update.</param>
            <param name="context">Context of expression to analyze.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.SkipConverts(System.Linq.Expressions.Expression)">
            <summary>Skips converts and returns the underlying expression.</summary>
            <param name="expression">Expression to dig into.</param>
            <returns>The original expression without converts.</returns>
            <remarks>
            IMPORTANT: This is fine for checks on underlying expressions where we
            want converts to be "mostly" transparent, but using the result in
            place of the given <paramref name="expression"/> loses information.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionAnalyzer.EntityProjectionAnalyzer.builder">
            <summary>Path-tracking object.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionAnalyzer.EntityProjectionAnalyzer.type">
            <summary>Type being member-init'ed.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionAnalyzer.EntityProjectionAnalyzer.leafExpressionIsMemberAccess">
            <summary>
            This analyzer iterates through the list of member assignments in the MemberInitExpression
            and visits each one. This field tracks if the currently visited member assignment is a
            MemberAccessExpression, used for determining if a TryAs convert should be emitted when visited.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionAnalyzer.EntityProjectionAnalyzer.context">
            <summary>
            The associated DataServiceContext instance. DevNote(shank): this is used for determining
            the fully-qualified name of types when TryAs converts are processed (C# "as", VB "TryCast").
            Ideally the FQN is only required during URI translation, not during analysis. However,
            the current code constructs the $select and $expand parts of the URI during analysis. This
            could be refactored in the future to defer the $select and $expand URI construction until
            the URI translation phase.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.EntityProjectionAnalyzer.#ctor(Microsoft.OData.Client.SelectExpandPathBuilder,System.Type,Microsoft.OData.Client.DataServiceContext)">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.ProjectionAnalyzer.EntityProjectionAnalyzer"/> instance.</summary>
            <param name="pb">Path-tracking object.</param>
            <param name="type">Type being member-init'ed.</param>
            <param name="context">Context of expression to analyze.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.EntityProjectionAnalyzer.Analyze(System.Linq.Expressions.MemberInitExpression,Microsoft.OData.Client.SelectExpandPathBuilder,Microsoft.OData.Client.DataServiceContext)">
            <summary>Analyzes the specified member-init expression.</summary>
            <param name="mie">Expression to analyze.</param>
            <param name="pb">Path-tracking object to store analysis in.</param>
            <param name="context">Context of expression to analyze.</param>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceALinqExpressionVisitor">
            <summary>
            Specific Vistior base class for the DataServiceQueryProvider.  
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceALinqExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Main visit method.
            </summary>
            <param name="exp">Expression to visit</param>
            <returns>Visited expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceALinqExpressionVisitor.VisitQueryableResourceExpression(Microsoft.OData.Client.QueryableResourceExpression)">
            <summary>
            QueryableResourceExpression visit method.
            </summary>
            <param name="rse">QueryableResource expression to visit</param>
            <returns>Visited QueryableResourceExpression expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceALinqExpressionVisitor.VisitNavigationPropertySingletonExpression(Microsoft.OData.Client.NavigationPropertySingletonExpression)">
            <summary>
            NavigationPropertySingletonExpressionvisit method.
            </summary>
            <param name="npse">NavigationPropertySingletonExpression expression to visit</param>
            <returns>Visited NavigationPropertySingletonExpression expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceALinqExpressionVisitor.VisitInputReferenceExpression(Microsoft.OData.Client.InputReferenceExpression)">
            <summary>
            Visit an <see cref="T:Microsoft.OData.Client.InputReferenceExpression"/>, producing a new InputReferenceExpression
            based on the visited form of the <see cref="T:Microsoft.OData.Client.QueryableResourceExpression"/> that is referenced by
            the InputReferenceExpression argument, <paramref name="ire"/>.
            </summary>
            <param name="ire">InputReferenceExpression expression to visit</param>
            <returns>Visited InputReferenceExpression expression</returns>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionAnalyzer.NonEntityProjectionAnalyzer.leafExpressionIsMemberAccess">
            <summary>See corresponding comment in EntityProjectionAnalyzer</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionAnalyzer.NonEntityProjectionAnalyzer.context">
            <summary>See corresponding comment in EntityProjectionAnalyzer</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.NonEntityProjectionAnalyzer.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>Visits a unary expression while initializing a non-entity type structure.</summary>
            <param name="u">Expression to visit.</param>
            <returns>The visited expression.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionAnalyzer.NonEntityProjectionAnalyzer.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits a member access expression in non-entity projections, validating that
            it's correct and recording the path visit to include in a projection if necessary.
            </summary>
            <param name="m">Expression to visit.</param>
            <returns>The same expression.</returns>
            <remarks>
            The projection analyzer runs after funcletization, so a member expression
            rather than a constant expression implies that this is correlated to
            a parameter, by dotting through the argument in valid cases, and possibly
            more complex cases in others like new DSC(p.Orders)*.Var1* &lt;- .Var1 is invalid.
            </remarks>
        </member>
        <member name="T:Microsoft.OData.Client.ProjectionQueryOptionExpression">
            <summary>
            An resource specific expression representing a projection query option.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.QueryOptionExpression">
            <summary>
            An resource specific expression representing a query option.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryOptionExpression.type">
            <summary>The CLR type this node will evaluate into.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOptionExpression.#ctor(System.Type)">
            <summary>
            Creates a QueryOptionExpression expression
            </summary>
            <param name="type">the return type of the expression</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOptionExpression.ComposeMultipleSpecification(Microsoft.OData.Client.QueryOptionExpression)">
            <summary>
            Composes the <paramref name="previous"/> expression with this one when it's specified multiple times.
            </summary>
            <param name="previous"><see cref="T:Microsoft.OData.Client.QueryOptionExpression"/> to compose.</param>
            <returns>
            The expression that results from composing the <paramref name="previous"/> expression with this one.
            </returns>
        </member>
        <member name="P:Microsoft.OData.Client.QueryOptionExpression.Type">
            <summary>
            The <see cref="P:Microsoft.OData.Client.QueryOptionExpression.Type"/> of the value represented by this <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionQueryOptionExpression.lambda">
            <summary>projection expression to evaluate on client on results from server to materialize type</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ProjectionQueryOptionExpression.paths">
            <summary>projection paths to send to the server</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ProjectionQueryOptionExpression.#ctor(System.Type,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a ProjectionQueryOption expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="lambda">projection expression</param>
            <param name="paths">Projection paths for the query option</param>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionQueryOptionExpression.NodeType">
            <summary>
            The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionQueryOptionExpression.Selector">
            <summary>
            expression for the projection
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ProjectionQueryOptionExpression.Paths">
            <summary>
            expression for the projection
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.QueryComponents">
            <summary>Represents the components of query.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.SelectQueryOption">
            <summary>Query option used in projection queries.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.SelectQueryOptionWithQuestionMark">
            <summary>Select query option as it appears at the beginning of a query string.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.SelectQueryOptionWithAmpersand">
            <summary>Select query option as it appears in the middle of a query string.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.SelectQueryOptionWithLeftParen">
            <summary> Select query option as it appears as the beginning of an embedded expand. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.SelectQueryOptionWithSemi">
            <summary> Select query option as it appers as in the middle of an embedded expand. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.lastSegmentType">
            <summary> type </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.normalizerRewrites">
            <summary>Records the generated-to-source rewrites created.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.projection">
            <summary>selector Lambda Expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.httpMethod">
            <summary>HttpMethod to use in the query.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.uriOperationParameters">
            <summary>List of parameters for a service operation or a service function.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.bodyOperationParameters">
            <summary>List of parameters for service action.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.singleResult">
            <summary>
            Optional field; not all codepaths set this.  If true, then a single primitive or complex value is expected.
            If false, then a collection of primitives or complex is expected. A null value makes no claim as to what
            the return type should be. It follows that a single entry or a feed would always have this value as null.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryComponents.version">
            <summary> Version for query </summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryComponents.#ctor(System.Uri,System.Version,System.Type,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
             Constructs a container for query components with HttpMethod GET.
            </summary>
            <param name="uri">URI for the query</param>
            <param name="version">Version for the query</param>
            <param name="lastSegmentType">Element type for the query</param>
            <param name="projection">selector Lambda Expression</param>
            <param name="normalizerRewrites">Records the generated-to-source rewrites created (possibly null).</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryComponents.#ctor(System.Uri,System.Version,System.Type,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression},System.String,System.Nullable{System.Boolean},System.Collections.Generic.List{Microsoft.OData.Client.BodyOperationParameter},System.Collections.Generic.List{Microsoft.OData.Client.UriOperationParameter})">
            <summary>
             Constructs a container for query components
            </summary>
            <param name="uri">URI for the query</param>
            <param name="version">Version for the query</param>
            <param name="lastSegmentType">Element type for the query</param>
            <param name="projection">selector Lambda Expression</param>
            <param name="normalizerRewrites">Records the generated-to-source rewrites created (possibly null).</param>
            <param name="httpMethod">The HttpMethod to be used in the request.</param>
            <param name="singleResult">If true, then a single primitive or complex value is expected. If false, then a collection of primitives or complex 
            is expected. Should be null when expecting a void response, a single entry, or a feed.</param>
            <param name="bodyOperationParameters">The body operation parameters associated with a service action.</param>
            <param name="uriOperationParameters">The uri operation parameters associated with a service function or a service operation.</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryComponents.ContainsSelectQueryOption(System.String)">
            <summary>
            Determines whether or not the specified query string contains the $select query option.
            </summary>
            <param name="queryString">String that may contain $select.</param>
            <returns>True if the specified string contains the $select query option, otherwise false.</returns>
            <remarks>
            This method is specifically looking for patterns that would indicate we really have the specific query option and not something like $selectNew. It also expects that
            any data string being passed to this method has already been escaped, as the things we are looking for specifically contain equals signs that would be escaped if in a data value.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.QueryComponents.NormalizerRewrites">
            <summary>Records the generated-to-source rewrites created.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryComponents.Projection">
            <summary>The projection expression for a query</summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryComponents.LastSegmentType">
            <summary>The last segment type for query</summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryComponents.Version">
            <summary>The data service version associated with the uri</summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryComponents.HttpMethod">
            <summary>The HttpMethod to be used in the query.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryComponents.UriOperationParameters">
            <summary>
            List of operation parameters for service operation or a service function. 
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryComponents.BodyOperationParameters">
            <summary>
            List of operation parameters for a service action.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryComponents.SingleResult">
            <summary>
            Optional field; not all codepaths set this.  If true, then a single primitive or complex value is expected.
            If false, then a collection of primitives or complex is expected. A null value makes no claim as to what
            the return type should be. It follows that a single entry or a feed would always have this value as null.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryComponents.HasSelectQueryOption">
            <summary>
            Gets a value indicating whether the URI for this query has the select query option.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.QueryComponents.Uri">
            <summary>Gets or sets the URI for a query, possibly with query options added to the cached URI.</summary>
            <value> URI with additional query options added if required. </value>
        </member>
        <member name="T:Microsoft.OData.Client.ReflectionUtil">
            <summary>
            Static utility class for identifying methods in Queryable, Sequence, and IEnumerable
            and 
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ReflectionUtil.COUNTPROPNAME">
            <summary>The Collection Count property name</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ReflectionUtil.TryIdentifySequenceMethod(System.Reflection.MethodInfo,Microsoft.OData.Client.SequenceMethod@)">
            <summary>
            Identifies methods as instances of known sequence operators.
            </summary>
            <param name="method">Method info to identify</param>
            <param name="sequenceMethod">Identified sequence operator</param>
            <returns><c>true</c> if method is known; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ReflectionUtil.IsAnyAllMethod(Microsoft.OData.Client.SequenceMethod)">
            <summary>
            Check to see if this is an Any or an All method
            </summary>
            <param name="sequenceMethod">sequence method to check.</param>
            <returns>true if sequence method is Any or All, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ReflectionUtil.GetCanonicalMethodDescription(System.Reflection.MethodInfo)">
            <remarks>
            Requires:
            - no collisions on type names
            - no output or reference method parameters
            </remarks>
            <summary>
            Produces a string description of a method consisting of the name and all parameters,
            where all generic type parameters have been substituted with number identifiers.
            </summary>
            <param name="method">Method to identify.</param>
            <returns>Canonical description of method (suitable for lookup)</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ReflectionUtil.GetAllLinqOperators">
            <summary>
            Returns all static methods in the Queryable and Enumerable classes.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.SequenceMethod">
            <summary>
            Enumeration of known extension methods
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.InputReferenceExpression">
            <summary>
            Represents a reference to a bound resource set in the resource path.
            The type of the input reference is the element type of the set.
            </summary>
            <remarks>
            Because the type of the input reference is the element type of the set,
            it can be used to indicate what a range variable ranges over.
            
            For example, in input.Select(b => b.id), 'input' is an IQueryable of T,
            and 'b' is a parameter of type T. 'b' can be rebound as an input reference
            to 'input' by the InputBinder, which helps in query analysis and
            translation.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.InputReferenceExpression.target">
            <summary>The resource or set referred to by this input reference expression</summary>
        </member>
        <member name="M:Microsoft.OData.Client.InputReferenceExpression.#ctor(Microsoft.OData.Client.ResourceExpression)">
            <summary>
            Constructs a new input reference expression that refers to the specified resource set
            </summary>
            <param name="target">The target resource set that the new expression will reference</param>
        </member>
        <member name="M:Microsoft.OData.Client.InputReferenceExpression.OverrideTarget(Microsoft.OData.Client.QueryableResourceExpression)">
            <summary>
            Retargets this input reference to point to the resource set specified by <paramref name="newTarget"/>.
            </summary>
            <param name="newTarget">The <see cref="T:Microsoft.OData.Client.QueryableResourceExpression"/> that this input reference should use as its target</param>
        </member>
        <member name="P:Microsoft.OData.Client.InputReferenceExpression.Type">
            <summary>
            The <see cref="P:Microsoft.OData.Client.InputReferenceExpression.Type"/> of the value represented by this <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.InputReferenceExpression.NodeType">
            <summary>
            The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.InputReferenceExpression.Target">
            <summary>
            Retrieves the resource set referred to by this input reference expression
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.CountOption">
            <summary>
            The counting option for the resource expression
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.CountOption.None">
            <summary>No counting</summary>
        </member>
        <member name="F:Microsoft.OData.Client.CountOption.CountSegment">
            <summary>
            Translates to the $count segment.
            Example: http://host/service/Categories(1)/Products/$count
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.CountOption.CountQuery">
            <summary>
            Translates to the $count=true query option.
            Example: http://host/service/Products?$count=true
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Evaluator">
            <summary>
            performs funcletization on an expression tree
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="canBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Evaluator.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates if an expression can be evaluated locally.
            </summary>
            <param name="expression">the expression.</param>
            <returns>true/ false if can be evaluated locally</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Evaluator.SubtreeEvaluator.candidates">
            <summary>list of candidates</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Evaluator.SubtreeEvaluator.#ctor(System.Collections.Generic.HashSet{System.Linq.Expressions.Expression})">
            <summary>
            constructs an expression evaluator with a list of candidates
            </summary>
            <param name="candidates">List of expressions to evaluate</param>
        </member>
        <member name="M:Microsoft.OData.Client.Evaluator.SubtreeEvaluator.Eval(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates an expression sub-tree
            </summary>
            <param name="exp">The expression to evaluate.</param>
            <returns>The evaluated expression.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Evaluator.SubtreeEvaluator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit method for visitor
            </summary>
            <param name="exp">the expression to visit</param>
            <returns>visited expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Evaluator.SubtreeEvaluator.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates expression
            </summary>
            <param name="e">the expression to evaluate</param>
            <returns>constant expression with return value of evaluation</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Evaluator.Nominator.functionCanBeEvaluated">
            <summary>func to determine whether expression can be evaluated</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Evaluator.Nominator.candidates">
            <summary>candidate expressions for evaluation</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Evaluator.Nominator.cannotBeEvaluated">
            <summary>flag for when sub tree cannot be evaluated</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Evaluator.Nominator.#ctor(System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Creates the Nominator based on the function passed.
            </summary>
            <param name="functionCanBeEvaluated">
            A Func speficying whether an expression can be evaluated or not.
            </param>
            <returns>visited expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Evaluator.Nominator.Nominate(System.Linq.Expressions.Expression)">
            <summary>
            Nominates an expression to see if it can be evaluated
            </summary>
            <param name="expression">
            Expression to check
            </param>
            <returns>a list of expression sub trees that can be evaluated</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Evaluator.Nominator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit method for walking expression tree bottom up.
            </summary>
            <param name="expression">
            root expression to visit
            </param>
            <returns>visited expression</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ExpressionNormalizer">
            <summary>
            Replaces expression patterns produced by the compiler with approximations
            used in query translation. For instance, the following VB code:
            
                x = y
                
            becomes the expression
            
                Equal(MethodCallExpression(Microsoft.VisualBasic.CompilerServices.Operators.CompareString(x, y, False), 0)
                
            which is normalized to
            
                Equal(x, y)
                
            Comment convention:
            
                CODE(Lang): _VB or C# coding pattern being simplified_
                ORIGINAL: _original LINQ expression_
                NORMALIZED: _normalized LINQ expression_
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionNormalizer.LiftToNull">
            <summary>
            If we encounter a MethodCallExpression, we never need to lift to lift to null. This capability
            exists to translate certain patterns in the language. In this case, the user (or compiler)
            has explicitly asked for a method invocation (at which point, lifting can no longer occur).
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionNormalizer._patterns">
            <summary>
            Gets a dictionary mapping from LINQ expressions to matched by those expressions. Used
            to identify composite expression patterns.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionNormalizer.normalizerRewrites">
            <summary>Records the generated-to-source rewrites created.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>Initializes a new <see cref="T:Microsoft.OData.Client.ExpressionNormalizer"/> instance.</summary>
            <param name="normalizerRewrites">Dictionary in which to store rewrites.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.Normalize(System.Linq.Expressions.Expression,System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Applies normalization rewrites to the specified 
            <paramref name="expression"/>, recording them in the 
            <paramref name="rewrites"/> dictionary.
            </summary>
            <param name="expression">Expression to normalize.</param>
            <param name="rewrites">Dictionary in which to record rewrites.</param>
            <returns>The normalized expression.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handle binary patterns:
            
            - VB 'Is' operator
            - Compare patterns
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            CODE: x
            ORIGINAL: Convert(x, t) where t is assignable from typeof(x)
            ORIGINAL: x as t, where t is assignable from typeof(x)
            ORIGINAL: and typeof(x) or t are not known primitives unless typeof(x) == t
            ORIGINAL: and x is not a collection of entity types
            ORIGINAL: and x is not a enum type
            NORMALIZED: x
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.UnwrapObjectConvert(System.Linq.Expressions.Expression)">
            <summary>
            CODE: x
            ORIGINAL: Convert(x, typeof(object))
            ORIGINAL(Funcletized): Constant(x, typeof(object))
            NORMALIZED: x
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.IsConstantZero(System.Linq.Expressions.Expression)">
            <summary>
            Returns true if the given expression is a constant '0'.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles MethodCall patterns:
            
            - Operator overloads
            - VB operators
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.VisitMethodCallNoRewrite(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles MethodCall patterns (without recording rewrites):
            
            - Operator overloads
            - VB operators
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.NormalizeEnumerableSource(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Remove extra Converts from the source of Any/All/OfType methods
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.NormalizePredicateArgument(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Identifies and normalizes any predicate argument in the given call expression. If no changes
            are needed, returns the existing expression. Otherwise, returns a new call expression
            with a normalized predicate argument.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.HasPredicateArgument(System.Linq.Expressions.MethodCallExpression,System.Int32@)">
            <summary>
            Determines whether the given call expression has a 'predicate' argument (e.g. Where(source, predicate)) 
            and returns the ordinal for the predicate.
            </summary>
            <remarks>
            Obviously this method will need to be replaced if we ever encounter a method with multiple predicates.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.TryMatchCoalescePattern(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression@)">
            <summary>
            Determines whether the given expression of the form Lambda(Coalesce(left, Constant(false)), ...), a pattern
            introduced by the VB compiler for predicate arguments. Returns the 'normalized' version of the expression
            Lambda((bool)left, ...)
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.NormalizeSelectWithTypeCast(System.Linq.Expressions.MethodCallExpression)">
             <summary>
             Identifies and normalizes a Select method call expression of the following form:
                 Select(x => Convert(x))
             If a match is found, it is translated into a Cast() call.
            
             This supports type casting in queries like the following:
                 from DerivedType entity in context.Entities
                 select entity
             Where DerivedType is derived from the type of context.Entities.
             The pattern also applies to SelectMany calls with the same structure as above.
            
             In C#, the type cast above is represented as a Cast call and the ResourceBinder knows how to handle that.
             In VB, the same query is translated into Select(x => Convert(x)) instead of Cast, and the ResourceBinder
             doesn't recognize that pattern. This normalization allows the two queries to be treated the same.
             </summary>
             <param name="callExpression">MethodCallExpression to potentially normalize.</param>
             <returns>
             If the query pattern was found, a Cast call is returned with the same source as the original Select and
             a cast type that is the same as the original Convert expression.
             If no normalization is required, the original MethodCallExpression is returned without changes.
             </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.TryMatchSelectWithConvert(System.Linq.Expressions.MethodCallExpression,System.Type@)">
            <summary>
            Looks for a method call expression of the form
                Select(entity => Convert(entity, DerivedType))
            If found, returns DerivedType.
            </summary>
            <param name="callExpression">Expression to check for pattern match.</param>
            <param name="convertType">If the match was found, this is the type used in the Convert, otherwise null.</param>
            <returns>True if the expression matches the desired pattern, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.TryMatchConvertSingleArgument(System.Linq.Expressions.Expression,System.Type@)">
            <summary>
            Looks for a lambda expression of the form
                related => Convert(related, DerivedType)
            Returns DerivedType if a match was found.
            </summary>
            <param name="expression">Expression to check for pattern match.</param>
            <param name="convertType">
            If the <paramref name="expression"/> matches the pattern, this is the type of the found Convert call, otherwise null.
            </param>
            <returns>True if the expression matches the desired pattern, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.RelationalOperatorPlaceholder``2(``0,``1)">
            <summary>
            This method exists solely to support creation of valid relational operator LINQ expressions that are not natively supported
            by the CLR (e.g. String > String). This method must not be invoked.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.CreateRelationalOperator(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Create an operator relating 'left' and 'right' given a relational operator.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.TryCreateRelationalOperator(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.BinaryExpression@)">
            <summary>
            Try to create an operator relating 'left' and 'right' using the given operator. If the given operator
            does not define a known relation, returns false.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.CreateCompareExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            CODE(C#): Class.Compare(left, right)
            ORIGINAL: MethodCallExpression(Compare, left, right)
            NORMALIZED: Condition(Equal(left, right), 0, Condition(left > right, 1, -1))
            
            Why is this an improvement? We know how to evaluate Condition in the store, but we don't
            know how to evaluate MethodCallExpression... Where the CompareTo appears within a larger expression,
            e.g. left.CompareTo(right) > 0, we can further simplify to left > right (we register the "ComparePattern"
            to make this possible).
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionNormalizer.RecordRewrite(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Records a rewritten expression as necessary.</summary>
            <param name="source">Original source expression.</param>
            <param name="rewritten">Rewritten expression.</param>
            <remarks>
            IMPORTANT: if there are higher-level rewrites such as replacing parameter
            references, the lower-level rewrites will become un-doable in other
            contexts; we will have to change normalization/de-normalization strategy,
            record additional mapping information and/or bubble up the rewrite
            tracking.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.ExpressionNormalizer.NormalizerRewrites">
            <summary>Records the generated-to-source rewrites created.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ExpressionNormalizer.Pattern">
            <summary>
            Encapsulates an expression matching some pattern.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.ExpressionNormalizer.Pattern.Kind">
            <summary>
            Gets pattern kind.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ExpressionNormalizer.PatternKind">
            <summary>
            Gets pattern kind.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ExpressionNormalizer.ComparePattern">
            <summary>
            Matches expression of the form x.CompareTo(y) or Class.CompareTo(x, y)
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionNormalizer.ComparePattern.Left">
            <summary>
            Gets left-hand argument to Compare operation.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionNormalizer.ComparePattern.Right">
            <summary>
            Gets right-hand argument to Compare operation.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.FilterQueryOptionExpression">
            <summary>
            An resource specific expression representing a filter query option.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.FilterQueryOptionExpression.individualExpressions">
            <summary>
            The individual expressions that makes the filter predicate
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.FilterQueryOptionExpression.#ctor(System.Type)">
            <summary>
            Creates a FilterQueryOptionExpression expression
            </summary>
            <param name="type">the return type of the expression</param>
        </member>
        <member name="M:Microsoft.OData.Client.FilterQueryOptionExpression.AddPredicateConjuncts(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Adds the conjuncts to individualExpressions
            </summary>
            <param name="predicates">The predicates.</param>
        </member>
        <member name="M:Microsoft.OData.Client.FilterQueryOptionExpression.GetPredicate">
            <summary>
            Gets the query option value.
            </summary>
            <returns>A predicate with all Conjuncts AND'ed</returns>
        </member>
        <member name="P:Microsoft.OData.Client.FilterQueryOptionExpression.NodeType">
            <summary>
            The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.FilterQueryOptionExpression.PredicateConjuncts">
            <summary>
            Gets the list of individual conjucts which are separated by AND for the predicate
            i.e. if the filter statement is id1=1 and id2="var1" and id3=datetimeoffset'31'
            then this list will have 3 entries, id1=1, id2="var1" and id3=datetimeoffset'xxxxxxxxx'
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.InputBinder">
            <summary>
            Replaces references to resources - represented as either ParameterExpressions or one or more
            MemberExpressions over a ParameterExpression - with an appropriate InputReferenceExpression that
            indicates which resource is referenced; effective 'binds' the argument expression to the
            resources that it references.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.InputBinder.referencedInputs">
            <summary>Tracks which resources are referenced by the argument expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.InputBinder.input">
            <summary>Resource from which valid references must start; if no resource with a transparent scope is present, only direct references to this resource will be rebound</summary>
        </member>
        <member name="F:Microsoft.OData.Client.InputBinder.inputResource">
            <summary>The input resource, as a queryable resource (may be null if the input is actually a NavigationPropertySingletonExpression)</summary>
        </member>
        <member name="F:Microsoft.OData.Client.InputBinder.inputParameter">
            <summary>The ParameterExpression that, if encountered, indicates a reference to the input resource</summary>
        </member>
        <member name="M:Microsoft.OData.Client.InputBinder.#ctor(Microsoft.OData.Client.ResourceExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Constructs a new InputBinder based on the specified input resources, which is represented by the specified ParameterExpression.
            </summary>
            <param name="resource">The current input resource from which valid references must start</param>
            <param name="setReferenceParam">The parameter that must be referenced in order to refer to the specified input resources</param>
        </member>
        <member name="M:Microsoft.OData.Client.InputBinder.Bind(System.Linq.Expressions.Expression,Microsoft.OData.Client.ResourceExpression,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.List{Microsoft.OData.Client.ResourceExpression})">
            <summary>
            Replaces Lambda parameter references or transparent scope property accesses over those Lambda
            parameter references with <see cref="T:Microsoft.OData.Client.InputReferenceExpression"/>s to the appropriate corresponding
            <see cref="T:Microsoft.OData.Client.QueryableResourceExpression"/>s, based on the 'input' QueryableResourceExpression to which the
            Lambda is logically applied and any enclosing transparent scope applied to that input resource.
            </summary>
            <param name="e">The expression to rebind</param>
            <param name="currentInput">
            The 'current input' resource - either the root resource or the
            rightmost resource in the navigation chain.</param>
            <param name="inputParameter">The Lambda parameter that represents a reference to the 'input'</param>
            <param name="referencedInputs">A list that will be populated with the resources that were referenced by the rebound expression</param>
            <returns>
            The rebound version of <paramref name="e"/> where MemberExpression/ParameterExpressions that
            represent resource references have been replaced with appropriate InputReferenceExpressions.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.InputBinder.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Resolves member accesses that represent transparent scope property accesses to the corresponding resource,
            iff the input resource is enclosed in a transparent scope and the specified MemberExpression represents
            such a property access.
            </summary>
            <param name="m">MemberExpression expression to visit</param>
            <returns>
            An InputReferenceExpression if the member access represents a transparent scope property
            access that can be resolved to a resource in the path that produces the input resource;
            otherwise the same MemberExpression is returned.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.InputBinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Converts a parameter reference to the input resource into an InputReferenceExpression,
            iff the parameter reference is to the parameter expression that represents the input resource
            and the input resource is not enclosed in a transparent scope.
            </summary>
            <param name="p">The parameter reference expression</param>
            <returns>
            An InputReferenceExpression if the parameter reference is to the input parameter;
            otherwise the same parameter reference expression
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.InputBinder.CreateReference(Microsoft.OData.Client.ResourceExpression)">
            <summary>
            Returns an <see cref="T:Microsoft.OData.Client.InputReferenceExpression"/> that references the specified resource,
            and also adds the the resource to the hashset of resources that were referenced by the
            expression that is being rebound.
            </summary>
            <param name="resource">The resource for which a reference was found</param>
            <returns>An InputReferenceExpression that represents a reference to the specified resource</returns>
        </member>
        <member name="T:Microsoft.OData.Client.OrderByQueryOptionExpression">
            <summary>
            An resource specific expression representing an OrderBy query option.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.OrderByQueryOptionExpression.selectors">
            <summary> selectors for OrderBy query option</summary>
        </member>
        <member name="M:Microsoft.OData.Client.OrderByQueryOptionExpression.#ctor(System.Type,System.Collections.Generic.List{Microsoft.OData.Client.OrderByQueryOptionExpression.Selector})">
            <summary>
            Creates an OrderByQueryOptionExpression expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="selectors">selectors for orderby expression</param>
        </member>
        <member name="P:Microsoft.OData.Client.OrderByQueryOptionExpression.NodeType">
            <summary>
            The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.OrderByQueryOptionExpression.Selectors">
            <summary>
            Selectors for OrderBy expression
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.OrderByQueryOptionExpression.Selector">
            <summary>
            Structure for selectors.  Holds lambda expression + flag indicating desc.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.OrderByQueryOptionExpression.Selector.Expression">
            <summary>
            lambda expression for selector
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.OrderByQueryOptionExpression.Selector.Descending">
            <summary>
            flag indicating if descending
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.OrderByQueryOptionExpression.Selector.#ctor(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Creates a Selector
            </summary>
            <param name="e">lambda expression for selector</param>
            <param name="descending">flag indicating if descending</param>
        </member>
        <member name="T:Microsoft.OData.Client.ResourceBinder">
            <summary>
            This class provides a Bind method that analyzes an input <see cref="T:System.Linq.Expressions.Expression"/> and returns a bound tree.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.context">
            <summary>
            The associated DataServiceContext instance. DevNote(shank): this is used for determining
            the fully-qualified name of types when TypeAs converts are processed (C# "as", VB "TryCast").
            Ideally the FQN is only required during URI translation, not during analysis. However,
            the current code constructs the $select and $expand parts of the URI during analysis. This
            could be refactored in the future to defer the $select and $expand URI construction until
            the URI translation phase.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.Bind(System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceContext)">
            <summary>Analyzes and binds the specified expression.</summary>
            <param name="e">Expression to bind.</param>
            <param name="context">The context of the expression used for bind.</param>
            <returns>
            The expression with bound nodes (annotated expressions used by 
            the Expression-to-URI translator).
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.IsMissingKeyPredicates(System.Linq.Expressions.Expression)">
            <summary>
            Checks whether the specified <paramref name="expression"/> is 
            missing necessary key predicates.
            </summary>
            <param name="expression">Expression to check.</param>
            <returns>
            true if the expression is a navigation expression and doesn't 
            have the necessary key predicates on the associated resource 
            expression; false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.VerifyKeyPredicates(System.Linq.Expressions.Expression)">
            <summary>
            Verifies that all key predicates are assigned to the specified expression.
            </summary>
            <param name="e">Expression to verify.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.VerifyNotSelectManyProjection(System.Linq.Expressions.Expression)">
            <summary>Verifies that the specified <paramref name="expression"/> is not a projection based on SelectMany.</summary>
            <param name="expression">Expression to check.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.AnalyzePredicate(System.Linq.Expressions.MethodCallExpression,Microsoft.OData.Client.ClientEdmModel)">
            <summary>Analyzes a predicate (Where clause).</summary>
            <param name="mce"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> for a Where call.</param>
            <param name="model">The model.</param>
            <returns>
            An equivalent expression to <paramref name="mce"/>, possibly a different one with additional annotations.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ValidateFilter(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Validates neither operands of the binary expression filter ends with TypeAs
            </summary>
            <param name="exp">filter expression</param>
            <param name="method">method name where this filter is passed to</param>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ExtractKeyPredicate(Microsoft.OData.Client.QueryableResourceExpression,System.Collections.Generic.List{System.Linq.Expressions.Expression},Microsoft.OData.Client.ClientEdmModel,System.Collections.Generic.List{System.Linq.Expressions.Expression}@)">
            <summary>
            Given a list of predicates, extracts key values for the specified <paramref name="target"/>.
            </summary>
            <param name="target">Target set.</param>
            <param name="predicates">Candidate predicates.</param>
            <param name="nonKeyPredicates">Returns list of non-key predicates.</param>
            <returns>List of key predicates if found, otherwise null</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.AddConjuncts(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>Adds all AND'ed expressions to the specified <paramref name="conjuncts"/> list.</summary>
            <param name="e">Expression to recursively add conjuncts from.</param>
            <param name="conjuncts">Target list of conjucts.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.AnalyzeProjection(System.Linq.Expressions.MethodCallExpression,Microsoft.OData.Client.SequenceMethod,System.Linq.Expressions.Expression@)">
            <summary>
            Analyzes the specified call to see whether it is recognized as a 
            projection that is satisfied with $select usage.
            </summary>
            <param name="mce">Call expression to analyze.</param>
            <param name="sequenceMethod">Kind of sequence method to analyze.</param>
            <param name="e">Resulting expression.</param>
            <returns>true if <paramref name="mce"/> is a projection that can be satisfied with $select; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.AnalyzeNavigation(System.Linq.Expressions.MethodCallExpression,Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Analyzes the specified method call as a WCF Data 
            Services navigation operation.
            </summary>
            <param name="mce">Expression to analyze.</param>
            <param name="context">Data service context instance</param>
            <returns>An expression that represents the potential navigation.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.AnalyzeSelectMany(System.Linq.Expressions.MethodCallExpression,Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Analyzes a .Select or .SelectMany method call to determine
            whether it's allowed, to identify transparent identifiers
            in appropriate .SelectMany() cases, returning the method
            call or a resource set expression.
            </summary>
            <param name="mce">Expression to analyze.</param>
            <param name="context">Data service context instance</param>
            <returns>
            <paramref name="mce"/>, or a new resource set expression for
            the target resource in the method call for navigation properties.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.TryAnalyzeSelectManyCollector(Microsoft.OData.Client.ResourceExpression,System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceContext,Microsoft.OData.Client.QueryableResourceExpression@)">
            <summary>
            Analyzes the nav prop reference for a SelectMany method call
            building the appropriate ResourceSetExpression if one can be
            created.
            </summary>
            <param name="input">Input resource expression to the collector</param>
            <param name="navPropRef">The navigation property reference to analyze</param>
            <param name="context">Data service context instance</param>
            <param name="result">The resource set expression</param>
            <returns>true if succesful, else false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.AnalyzeSelectManySelector(System.Linq.Expressions.MethodCallExpression,Microsoft.OData.Client.QueryableResourceExpression,Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Analyzes a SelectMany method call that ranges over a resource set and
            returns the same method or the annotated resource set.
            </summary>
            <param name="selectManyCall">SelectMany method to analyze.</param>
            <param name="sourceResource">Source resource set for SelectMany result.</param>
            <param name="context">Context of expression to analyze.</param>
            <returns>The visited expression.</returns>
            <remarks>
            The <paramref name="sourceResource"/> expression represents the
            navigation produced by the collector of the SelectMany() method call.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.LimitCardinality(System.Linq.Expressions.MethodCallExpression,System.Int32)">
            <summary>Ensures that there's a limit on the cardinality of a query.</summary>
            <param name="mce"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the method to limit First/Single(OrDefault).</param>
            <param name="maxCardinality">Maximum cardinality to allow.</param>
            <returns>
            An expression that limits <paramref name="mce"/> to no more than <paramref name="maxCardinality"/> elements.
            </returns>
            <remarks>This method is used by .First(OrDefault) and .Single(OrDefault) to limit cardinality.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.AnalyzeOfType(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Analyzes the OfType method call
            </summary>
            <param name="mce">The OfType method call expression</param>
            <returns><paramref name="mce"/>, or a resource set expression with ResourceTypeAs set.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.CreateResourceSetExpression(System.Type,Microsoft.OData.Client.ResourceExpression,System.Linq.Expressions.Expression,System.Type)">
            <summary>Creates a new resource set as produced by a navigation.</summary>
            <param name="type">
            The type of the expression as it appears in the tree (possibly 
            with transparent scopes).
            </param>
            <param name="source">The source of the set.</param>
            <param name="memberExpression">The member access on <paramref name="source"/> that yields the set.</param>
            <param name="resourceType">The resource type on the set.</param>
            <returns>A new <see cref="T:Microsoft.OData.Client.QueryableResourceExpression"/> instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.CreateNavigationPropertySingletonExpression(System.Type,Microsoft.OData.Client.ResourceExpression,System.Linq.Expressions.Expression)">
            <summary>Creates a new resource singleton as produced by a navigation.</summary>
            <param name="type">
            The type of the expression as it appears in the tree (possibly 
            with transparent scopes).
            </param>
            <param name="source">The source of the singleton.</param>
            <param name="memberExpression">The member access on <paramref name="source"/> that yields the singleton.</param>
            <returns>A new <see cref="T:Microsoft.OData.Client.NavigationPropertySingletonExpression"/> instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.RemoveTransparentScope(System.Type,Microsoft.OData.Client.QueryableResourceExpression)">
            <summary>
            Produces a new <see cref="T:Microsoft.OData.Client.QueryableResourceExpression"/> that is a clone of <paramref name="input"/> in all respects,
            other than its result type - which will be <paramref name="expectedResultType"/> - and its transparent scope,
            which will be <c>null</c>. This is a shallow clone operation - sequence query options, key predicate, etc are
            not cloned, but are reassigned to the new instance. The <paramref name="input"/> resource expression should be
            discarded after being used with this method.
            </summary>
            <param name="expectedResultType">The result type - <see cref="P:System.Linq.Expressions.Expression.Type"/> - that the new resource set expression should have.</param>
            <param name="input">The resource set expression from which the transparent scope is being removed</param>
            <returns>A new resource set expression without an enclosing transparent scope and with the specified result type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.StripConvertToAssignable(System.Linq.Expressions.Expression)">
            <summary>Returns the specified expression, stripping redundant converts.</summary>
            <param name="e">Expression to return.</param>
            <returns>e, or the underlying expression for redundant converts.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.StripTo``1(System.Linq.Expressions.Expression)">
            <summary>
            Strips the specifed <paramref name="expression"/> of intermediate
            expression (unnecessary converts and quotes) and returns
            the underlying expression of type T (or null if it's not of that type).
            </summary>
            <typeparam name="T">Type of expression to return.</typeparam>
            <param name="expression">Expression to consider.</param>
            <returns>The underlying expression for <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.StripTo``1(System.Linq.Expressions.Expression,System.Type@)">
            <summary>
            Strips the specifed <paramref name="expression"/> of intermediate unnecessary converts
            and quotes, and returns the underlying expression of type T (or null if it's not of that type).
            </summary>
            <typeparam name="T">Type of expression to return.</typeparam>
            <param name="expression">Expression to consider.</param>
            <param name="convertedType">The converted type for typeAs expressions.</param>
            <returns>The underlying expression for <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.StripCastMethodCalls(System.Linq.Expressions.Expression)">
            <summary>Strips calls to .Cast() methods, returning the underlying expression.</summary>
            <param name="expression">Expression to strip calls from.</param>
            <returns>The underlying expression.</returns>
            <remarks>
            Note that this method drops information about what the casts were,
            and is only supported for collector selectors in SelectMany() calls,
            to enable scenarios such as from t in ctx.Tables from Customer c in t.Items...
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.ResourceBinder.Model">
            <summary>Convenience property: model.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ResourceBinder.PatternRules">
            <summary>Use this class to perform pattern-matching over expression trees.</summary>
            <remarks>
            Following these guidelines simplifies usage:
            
            - Return true/false for matches, and interesting matched information in out parameters.
            
            - If one of the inputs to be matched undergoes "skipping" for unnecesary converts,
              return the same member as an out parameter. This forces callers to be aware that
              they should use the more precise representation for computation (without having
              to rely on a normalization step).
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchConvertToAssignable(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Checks whether the <paramref name="expression"/> is a convert that
            always succeeds because it converts to the same target type or a
            base type.
            </summary>
            <param name="expression">Expression to match.</param>
            <returns>
            true if <paramref name="expression"/> is a convert to same or base type; false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchParameterMemberAccess(System.Linq.Expressions.Expression)">
            <summary>
            Checks whether <paramref name="expression"/> is a lambda of the 
            form (p) => p.member[.member]* (possibly quoted).
            </summary>
            <param name="expression">Expression to match.</param>
            <returns>true if the expression is a match; false otherwise.</returns>
            <remarks>
            This method strip .Call methods because it's currently used only
            to supporte .SelectMany() collector selectors. If this method
            is reused for other purposes, this behavior should be made
            conditional or factored out.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchPropertyAccess(System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceContext,System.Linq.Expressions.MemberExpression@,System.Linq.Expressions.Expression@,Microsoft.OData.Client.ALinq.UriParser.PathSegmentToken@,System.Version@)">
            <summary>
            Checks whether the specified expression is a path of member
            access expressions.
            </summary>
            <param name="e">Expression to match.</param>
            <param name="context">Data service context instance</param>
            <param name="member">Expression equivalent to <paramref name="e"/>, without unnecessary converts.</param>
            <param name="instance">Expression from which the path starts.</param>
            <param name="propertyPath">Path of member names from <paramref name="instance"/>.</param>
            <param name="uriVersion">Uri version.</param>
            <returns>true if there is at least one property in the path; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchPropertyAccess(System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceContext,System.Linq.Expressions.MemberExpression@,System.Linq.Expressions.Expression@,System.Collections.Generic.List{System.String}@,System.Version@)">
            <summary>
            Checks whether the specified expression is a path of member
            access expressions.
            </summary>
            <param name="e">Expression to match.</param>
            <param name="context">Data service context instance</param>
            <param name="member">Expression equivalent to <paramref name="e"/>, without unnecessary converts.</param>
            <param name="instance">Expression from which the path starts.</param>
            <param name="propertyPath">Path of member names from <paramref name="instance"/>.</param>
            <param name="uriVersion">Uri version.</param>
            <returns>true if there is at least one property in the path; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNonPrivateReadableProperty(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo@,System.Linq.Expressions.Expression@)">
            <summary>
            Checks whether the specified member expression refers to a member
            that is a non-private property (readable and with getter and/or setter).
            </summary>
            <param name="e">Expression to check.</param>
            <param name="propInfo">Non-null property info when result is true.</param>
            <param name="target">The property access target.</param>
            <returns>Whether the member refers to a non-private, readable property.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchKeyProperty(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo@)">
            <summary>
            Checks whether the specified <paramref name="expression"/> is a member access to a key.
            </summary>
            <param name="expression">Expression to check.</param>
            <param name="property">If this is a key access, the property for the key.</param>
            <returns>true if <paramref name="expression"/> is a member access to a key; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchReferenceEquals(System.Linq.Expressions.Expression)">
            <summary>
            Checks whether the specified <paramref name="expression"/> matches
            a call to System.Object.ReferenceEquals.
            </summary>
            <param name="expression">Expression to check.</param>
            <returns>true if the expression matches; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchResource(System.Linq.Expressions.Expression,Microsoft.OData.Client.ResourceExpression@)">
            <summary>
            Checks whether the specifed <paramref name="expression"/> refers to a resource.
            </summary>
            <param name="expression">Expression to check.</param>
            <param name="resource">Resource expression if successful.</param>
            <returns>true if the expression is a resource expression; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchDoubleArgumentLambda(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression@)">
            <summary>
            Checks whether the specified expression is a lambda with a two parameters
            (possibly quoted).
            </summary>
            <param name="expression">Expression to match.</param>
            <param name="lambda">If the expression matches, the lambda with the two parameters.</param>
            <returns>true if the expression is a lambda with two parameters.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchIdentitySelector(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Checks whether the specified <paramref name="lambda"/> is a selector
            of the form (p) =&gt; p.
            </summary>
            <param name="lambda">Expression to check.</param>
            <returns>true if the lambda is an identity selector; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchSingleArgumentLambda(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression@)">
            <summary>
            Checks whether the specified expression is a lambda with a single parameter
            (possibly quoted).
            </summary>
            <param name="expression">Expression to match.</param>
            <param name="lambda">If the expression matches, the lambda with the single parameter.</param>
            <returns>true if the expression is a lambda with a single argument.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchTransparentIdentitySelector(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Checked whether the specified <paramref name="selector"/> has the
            form [input's transparent scope].[accessor].
            </summary>
            <param name="input">Input expression (source) for the selector.</param>
            <param name="selector">Selector lambda.</param>
            <param name="context">Data service context</param>
            <returns>true if the selector's body looks like [input's transparent scope].[accesor].</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchTransparentScopeSelector(Microsoft.OData.Client.QueryableResourceExpression,System.Linq.Expressions.LambdaExpression,Microsoft.OData.Client.QueryableResourceExpression.TransparentAccessors@)">
            <summary>
            Checks wheter the specified lambda matches a selector that yields
            a transparent identifier.
            </summary>
            <param name="input">
            The input expression for the lambda, used to set up the 
            references from the transparent scope if one is produced.
            </param>
            <param name="resultSelector">Lambda expression to match.</param>
            <param name="transparentScope">
            After invocation, information on the accessors if the result
            is true; null otherwise.
            </param>
            <returns>
            true if <paramref name="input"/> is a selector for a transparent 
            identifier; false otherwise.
            </returns>
            <remarks>
            Note that C# and VB.NET have different patterns for accumulating
            parameters.
            
            C# uses a two-member anonymous type with "everything so far"
            plus the newly introduced range variable.
            
            VB.NET uses an n-member anonymous type by pulling range variables
            from a previous anonymous type (or the first range variable),
            plus the newly introduced range variable.
            
            For additional background, see:
            Transparent Identifiers - http://blogs.msdn.com/wesdyer/archive/2006/12/22/transparent-identifiers.aspx
            http://msdn.microsoft.com/en-us/library/bb308966.aspx
            In particular:
            - 26.7.1.4 From, let, where, join and orderby clauses
            - 26.7.1.7 Transparent identifiers
            
            <paramref name="input"/> is the expression that represents the
            navigation resulting from the collector selector in the
            SelectMany() call under analysis.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchPropertyProjectionRelatedSet(Microsoft.OData.Client.ResourceExpression,System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceContext,System.Linq.Expressions.MemberExpression@)">
            <summary>
            Checks whether the specified <paramref name="input"/> is a member access 
            that references <paramref name="potentialPropertyRef"/>.
            </summary>
            <param name="input">Expression to check.</param>
            <param name="potentialPropertyRef">InputReferenceExpression to consider as source.</param>
            <param name="context">Data service context instance.</param>
            <param name="setNavigationMember">Navigation member, equivalent to <paramref name="potentialPropertyRef"/> without unnecessary casts.</param>
            <returns>
            true if <paramref name="input"/> is a property collection that originates in
            <paramref name="potentialPropertyRef"/>; false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchPropertyProjectionSingleton(Microsoft.OData.Client.ResourceExpression,System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceContext,System.Linq.Expressions.MemberExpression@)">
            <summary>
            Checks whether the specified <paramref name="input"/> is a member access 
            that references <paramref name="potentialPropertyRef"/>.
            </summary>
            <param name="input">Expression to check.</param>
            <param name="potentialPropertyRef">InputReferenceExpression to consider as source.</param>
            <param name="context">Data service context instance</param>
            <param name="propertyMember">Member expression, equivalent to <paramref name="potentialPropertyRef"/> without unnecessary casts.</param>
            <returns>
            true if <paramref name="input"/> is a scalar property or singleton navigation property that originates in
            <paramref name="potentialPropertyRef"/>; false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchPropertyProjection(Microsoft.OData.Client.ResourceExpression,System.Linq.Expressions.Expression,System.Boolean,Microsoft.OData.Client.DataServiceContext,System.Linq.Expressions.MemberExpression@)">
            <summary>
            Checks whether the specified <paramref name="input"/> is a member access with the specified cardinality (per <paramref name="matchSetNavigationProperty"/>)
            that references <paramref name="potentialPropertyRef"/>.
            </summary>
            <param name="input">Expression to check.</param>
            <param name="potentialPropertyRef">InputReferenceExpression to consider as source.</param>
            <param name="matchSetNavigationProperty">
            Whether the match should be for a set of related entities or a singleton property.
            Singleton properties can be scalar types (including collection and other enumerable types like byte[]), complex types, or singleton navigation properties.
            Related set properties are only navigation properties.
            </param>
            <param name="context">Data service context instance.</param>
            <param name="propertyMember">Member expression for accessing the property, equivalent to <paramref name="potentialPropertyRef"/> without unnecessary casts.</param>
            <returns>
            true if <paramref name="input"/> is a property that originates in <paramref name="potentialPropertyRef"/>
            and is the expected cardinality (per <paramref name="matchSetNavigationProperty"/>); false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNot(System.Linq.Expressions.Expression)">
            <summary>
            Checks whether <paramref name="expression"/> is a logical negation
            expression.
            </summary>
            <param name="expression">Expression to check.</param>
            <returns>true if expression is a Not expression; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchSetNavigationProperty(System.Linq.Expressions.Expression,Microsoft.OData.Client.ClientEdmModel)">
            <summary>Checks whether the type of the specified expression could represent a set of related resources.</summary>
            <param name="e">Expression to check.</param>
            <param name="model">The model that the client uses.</param>
            <returns>true if the type of the expression could represent a set of related resources; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNullCheck(System.Linq.Expressions.Expression,System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Checks whether <paramref name="entityInScope"/> is a conditional expression
            that checks whether a navigation property (reference or collection) is
            null before proceeding.
            </summary>
            <param name="entityInScope">Entity in scope to be checked.</param>
            <param name="conditional">Expression to check.</param>
            <returns>Check results.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNullConstant(System.Linq.Expressions.Expression)">
            <summary>Checks whether the specified <paramref name="expression"/> is a null constant.</summary>
            <param name="expression">Expression to check.</param>
            <returns>true if <paramref name="expression"/> is a constant null value; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNewDataServiceCollectionOfT(System.Linq.Expressions.NewExpression)">
            <summary>
            Checks whether <paramref name="nex"/> is a "new DataServiceCollection of T".
            </summary>
            <param name="nex">The expression to match</param>
            <returns>true if the expression matches the "new DataServiceCollection of T" or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNewCollectionOfT(System.Linq.Expressions.NewExpression)">
            <summary>
            Checks whether <paramref name="nex"/> is a "new ICollection of T".
            </summary>
            <param name="nex">The expression to match</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchEquality(System.Linq.Expressions.Expression)">
            <summary>
            Checks whether <paramref name="expression"/> is a check for 
            equality on two expressions.
            </summary>
            <param name="expression">Expression to match.</param>
            <returns>
            A structure describing whether the expression is a match,
            whether it yields true on equality (ie, '==' as opposed to '!='),
            and the compared expressions.
            </returns>
            <remarks>
            This pattern recognizes the following:
            - Calls to object.ReferenceEquals
            - Equality checks (ExpressionNodeType.Equals and ExpressionNodeType.NotEquals)
            - Negation (ExpressionNodeType.Not)
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.ExpressionIsSimpleAccess(System.Linq.Expressions.Expression,System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Checks whether the <paramref name="argument"/> expression is a 
            simple access (standalone or member-access'ed) on one of the
            parameter <paramref name="expressions"/>.
            </summary>
            <param name="argument">Argument to match.</param>
            <param name="expressions">Candidate parameters.</param>
            <returns>
            true if the argument is a parmater or a member from a 
            parameter; false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNaryLambda(System.Linq.Expressions.Expression,System.Int32,System.Linq.Expressions.LambdaExpression@)">
            <summary>
            Checks whether the specified expression is a lambda with a parameterCount parameters
            (possibly quoted).
            </summary>
            <param name="expression">Expression to match.</param>
            <param name="parameterCount">Expected number of parametrs.</param>
            <param name="lambda">If the expression matches, the lambda with the two parameters.</param>
            <returns>true if the expression is a lambda with parameterCount parameters.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNullCheckResult">
            <summary>
            Use this class to represent the results of a match on an expression
            that does a null check before accessing a property.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNullCheckResult.AssignExpression">
            <summary>Expression used to assign a value when the reference is not null.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNullCheckResult.Match">
            <summary>Whether the expression analyzed matches a null check pattern.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchNullCheckResult.TestToNullExpression">
            <summary>Expression being checked againt null.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchEqualityCheckResult">
            <summary>
            Use this class to represent the results of a match on an expression
            that checks for equality .
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchEqualityCheckResult.EqualityYieldsTrue">
            <summary>Whether a positive equality yields 'true' (ie, is this '==' as opposed to '!=').</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchEqualityCheckResult.Match">
            <summary>Whether the expression analyzed matches an equality check pattern.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchEqualityCheckResult.TestLeft">
            <summary>The left-hand side of the check.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.PatternRules.MatchEqualityCheckResult.TestRight">
            <summary>The right-hand side of the check.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ValidationRules.ThrowNotSupportedExceptionForTheFormatOption">
            <summary>
            Throws the NotSupportedException for the $format query option.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ValidationRules.CheckPredicate(System.Linq.Expressions.Expression,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Detect and disallow member access for certain known types, in 'where' requests.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ValidationRules.CheckOrderBy(System.Linq.Expressions.Expression,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Detect and disallow member access for certain known types, in 'orderby' requests.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ValidationRules.DisallowMemberAccessInNavigation(System.Linq.Expressions.Expression,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Used to identify and block navigation to members of collection property in select statement.
            e.g. from c in ctx.Customers select c.CollectionProperty.member
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ValidationRules.DisallowExpressionEndWithTypeAs(System.Linq.Expressions.Expression,System.String)">
            <summary>
            We do not support type identifier at the end of a path.
            For example, these would throw:
            select p as Employee
            select p.BestFriend as Employee
            Expand(p => p.BestFriend as Employee)
            </summary>
            <param name="exp">expression passed to validate</param>
            <param name="method">The context of where <paramref name="exp"/> is applied</param>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ValidationRules.ValidateExpandPath(System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceContext,System.String@,System.Version@)">
            <summary>
            Checks whether the specified <paramref name="input"/> is a valid expand path.
            </summary>
            <param name="input">The lambda expression for the expand path</param>
            <param name="context">Data service context instance.</param>
            <param name="expandPath">Expand path</param>
            <param name="uriVersion">Uri version</param>
        </member>
        <member name="T:Microsoft.OData.Client.ResourceBinder.ValidationRules.WhereAndOrderByChecker">
            <summary>
            Detect and disallow member access for certain known types, in 'where' and 'orderby' requests.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.ResourceBinder.PropertyInfoEqualityComparer">
            <summary>
            Equality and comparison implementation for PropertyInfo.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PropertyInfoEqualityComparer.#ctor">
            <summary>
            private constructor for the singleton pattern
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.PropertyInfoEqualityComparer.Instance">
            <summary>
            Static property which returns the single instance of the EqualityComparer
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PropertyInfoEqualityComparer.Equals(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            Checks whether the given property info's refers to the same property or not.
            </summary>
            <param name="left">first property info</param>
            <param name="right">second property info</param>
            <returns>true if they refer to the same property, otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.PropertyInfoEqualityComparer.GetHashCode(System.Reflection.PropertyInfo)">
            <summary>
            Computes the hashcode for the given property info
            </summary>
            <param name="obj">property info whose hash code needs to be computed.</param>
            <returns>the hashcode for the given property info.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ResourceBinder.ExpressionPresenceVisitor">
            <summary>
            Use this visitor to detect whether an Expression is found in an
            Expression tree.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.ExpressionPresenceVisitor.target">
            <summary>Target expression being sought.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceBinder.ExpressionPresenceVisitor.found">
            <summary>Whether the target has been found.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ExpressionPresenceVisitor.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new <see cref="T:Microsoft.OData.Client.ResourceBinder.ExpressionPresenceVisitor"/> that 
            searches for the given <paramref name="target"/>.
            </summary>
            <param name="target">Target expression to look for.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ExpressionPresenceVisitor.IsExpressionPresent(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Checks whether the specified <paramref name="target"/> can 
            be found in the given <paramref name="tree"/>.
            </summary>
            <param name="target">Expression sought.</param>
            <param name="tree">Expression tree to look into.</param>
            <returns>true if target is found at least once; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ResourceBinder.ExpressionPresenceVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>Visits the specified expression.</summary>
            <param name="exp">Expression to visit.</param>
            <returns>The visited expression (<paramref name="exp"/>).</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ResourceExpressionType">
            <summary>Enum for resource expression types</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.RootResourceSet">
            <summary>ResourceSet Expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.RootSingleResource">
            <summary>Single resource expression, used to represent singleton.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.ResourceNavigationProperty">
            <summary>Resource Navigation Expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.ResourceNavigationPropertySingleton">
            <summary>Resource Navigation Expression to Singleton</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.TakeQueryOption">
            <summary>Take Query Option Expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.SkipQueryOption">
            <summary>Skip Query Option Expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.OrderByQueryOption">
            <summary>OrderBy Query Option Expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.FilterQueryOption">
            <summary>Filter Query Option Expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.InputReference">
            <summary>Reference to a bound component of the resource set path</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.ProjectionQueryOption">
            <summary>Projection Query Option Expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ResourceExpressionType.ExpandQueryOption">
            <summary>Expand Query Option Expression</summary>
        </member>
        <member name="T:Microsoft.OData.Client.NavigationPropertySingletonExpression">
            <summary>Expression for a navigation property into a single entity (eg: Customer.BestFriend).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.NavigationPropertySingletonExpression.memberExpression">
            <summary>property member name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.NavigationPropertySingletonExpression.resourceType">
            <summary> resource type</summary>
        </member>
        <member name="M:Microsoft.OData.Client.NavigationPropertySingletonExpression.#ctor(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.String},Microsoft.OData.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression},Microsoft.OData.Client.ProjectionQueryOptionExpression,System.Type,System.Version)">
            <summary>
            Creates a NavigationPropertySingletonExpression expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="source">the source expression</param>
            <param name="memberExpression">property member name</param>
            <param name="resourceType">resource type for expression</param>
            <param name="expandPaths">expand paths for resource set</param>
            <param name="countOption">count option for the resource set</param>
            <param name="customQueryOptions">custom query options for resourcse set</param>
            <param name="projection">projection expression</param>
            <param name="resourceTypeAs">target expression type for a TypeAs conversion</param>
            <param name="uriVersion">version of the Uri from the expand and projection paths</param>
        </member>
        <member name="M:Microsoft.OData.Client.NavigationPropertySingletonExpression.CreateCloneWithNewType(System.Type)">
            <summary>
            Cast changes the type of the ResourceExpression
            </summary>
            <param name="type">new type</param>
            <returns>new NavigationPropertySingletonExpression</returns>
        </member>
        <member name="P:Microsoft.OData.Client.NavigationPropertySingletonExpression.NodeType">
            <summary>
            The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.NavigationPropertySingletonExpression.MemberExpression">
            <summary>
            Gets the member expression.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.NavigationPropertySingletonExpression.ResourceType">
            <summary>
            The resource type of the singe instance produced by this singleton navigation.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.NavigationPropertySingletonExpression.IsSingleton">
            <summary>
            Singleton navigation properties always produce at most 1 result
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.NavigationPropertySingletonExpression.HasQueryOptions">
            <summary>
            Does Singleton navigation have query options.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.NavigationPropertySingletonExpression.IsOperationInvocation">
            <summary>
            Whether this is a function invocation.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.SkipQueryOptionExpression">
            <summary>
            An resource specific expression representing a skip query option.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SkipQueryOptionExpression.skipAmount">
            <summary>amount to skip</summary>
        </member>
        <member name="M:Microsoft.OData.Client.SkipQueryOptionExpression.#ctor(System.Type,System.Linq.Expressions.ConstantExpression)">
            <summary>
            Creates a SkipQueryOption expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="skipAmount">the query option value</param>
        </member>
        <member name="M:Microsoft.OData.Client.SkipQueryOptionExpression.ComposeMultipleSpecification(Microsoft.OData.Client.QueryOptionExpression)">
            <summary>
            Composes the <paramref name="previous"/> expression with this one when it's specified multiple times.
            </summary>
            <param name="previous"><see cref="T:Microsoft.OData.Client.QueryOptionExpression"/> to compose.</param>
            <returns>
            The expression that results from composing the <paramref name="previous"/> expression with this one.
            </returns>
        </member>
        <member name="P:Microsoft.OData.Client.SkipQueryOptionExpression.NodeType">
            <summary>
            The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.SkipQueryOptionExpression.SkipAmount">
            <summary>
            query option value
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.TakeQueryOptionExpression">
            <summary>
            An resource specific expression representing a take query option.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.TakeQueryOptionExpression.takeAmount">
            <summary>amount to skip</summary>
        </member>
        <member name="M:Microsoft.OData.Client.TakeQueryOptionExpression.#ctor(System.Type,System.Linq.Expressions.ConstantExpression)">
            <summary>
            Creates a TakeQueryOption expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="takeAmount">the query option value</param>
        </member>
        <member name="M:Microsoft.OData.Client.TakeQueryOptionExpression.ComposeMultipleSpecification(Microsoft.OData.Client.QueryOptionExpression)">
            <summary>
            Composes the <paramref name="previous"/> expression with this one when it's specified multiple times.
            </summary>
            <param name="previous"><see cref="T:Microsoft.OData.Client.QueryOptionExpression"/> to compose.</param>
            <returns>
            The expression that results from composing the <paramref name="previous"/> expression with this one.
            </returns>
        </member>
        <member name="P:Microsoft.OData.Client.TakeQueryOptionExpression.NodeType">
            <summary>
            The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.TakeQueryOptionExpression.TakeAmount">
            <summary>
            query option value
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.TypeSystem">
            <summary>Utility functions for processing Expression trees</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeSystem.OfficialSilverLightPublicKeyToken">
            <summary>Used for comparison with external assemblies for silverlight like Microsoft.VisualBasic.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeSystem.OfficialDesktopPublicKeyToken">
            <summary>Used for comparison with external assemblies for desktop like Microsoft.VisualBasic.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeSystem.VisualBasicAssemblyName">
            <summary> VB Assembly name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeSystem.VisualBasicAssemblyPublicKeyToken">
            <summary> VB Assembly public key token</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeSystem.expressionMethodMap">
            <summary> Method map for methods in URI query options</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeSystem.expressionVBMethodMap">
            <summary> VB Method map for methods in URI query options</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeSystem.propertiesAsMethodsMap">
            <summary> Properties that should be represented as methods</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeSystem.ienumerableElementTypeCache">
            <summary>
            Cache used to store element type (TElement) for key Type if key Type implements IEnumerable{TElement} or 
            null if the key Type does not implement IEnumerable{T} e.g.:
            List{Entity} - Entity
            Entity       - null
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.TypeSystem.#cctor">
            <summary>
            Initializes method map
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.TypeSystem.TryGetQueryOptionMethod(System.Reflection.MethodInfo,System.String@)">
            <summary>
            Sees if method has URI equivalent
            </summary>
            <param name="mi">The method info</param>
            <param name="methodName">uri method name</param>
            <returns>true/ false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeSystem.TryGetPropertyAsMethod(System.Reflection.PropertyInfo,System.Reflection.MethodInfo@)">
            <summary>
            Sees if property can be represented as method for translation to URI
            </summary>
            <param name="pi">The property info</param>
            <param name="mi">get method for property</param>
            <returns>true/ false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeSystem.GetElementType(System.Type)">
            <summary>
            Gets the elementtype for a sequence
            </summary>
            <param name="seqType">The sequence type</param>
            <returns>The element type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeSystem.IsPrivate(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether a property is private
            </summary>
            <param name="pi">The PropertyInfo structure for the property</param>
            <returns>true/ false if property is private</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeSystem.FindIEnumerable(System.Type)">
            <summary>
            Finds type that implements IEnumerable so can get element type
            </summary>
            <param name="seqType">The Type to check</param>
            <returns>returns the type which implements IEnumerable</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeSystem.FindIEnumerableForNonPrimitiveType(System.Type)">
            <summary>Finds whether a non-primitive implements IEnumerable and returns element type if it does.</summary>
            <param name="seqType">Type to check.</param>
            <returns>Type of the element if the <paramref name="seqType"/> implements IEnumerable{T}. Otherwise null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeSystem.IsVisualBasicAssembly(System.Reflection.Assembly)">
            <summary>
            Checks if the given assembly is the VisualBasic assembly.
            </summary>
            <param name="assembly">assembly to check.</param>
            <returns>true if the assembly is Microsoft.VisualBasic, otherwise returns false.root
            </returns>
        </member>
        <member name="T:Microsoft.OData.Client.UriHelper">
            <summary>utility class for helping construct uris</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.FORWARDSLASH">
            <summary>forwardslash character</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.LEFTPAREN">
            <summary>leftparan character</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.RIGHTPAREN">
            <summary>rightparan character</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.QUESTIONMARK">
            <summary>questionmark character</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.AMPERSAND">
            <summary>ampersand character</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.EQUALSSIGN">
            <summary>equals character</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.ATSIGN">
            <summary>at sign</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.DOLLARSIGN">
            <summary>dollar sign character</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.SPACE">
            <summary>space</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.COMMA">
            <summary>comma</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.COLON">
            <summary>colon</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.SEMICOLON">
            <summary> semicolon </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.QUOTE">
            <summary>single quote</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.ASTERISK">
            <summary>asterisk</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.OPTIONTOP">
            <summary>top</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.OPTIONSKIP">
            <summary>skip</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.OPTIONORDERBY">
            <summary>orderby</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.OPTIONFILTER">
            <summary>where</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.OPTIONDESC">
            <summary>desc</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.OPTIONEXPAND">
            <summary>expand</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.OPTIONCOUNT">
            <summary>count</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.OPTIONSELECT">
            <summary>select</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.OPTIONFORMAT">
            <summary>The $format query option.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.COUNTTRUE">
            <summary>true</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.COUNT">
            <summary>value</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.AND">
            <summary>and</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.OR">
            <summary>or</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.EQ">
            <summary>eq</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.NE">
            <summary>ne</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.LT">
            <summary>lt</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.LE">
            <summary>le</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.GT">
            <summary>gt</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.GE">
            <summary>ge</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.ADD">
            <summary>add</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.SUB">
            <summary>sub</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.MUL">
            <summary>mul</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.DIV">
            <summary>div</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.MOD">
            <summary>mod</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.NEGATE">
            <summary>negate</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.NOT">
            <summary>not</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.NULL">
            <summary>null</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.ISOF">
            <summary>isof</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.CAST">
            <summary>cast</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.HAS">
            <summary>has</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.ENCODEDATSIGN">
            <summary>The encoded @ sign</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.ENCODEDSQUAREBRACKETSIGN">
            <summary>The encoded [ sign</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriHelper.ENCODEDBRACESIGN">
            <summary>The encoded { sign</summary>
        </member>
        <member name="M:Microsoft.OData.Client.UriHelper.GetTypeNameForUri(System.Type,Microsoft.OData.Client.DataServiceContext)">
            <summary>Gets the type name to be used in the URI for the given <paramref name="type"/>.</summary>
            <param name="type">Type to get name for.</param>
            <param name="context">Data context used to generate type names for types.</param>
            <returns>The name for the <paramref name="type"/>, suitable for including in a URI.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriHelper.GetEntityTypeNameForUriAndValidateMaxProtocolVersion(System.Type,Microsoft.OData.Client.DataServiceContext,System.Version@)">
            <summary>Gets the type name to be used in the URI for the given <paramref name="type"/>.</summary>
            <param name="type">Type to get name for.</param>
            <param name="context">Data context used to generate type names for types.</param>
            <param name="uriVersion">Data service version for the uri</param>
            <returns>The name for the <paramref name="type"/>, suitable for including in a URI.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriHelper.AppendTypeSegment(System.Text.StringBuilder,System.Type,Microsoft.OData.Client.DataServiceContext,System.Boolean,System.Version@)">
            <summary>
            Appends a type segment to the <see cref="T:System.Text.StringBuilder"/> which is building up a URI from a query.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="type">The type for the segment.</param>
            <param name="dataServiceContext">The data service context.</param>
            <param name="inPath">Whether or not the type segment is being appended within the path (as opposed to within a $filter or $orderby expression).</param>
            <param name="version">The current version.</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriHelper.IsPrimitiveValue(System.String)">
            <summary>
            If the value represented by the string is primitive value or not.
            </summary>
            <param name="value">The string value represent the odata value.</param>
            <returns>True if the value is primitive value.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ExpressionWriter">
            <summary>
            Special visitor to serialize supported expression as query parameters
            in the generated URI.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.builder">
            <summary>Internal buffer.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.context">
            <summary>Data context used to generate type names for types.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.expressionStack">
            <summary>Stack of expressions being visited.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.inPath">
            <summary>Whether or not the expression being written is part of the path of the URI.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.cantTranslateExpression">
            <summary>set if can't translate expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.parent">
            <summary>Parent expression of the current expression (expression.Peek()); possibly null.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.uriVersion">
            <summary>the request data service version for the uri</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.scopeCount">
            <summary>number of sub scopes (any/all calls) on stack</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.writingFunctionsInQuery">
            <summary>
            currently writing functions in query options
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.#ctor(Microsoft.OData.Client.DataServiceContext,System.Boolean)">
            <summary>
            Creates an ExpressionWriter for the specified <paramref name="context"/>.
            </summary>
            <param name='context'>Data context used to generate type names for types.</param>
            <param name='inPath'>Whether or not the expression being written is part of the path of the URI.</param>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.ExpressionToString(Microsoft.OData.Client.DataServiceContext,System.Linq.Expressions.Expression,System.Boolean,System.Version@)">
            <summary>
            Serializes an expression to a string
            </summary>
            <param name='context'>Data context used to generate type names for types.</param>
            <param name="e">Expression to serialize</param>
            <param name='inPath'>Whether or not the expression being written is part of the path of the URI.</param>
            <param name="uriVersion">the request data service version for the uri</param>
            <returns>serialized expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.Visit(System.Linq.Expressions.Expression)">
            <summary>Main visit method.</summary>
            <param name="exp">Expression to visit</param>
            <returns>Visited expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            ConditionalExpression visit method
            </summary>
            <param name="c">The ConditionalExpression expression to visit</param>
            <returns>The visited ConditionalExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            LambdaExpression visit method
            </summary>
            <param name="lambda">The LambdaExpression to visit</param>
            <returns>The visited LambdaExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            NewExpression visit method
            </summary>
            <param name="nex">The NewExpression to visit</param>
            <returns>The visited NewExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            MemberInitExpression visit method
            </summary>
            <param name="init">The MemberInitExpression to visit</param>
            <returns>The visited MemberInitExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            ListInitExpression visit method
            </summary>
            <param name="init">The ListInitExpression to visit</param>
            <returns>The visited ListInitExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            NewArrayExpression visit method
            </summary>
            <param name="na">The NewArrayExpression to visit</param>
            <returns>The visited NewArrayExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            InvocationExpression visit method
            </summary>
            <param name="iv">The InvocationExpression to visit</param>
            <returns>The visited InvocationExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitInputReferenceExpression(Microsoft.OData.Client.InputReferenceExpression)">
            <summary>
            Input resource set references are intentionally omitted from the URL string for the top level
            refences to input parameter (i.e. outside of any/all methods).
            For parameter references to input (range variable for Where) inside any/all methods we write "$it".
            </summary>
            <param name="ire">The input reference</param>
            <returns>The same input reference expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            MethodCallExpression visit method
            </summary>
            <param name="m">The MethodCallExpression expression to visit</param>
            <returns>The visited MethodCallExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Serializes an MemberExpression to a string
            </summary>
            <param name="m">Expression to serialize</param>
            <returns>MemberExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            ConstantExpression visit method
            </summary>
            <param name="c">The ConstantExpression expression to visit</param>
            <returns>The visited ConstantExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Serializes an UnaryExpression to a string
            </summary>
            <param name="u">Expression to serialize</param>
            <returns>UnaryExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Serializes an BinaryExpression to a string
            </summary>
            <param name="b">BinaryExpression to serialize</param>
            <returns>serialized expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Serializes an TypeBinaryExpression to a string
            </summary>
            <param name="b">TypeBinaryExpression to serialize</param>
            <returns>serialized expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            ParameterExpression visit method.
            </summary>
            <param name="p">The ParameterExpression expression to visit</param>
            <returns>The visited ParameterExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.AreExpressionTypesCollapsible(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.ExpressionType,Microsoft.OData.Client.ExpressionWriter.ChildDirection)">
            <summary>
            Indicates if two expression types are collapsible, e.g., ((a or b) or c) can be collapsed to (a or b or c).
            </summary>
            <param name="type">The expression type</param>
            <param name="parentType">The expression type of the parent expression</param>
            <param name="childDirection">Indicates if the expression is to the left or the right of the parent expression</param>
            <returns>True if the two expression types are collapsible, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.BinaryPrecedence(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns the precedence of a binary operator for comparison purposes, or -1 if not applicable.
            </summary>
            <param name="type">The ExpressionType representing the binary operator</param>
            <returns>The precedence of a binary operator for comparison purposes, or -1 if not applicable</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitOperand(System.Linq.Expressions.Expression)">
            <summary>
            Visits operands for Binary and Unary expressions.
            Will only output parens if operand is complex expression,
            this is so don't have unecessary parens in URI.
            </summary>
            <param name="e">The operand expression to visit</param>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.VisitOperand(System.Linq.Expressions.Expression,System.Nullable{System.Linq.Expressions.ExpressionType},System.Nullable{Microsoft.OData.Client.ExpressionWriter.ChildDirection})">
            <summary>
            Visits operands for Binary and Unary expressions.
            Will only output parens if operand is complex expression,
            this is so don't have unecessary parens in URI.
            </summary>
            <param name="e">The operand expression to visit</param>
            <param name="parentType">The node type of the parent expression (if applicable)</param>
            <param name="childDirection">Indicates if the expression is to the left or the right of the parent expression</param>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Serializes an expression to a string
            </summary>
            <param name="e">Expression to serialize</param>
            <returns>serialized expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.IsImplicitInputReference(System.Linq.Expressions.Expression)">
            <summary>
            The references to parameter for the main predicate (.Where()) is implicit outside any/all methods.
            </summary>
            <param name="exp">The expression to test</param>
            <returns><c>true</c> if the expression represents a reference to the current (resource set) input and it is not in any/all method; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.HasEnumInBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Check whether this BinaryExpression has enum type in it
            </summary>
            <param name="b">The BinaryExpression to check</param>
            <returns>The checked result</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.IsEnumTypeExpression(System.Linq.Expressions.Expression)">
            <summary>
            Check whether the type of this Expresion is enum
            </summary>
            <param name="e">The BinaryExpression to check</param>
            <returns>The checked result</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.GetEnumType(System.Linq.Expressions.Expression)">
            <summary>
            Get the expected enum type from UnaryExpression
            </summary>
            <param name="e">The Expression to get enum type from</param>
            <returns>The extracted enum type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ExpressionWriter.ConvertConstantExpressionForEnum(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Convert a ConstantExpression into expected enum type
            </summary>
            <param name="constant">The ConstantExpression to convert</param>
            <returns>The converted ConstantExpression</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ExpressionWriter.InSubScope">
            <summary>Whether inside any/all lambda or not</summary>
        </member>
        <member name="T:Microsoft.OData.Client.ExpressionWriter.ChildDirection">
            <summary>
            An enumeration indicating the direction of a child operand
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.ChildDirection.Left">
            <summary>The operand is the left child</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ExpressionWriter.ChildDirection.Right">
            <summary>The operand is the right child</summary>
        </member>
        <member name="T:Microsoft.OData.Client.UriWriter">
            <summary>
            Translates resource bound expression trees into URIs.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriWriter.context">
            <summary>Data context used to generate type names for types.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriWriter.uriBuilder">
            <summary>stringbuilder for constructed URI.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriWriter.alias">
            <summary>The dictionary to store the alias.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriWriter.uriVersion">
            <summary>the request data service version for the uri.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriWriter.cachedQueryOptions">
            <summary>
            For caching query options to be grouped
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.#ctor(Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Private constructor for creating UriWriter
            </summary>
            <param name='context'>Data context used to generate type names for types.</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.Translate(Microsoft.OData.Client.DataServiceContext,System.Boolean,System.Linq.Expressions.Expression,System.Uri@,System.Version@)">
            <summary>
            Translates resource bound expression tree to a URI.
            </summary>
            <param name='context'>Data context used to generate type names for types.</param>
            <param name="addTrailingParens">flag to indicate whether generated URI should include () if leaf is ResourceSet</param>
            <param name="e">The expression to translate</param>
            <param name="uri">uri</param>
            <param name="version">version for query</param>    
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            MethodCallExpression visit method
            </summary>
            <param name="m">The MethodCallExpression expression to visit</param>
            <returns>The visited MethodCallExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            UnaryExpression visit method
            </summary>
            <param name="u">The UnaryExpression expression to visit</param>
            <returns>The visited UnaryExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            BinaryExpression visit method
            </summary>
            <param name="b">The BinaryExpression expression to visit</param>
            <returns>The visited BinaryExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            ConstantExpression visit method
            </summary>
            <param name="c">The ConstantExpression expression to visit</param>
            <returns>The visited ConstantExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            TypeBinaryExpression visit method
            </summary>
            <param name="b">The TypeBinaryExpression expression to visit</param>
            <returns>The visited TypeBinaryExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            ConditionalExpression visit method
            </summary>
            <param name="c">The ConditionalExpression expression to visit</param>
            <returns>The visited ConditionalExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            ParameterExpression visit method
            </summary>
            <param name="p">The ParameterExpression expression to visit</param>
            <returns>The visited ParameterExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            MemberExpression visit method
            </summary>
            <param name="m">The MemberExpression expression to visit</param>
            <returns>The visited MemberExpression expression </returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            LambdaExpression visit method
            </summary>
            <param name="lambda">The LambdaExpression to visit</param>
            <returns>The visited LambdaExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            NewExpression visit method
            </summary>
            <param name="nex">The NewExpression to visit</param>
            <returns>The visited NewExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            MemberInitExpression visit method
            </summary>
            <param name="init">The MemberInitExpression to visit</param>
            <returns>The visited MemberInitExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            ListInitExpression visit method
            </summary>
            <param name="init">The ListInitExpression to visit</param>
            <returns>The visited ListInitExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            NewArrayExpression visit method
            </summary>
            <param name="na">The NewArrayExpression to visit</param>
            <returns>The visited NewArrayExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            InvocationExpression visit method
            </summary>
            <param name="iv">The InvocationExpression to visit</param>
            <returns>The visited InvocationExpression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitNavigationPropertySingletonExpression(Microsoft.OData.Client.NavigationPropertySingletonExpression)">
            <summary>
            NavigationPropertySingletonExpression visit method.
            </summary>
            <param name="npse">NavigationPropertySingletonExpression expression to visit</param>
            <returns>Visited NavigationPropertySingletonExpression expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitQueryableResourceExpression(Microsoft.OData.Client.QueryableResourceExpression)">
            <summary>
            QueryableResourceExpression visit method.
            </summary>
            <param name="rse">QueryableResourceExpression expression to visit</param>
            <returns>Visited QueryableResourceExpression expression</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitOperationInvocation(Microsoft.OData.Client.QueryableResourceExpression)">
            <summary>
            Visit Function Invocation
            </summary>
            <param name="rse">Resource Expression with function invocation</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitQueryOptions(Microsoft.OData.Client.ResourceExpression)">
            <summary>
            Visit Query options for Resource
            </summary>
            <param name="re">Resource Expression with query options</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitQueryOptionExpression(Microsoft.OData.Client.SkipQueryOptionExpression)">
            <summary>
            SkipQueryOptionExpression visit method.
            </summary>
            <param name="sqoe">SkipQueryOptionExpression expression to visit</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitQueryOptionExpression(Microsoft.OData.Client.TakeQueryOptionExpression)">
            <summary>
            TakeQueryOptionExpression visit method.
            </summary>
            <param name="tqoe">TakeQueryOptionExpression expression to visit</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitQueryOptionExpression(Microsoft.OData.Client.FilterQueryOptionExpression)">
            <summary>
            FilterQueryOptionExpression visit method.
            </summary>
            <param name="fqoe">FilterQueryOptionExpression expression to visit</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitQueryOptionExpression(Microsoft.OData.Client.OrderByQueryOptionExpression)">
            <summary>
            OrderByQueryOptionExpression visit method.
            </summary>
            <param name="oboe">OrderByQueryOptionExpression expression to visit</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitExpandOptions(System.Collections.Generic.List{System.String})">
            <summary>
            VisitExpandOptions visit method.
            </summary>
            <param name="paths">Expand Paths</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitProjectionPaths(System.Collections.Generic.List{System.String})">
            <summary>
            ProjectionPaths visit method.
            </summary>
            <param name="paths">Projection Paths</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitCountQueryOptions">
            <summary>
            VisitCountQueryOptions visit method.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.VisitCustomQueryOptions(System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression})">
            <summary>
            VisitCustomQueryOptions visit method.
            </summary>
            <param name="options">Custom query options</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.AddAsCachedQueryOption(System.String,System.String)">
            <summary>
            Caches query option to be grouped
            </summary>
            <param name="optionKey">The key.</param>
            <param name="optionValue">The value</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.AppendCachedQueryOptionsToUriBuilder">
            <summary>
            Append all cached query options to uri.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.UriWriter.ExpressionToString(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>Serializes an expression to a string.</summary>
            <param name="expression">Expression to serialize</param>
            <param name='inPath'>Whether or not the expression being written is part of the path of the URI.</param>
            <returns>The serialized expression.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceQueryProvider">
            <summary>
            QueryProvider implementation
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQueryProvider.Context">
            <summary>DataServiceContext for query provider</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryProvider.#ctor(Microsoft.OData.Client.DataServiceContext)">
            <summary>Constructs a query provider based on the context passed in </summary>
            <param name="context">The context for the query provider</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>Factory method for creating DataServiceOrderedQuery based on expression </summary>
            <param name="expression">The expression for the new query</param>
            <returns>new DataServiceQuery</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>Factory method for creating DataServiceOrderedQuery based on expression </summary>
            <typeparam name="TElement">generic type</typeparam>
            <param name="expression">The expression for the new query</param>
            <returns>new DataServiceQuery</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>Creates and executes a DataServiceQuery based on the passed in expression</summary>
            <param name="expression">The expression for the new query</param>
            <returns>the results</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>Creates and executes a DataServiceQuery based on the passed in expression</summary>
            <typeparam name="TResult">generic type</typeparam>
            <param name="expression">The expression for the new query</param>
            <returns>the results</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryProvider.ReturnSingleton``1(System.Linq.Expressions.Expression)">
            <summary>Creates and executes a DataServiceQuery based on the passed in expression which results a single value</summary>
            <typeparam name="TElement">generic type</typeparam>
            <param name="expression">The expression for the new query</param>
            <returns>single valued results</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryProvider.Translate(System.Linq.Expressions.Expression)">
            <summary>Builds the Uri for the expression passed in.</summary>
            <param name="e">The expression to translate into a Uri</param>
            <returns>Query components</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ArraySet`1">
            <summary>a set, collection of unordered, distinct objects, implemented as an array</summary>
            <typeparam name="T">element type</typeparam>
        </member>
        <member name="F:Microsoft.OData.Client.ArraySet`1.items">
            <summary>item array of T</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ArraySet`1.count">
            <summary>count of elements in the items array</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ArraySet`1.version">
            <summary>number of Add and RemoveAt operations</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.#ctor(System.Int32)">
            <summary>
            array set with an intial capacity
            </summary>
            <param name="capacity">initial capacity</param>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.Add(`0,System.Func{`0,`0,System.Boolean})">
            <summary>add new element to the set</summary>
            <param name="item">element to add</param>
            <param name="equalityComparer">equality comparison function to avoid duplicates</param>
            <returns>true if actually added, false if a duplicate was discovered</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.Contains(`0,System.Func{`0,`0,System.Boolean})">
            <summary>is the element contained within the set</summary>
            <param name="item">item to find</param>
            <param name="equalityComparer">comparer</param>
            <returns>true if the element is contained</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.GetEnumerator">
            <summary>
            enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.IndexOf(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Find the current index of element within the set</summary>
            <param name="item">item to find</param>
            <param name="comparer">comparision function</param>
            <returns>index of the item else (-1)</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.IndexOf``1(``0,System.Func{`0,``0},System.Func{``0,``0,System.Boolean})">
            <summary>Find the current index of element within the set</summary>
            <typeparam name="K">selected type</typeparam>
            <param name="item">item to find</param>
            <param name="select">selector for item to compare</param>
            <param name="comparer">item to compare</param>
            <returns>index of the item else (-1)</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Remove the matched item from within the set</summary>
            <param name="item">item to find within the set</param>
            <param name="equalityComparer">comparer to find item to remove</param>
            <returns>the item that was actually contained else its default</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.RemoveAt(System.Int32)">
            <summary>Remove an item at a specific index from within the set</summary>
            <param name="index">index of item to remove within the set</param>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.Sort``1(System.Func{`0,``0},System.Func{``0,``0,System.Int32})">
            <summary>Sort array based on selected value out of item being stored</summary>
            <typeparam name="K">selected type</typeparam>
            <param name="selector">selector</param>
            <param name="comparer">comparer</param>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.TrimToSize">
            <summary>Sets the capacity to the actual number of elements in the ArraySet.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.IdentitySelect(`0)">
            <summary>identity selector, returns self</summary>
            <param name="arg">input</param>
            <returns>output</returns>
        </member>
        <member name="P:Microsoft.OData.Client.ArraySet`1.Count">
            <summary>count of elements in the set</summary>
        </member>
        <member name="P:Microsoft.OData.Client.ArraySet`1.Item(System.Int32)">
            <summary>get an item from an index in the set</summary>
            <param name="index">index to access</param>
        </member>
        <member name="T:Microsoft.OData.Client.ArraySet`1.SelectorComparer`1">
            <summary>Compare selected value out of t</summary>
            <typeparam name="K">comparison type</typeparam>
        </member>
        <member name="F:Microsoft.OData.Client.ArraySet`1.SelectorComparer`1.Selector">
            <summary>Select something out of T</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ArraySet`1.SelectorComparer`1.Comparer">
            <summary>Comparer of selected value</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ArraySet`1.SelectorComparer`1.System#Collections#Generic#IComparer{T}#Compare(`0,`0)">
            <summary>Compare</summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <returns>int</returns>
        </member>
        <member name="T:Microsoft.OData.Client.AtomMaterializerLog">
            <summary>
            Use this class to keep a log of changes done by the materializer.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.AtomMaterializerLog.mergeOption">
            <summary> The merge option. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.AtomMaterializerLog.clientEdmModel">
            <summary> The client edm model. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.AtomMaterializerLog.entityTracker">
            <summary> The entity tracker. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.AtomMaterializerLog.appendOnlyEntries">
            <summary>Dictionary of identity URI to instances created during previous AppendOnly moves.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.AtomMaterializerLog.identityStack">
            <summary>Dictionary of identity URI to tracked entities.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.AtomMaterializerLog.links">
            <summary>List of link descriptors (data for links and state).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.AtomMaterializerLog.insertRefreshObject">
            <summary>Target instance to refresh.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.#ctor(Microsoft.OData.Client.MergeOption,Microsoft.OData.Client.ClientEdmModel,Microsoft.OData.Client.EntityTrackerBase)">
            <summary>
            Initializes a new <see cref="T:Microsoft.OData.Client.AtomMaterializerLog"/> instance.
            </summary>
            <param name="mergeOption">The merge option for the log.</param>
            <param name="model">The model for the log.</param>
            <param name="entityTracker">The entity tracker for the log.</param>
            <remarks>
            Note that the merge option can't be changed.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.MergeEntityDescriptorInfo(Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.EntityDescriptor,System.Boolean,Microsoft.OData.Client.MergeOption)">
            <summary>
            This method is used to merge all the metadata that come in the response payload.
            </summary>
            <param name="trackedEntityDescriptor">entityDescriptor that is getting tracked by the client</param>
            <param name="entityDescriptorFromMaterializer">entityDescriptor that is returned by the materializer</param>
            <param name="mergeInfo">if true, we will need to merge all entity descriptor info, otherwise not.</param>
            <param name="mergeOption">merge option depending on which etag information needs to be merged.</param>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.ApplyToContext">
            <summary>Applies all accumulated changes to the associated data context.</summary>
            <remarks>The log should be cleared after this method successfully executed.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.Clear">
            <summary>Clears all state in the log.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.FoundExistingInstance(Microsoft.OData.Client.Materialization.MaterializerEntry)">
            <summary>
            Invoke this method to notify the log that an existing
            instance was found while resolving an object.
            </summary>
            <param name="entry">Entry for instance.</param>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.FoundTargetInstance(Microsoft.OData.Client.Materialization.MaterializerEntry)">
            <summary>
            Invoke this method to notify the log that the
            target instance of a "directed" update was found.
            </summary>
            <param name="entry">Entry found.</param>
            <remarks>
            The target instance is typically the object that we
            expect will get refreshed by the response from a POST
            method.
            
            For example if a create a Customer and POST it to
            a service, the response of the POST will return the
            re-serialized instance, with (important!) server generated
            values and URIs.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.TryResolve(Microsoft.OData.Client.Materialization.MaterializerEntry,Microsoft.OData.Client.Materialization.MaterializerEntry@)">
            <summary>Attempts to resolve an entry from those tracked in the log.</summary>
            <param name="entry">Entry to resolve.</param>
            <param name="existingEntry">
            After invocation, an existing entry with the same identity as 
            <paramref name="entry"/>; possibly null.
            </param>
            <returns>true if an existing entry was found; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.AddedLink(Microsoft.OData.Client.Materialization.MaterializerEntry,System.String,System.Object)">
            <summary>
            Invoke this method to notify the log that a new link was
            added to a collection.
            </summary>
            <param name="source">
            Instance with the collection to which <paramref name="target"/> 
            was added.
            </param>
            <param name="propertyName">Property name for collection.</param>
            <param name="target">Object which was added.</param>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.CreatedInstance(Microsoft.OData.Client.Materialization.MaterializerEntry)">
            <summary>
            Invoke this method to notify the log that a new instance
            was created.
            </summary>
            <param name="entry">Entry for the created instance.</param>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.RemovedLink(Microsoft.OData.Client.Materialization.MaterializerEntry,System.String,System.Object)">
            <summary>
            Invoke this method to notify the log that a link was removed 
            from a collection.
            </summary>
            <param name="source">
            Instance with the collection from which <paramref name="target"/> 
            was removed.
            </param>
            <param name="propertyName">Property name for collection.</param>
            <param name="target">Object which was removed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.SetLink(Microsoft.OData.Client.Materialization.MaterializerEntry,System.String,System.Object)">
            <summary>
            Invoke this method to notify the log that a link was set on
            a property.
            </summary>
            <param name="source">Entry for source object.</param>
            <param name="propertyName">Name of property set.</param>
            <param name="target">Target object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.IsEntity(Microsoft.OData.Client.Materialization.MaterializerEntry)">
            <summary>
            Returns true the specified entry represents an entity.
            </summary>
            <param name="entry">The materializer entry</param>
            <returns>True if the entry represents an entity.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.AtomMaterializerLog.IsEntity(System.Object,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Returns true the specified entry represents an entity.
            </summary>
            <param name="entity">The resolved instance</param>
            <param name="model">The client model.</param>
            <returns>True if the entry represents an entity.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.AtomMaterializerLog.Tracking">
            <summary>Whether changes are being tracked.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.BindingPropertyKind">
            <summary>Type of property stored in BindingPropertyInfo.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingPropertyKind.BindingPropertyKindComplex">
            <summary>Property type is a complex type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingPropertyKind.BindingPropertyKindEntity">
            <summary>Property type is an entity type with keys.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingPropertyKind.BindingPropertyKindDataServiceCollection">
            <summary>Property is a DataServiceCollection.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingPropertyKind.BindingPropertyKindPrimitiveOrComplexCollection">
            <summary>Property is a collection of primitives or complex types.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.BindingEntityInfo">
            <summary>Cache of information about entity types and their observable properties</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingEntityInfo.FalseObject">
            <summary>Object reference used as a 'False' flag.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingEntityInfo.TrueObject">
            <summary>Object reference used as a 'True' flag.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingEntityInfo.metadataCacheLock">
            <summary>Lock on metadata caches.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingEntityInfo.knownNonEntityTypes">
            <summary>Types which are known not to be entity types.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingEntityInfo.knownObservableCollectionTypes">
            <summary>Types which are known to be (or not) collection types.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingEntityInfo.bindingEntityInfos">
            <summary>Mapping between types and their corresponding entity information</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingEntityInfo.GetObservableProperties(System.Type,Microsoft.OData.Client.ClientEdmModel)">
            <summary>Obtain binding info corresponding to a given type</summary>
            <param name="entityType">Type for which to obtain information</param>
            <param name="model">the client model.</param>
            <returns>Info about the <paramref name="entityType"/></returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingEntityInfo.GetClientType(System.Type,Microsoft.OData.Client.ClientEdmModel)">
            <summary>Gets the ClientType corresponding to the given type</summary>
            <param name="entityType">Input type</param>
            <param name="model">The client model.</param>
            <returns>Corresponding ClientType</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingEntityInfo.GetEntitySet(System.Object,System.String,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Get the entity set name for the target entity object.
            </summary>
            <param name="target">An entity object.</param>
            <param name="targetEntitySet">The 'currently known' entity set name for the target object.</param>
            <param name="model">The client model.</param>
            <returns>The entity set name for the target object.</returns>
            <remarks>
            Allow user code to provide the entity set name. If user code does not provide the entity set name, then 
            this method will get the entity set name from the value of the EntitySetAttribute.
            The 'currently known' entity set name for top level collections can be provided through OEC constructor
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BindingEntityInfo.IsDataServiceCollection(System.Type,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Determine if the specified type is an DataServiceCollection.
            </summary>
            <remarks>
            If there a generic class in the inheritance hierarchy of the type, that has a single
            entity type paramenter T, and is assignable to DataServiceCollection(Of T), then
            the type is an DataServiceCollection.
            </remarks>
            <param name="collectionType">An object type specifier.</param>
            <param name="model">The client model.</param>
            <returns>true if the type is an DataServiceCollection; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingEntityInfo.IsEntityType(System.Type,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Determine if the specified type is an entity type.
            </summary>
            <param name="type">An object type specifier.</param>
            <param name="model">The client model.</param>
            <returns>true if the type is an entity type; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingEntityInfo.TryGetPropertyValue(System.Object,System.String,Microsoft.OData.Client.ClientEdmModel,Microsoft.OData.Client.BindingEntityInfo.BindingPropertyInfo@,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation@,System.Object@)">
            <summary>
            Tries to get the value of a property and corresponding BindingPropertyInfo or ClientPropertyAnnotation if the property exists
            </summary>
            <param name="source">Source object whose property needs to be read</param>
            <param name="sourceProperty">Name of the source object property</param>
            <param name="model">The client model.</param>
            <param name="bindingPropertyInfo">BindingPropertyInfo corresponding to <paramref name="sourceProperty"/></param>
            <param name="clientProperty">Instance of ClientProperty corresponding to <paramref name="sourceProperty"/></param>
            <param name="propertyValue">Value of the property</param>
            <returns>true if the property exists and the value was read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingEntityInfo.GetBindingEntityInfoFor(System.Type,Microsoft.OData.Client.ClientEdmModel)">
            <summary>Obtain binding info corresponding to a given type</summary>
            <param name="entityType">Type for which to obtain information</param>
            <param name="model">The client model.</param>
            <returns>Info about the <paramref name="entityType"/></returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingEntityInfo.CanBeComplexType(System.Type)">
            <summary>Checks whether a given type can be a complex type i.e. implements INotifyPropertyChanged.</summary>
            <param name="type">Input type.</param>
            <returns>true if the type is complex type, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingEntityInfo.GetEntitySetAttribute(System.Type,Microsoft.OData.Client.ClientEdmModel)">
            <summary>Gets entity set corresponding to a given type</summary>
            <param name="entityType">Intput type</param>
            <param name="model">The client model.</param>
            <returns>Entity set name for the type</returns>
        </member>
        <member name="T:Microsoft.OData.Client.BindingEntityInfo.BindingPropertyInfo">
            <summary>Information about a property interesting for binding</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingEntityInfo.BindingPropertyInfo.PropertyInfo">
            <summary>Property information</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingEntityInfo.BindingPropertyInfo.PropertyKind">
            <summary>Kind of the property i.e. complex, entity or collection.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.BindingEntityInfo.BindingEntityInfoPerType">
            <summary>Holder of information about entity properties for a type</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingEntityInfo.BindingEntityInfoPerType.observableProperties">
            <summary>Collection of properties interesting to the observer</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingEntityInfo.BindingEntityInfoPerType.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingEntityInfo.BindingEntityInfoPerType.EntitySet">
            <summary>Entity set of the entity</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingEntityInfo.BindingEntityInfoPerType.ClientType">
            <summary>Corresponding ClientTyp</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingEntityInfo.BindingEntityInfoPerType.ObservableProperties">
            <summary>Collection of properties interesting to the observer</summary>
        </member>
        <member name="T:Microsoft.OData.Client.VertexColor">
            <summary>
            Color of each vertex to be used for Depth First Search
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.VertexColor.White">
            <summary>White color means un-visited</summary>
        </member>
        <member name="F:Microsoft.OData.Client.VertexColor.Gray">
            <summary>Gray color means added to queue for DFS</summary>
        </member>
        <member name="F:Microsoft.OData.Client.VertexColor.Black">
            <summary>Black color means already visited hence reachable from root</summary>
        </member>
        <member name="T:Microsoft.OData.Client.BindingGraph">
            <summary>
            The BindingGraph maps objects tracked by the DataServiceContext to vertices in a 
            graph used to manage the information needed for data binding. The objects tracked 
            by the BindingGraph are entity type objects and observable entity collections.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingGraph.observer">
            <summary>The observer of the graph</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingGraph.graph">
            <summary>Graph containing entities, collections and their relationships</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.#ctor(Microsoft.OData.Client.BindingObserver)">
            <summary>Constructor</summary>
            <param name="observer">Observer of the graph</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.AddDataServiceCollection(System.Object,System.String,System.Object,System.String)">
            <summary>Adds a DataServiceCollection to the graph</summary>
            <param name="source">Source object for the collection, this object has navigation property corresponding to collection</param>
            <param name="sourceProperty">Property in <paramref name="source"/> that corresponds to the collection</param>
            <param name="collection">Collection being added</param>
            <param name="collectionEntitySet">Entity set of entities in the collection</param>
            <returns>true if a new vertex had to be created, false if it already exists</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.AddPrimitiveOrComplexCollection(System.Object,System.String,System.Object,System.Type)">
            <summary>Adds a collection of primitives or complex types to the graph</summary>
            <param name="source">Source object for the collection, this object has property corresponding to collection</param>
            <param name="sourceProperty">Property in <paramref name="source"/> that corresponds to the collection</param>
            <param name="collection">Collection being added</param>
            <param name="collectionItemType">Type of item in the collection</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.AddEntity(System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>Adds an entity to the graph</summary>
            <param name="source">Source object for the entity, this object has navigation property that links to entity</param>
            <param name="sourceProperty">Property in <paramref name="source"/> that links to entity</param>
            <param name="target">Entity being added</param>
            <param name="targetEntitySet">Entity set of entity being added</param>
            <param name="edgeSource">Item from which the directed edge in the graph goes into <paramref name="target"/>. This can be a collection</param>
            <returns>true if a new vertex had to be created, false if it already exists</returns>
            <remarks>
            This method processes the current 'target' entity and then recursively moves into the graph through
            the navigation properties. The 'source' is a previously processed item - it is the 'parent'
            of the target entity.
            The code generated EntitySetAttribute is processed by this method.
            A source entity can reference the target entity directly through an entity reference navigation property, 
            or indirectly through a collection navigation property.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.RemoveDataServiceCollectionItem(System.Object,System.Object,System.String)">
            <summary>
            Removes the <paramref name="item"/> from the binding graph
            </summary>
            <param name="item">Item to remove</param>
            <param name="parent">Parent of the <paramref name="item"/></param>
            <param name="parentProperty">Parent property that refers to <paramref name="item"/></param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.RemoveComplexTypeCollectionItem(System.Object,System.Object)">
            <summary>
            Removes the <paramref name="item"/> from the binding graph
            </summary>
            <param name="item">Item to remove</param>
            <param name="collection">Collection that contains the <paramref name="item"/></param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.RemoveCollection(System.Object)">
            <summary>Removes all of a collection's items from the graph, but does not remove the collection.</summary>
            <param name="source">Collection containing the items to remove.</param>
            <remarks>This is used for both DataServiceCollection and collections of primitives or complex types.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.RemoveRelation(System.Object,System.String)">
            <summary>Removes a relationship between two items based on source and relation label</summary>
            <param name="source">Source item</param>
            <param name="relation">Label for relation</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.RemoveNonTrackedEntities">
            <summary>Remove all non-tracked entities from the graph</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.GetDataServiceCollectionItems(System.Object)">
            <summary>
            Returns a sequence of items belonging to a collection. Uses the children of a collection
            vertex for this enumeration.
            </summary>
            <param name="collection">Collection being enumerated.</param>
            <returns>Sequence of items belonging to the collection.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Reset">
            <summary>Reset the graph after detaching notifications for everything</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.RemoveUnreachableVertices">
            <summary>Removes the un-reachable vertices from the graph and un-registers notification handlers</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.GetDataServiceCollectionInfo(System.Object,System.Object@,System.String@,System.String@,System.String@)">
            <summary>Get the binding information for a DataServiceCollection</summary>
            <param name="collection">Collection</param>
            <param name="source">The source object that reference the target object through a navigation property.</param>
            <param name="sourceProperty">The navigation property in the source object that reference the target object.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="targetEntitySet">The entity set name of the target object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.GetPrimitiveOrComplexCollectionInfo(System.Object,System.Object@,System.String@,System.Type@)">
            <summary>Get the binding information for a collection</summary>
            <param name="collection">Collection</param>
            <param name="source">The source object that reference the target object through a collection property.</param>
            <param name="sourceProperty">The collection property in the source object that reference the target object.</param>
            <param name="collectionItemType">Type of item in the collection</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.GetAncestorEntityForComplexProperty(System.Object@,System.String@,System.Object@)">
            <summary>
            Obtains the closest ancestor entity type in the graph corresponding to a complex object vertex.
            </summary>
            <param name="entity">On input this is a complex object, on output it is the closest entity ancestor.</param>
            <param name="propertyName">On input this is a complex object's member property name, on output it is the name of corresponding property of the ancestor entity.</param>
            <param name="propertyValue">On input this is a complex object's member property value, on output it is the value of the corresponding property of the ancestor entity.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.AddComplexObject(System.Object,System.String,System.Object)">
            <summary>
            Adds a complex typed object to the graph, also traverses all the child complex properties and adds them.
            </summary>
            <param name="source">Source object that contains the complex object, can be an entity, complex object, or a collection.</param>
            <param name="sourceProperty">Source property of complex type, is null if complex type is in a collection, otherwise is the property that references the complex object on source. </param>
            <param name="target">Target complex object value.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.AddComplexObjectsFromCollection(System.Object,System.Collections.IEnumerable)">
            <summary>
            Adds complex items to the graph from the specified collection.
            </summary>
            <param name="collection">Collection that contains <paramref name="collectionItems"/>.</param>
            <param name="collectionItems">Items in <paramref name="collection"/> to add to the binding graph. May be only a subset of the total items in <paramref name="collection"/> .</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.AddFromProperties(System.Object)">
            <summary>Add items to the graph, from the <paramref name="entity"/> object's properties</summary>
            <param name="entity">Object whose properties are to be explored</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.AttachDataServiceCollectionNotification(System.Object)">
            <summary>Attach the CollectionChanged handler to an DataServiceCollection.</summary>
            <param name="target">An DataServiceCollection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.AttachPrimitiveOrComplexCollectionNotification(System.Object)">
            <summary>Attach the CollectionChanged handler to a collection of primitives or complex types.</summary>
            <param name="collection">An ICollection of T, where T is the type of the item in the collection.</param>
            <returns>True if the collection is attached; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.AttachEntityOrComplexObjectNotification(System.Object)">
            <summary>Attach the PropertyChanged handler to an entity or complex object.</summary>
            <param name="target">An entity or complex object.</param>
            <returns>True if the target is attached; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.DetachNotifications(System.Object)">
            <summary>Detach CollectionChanged or PropertyChanged handlers from the target</summary>
            <param name="target">An entity object or collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.DetachCollectionNotifications(System.Object)">
            <summary>Detach CollectionChanged handlers from the target</summary>
            <param name="target">A collection object</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.SetObserver``1(System.Collections.ICollection)">
            <summary>
            Sets the observer for a child DataServiceCollection
            </summary>
            <typeparam name="T">Entity type for the collection</typeparam>
            <param name="collection">Non-typed collection interface</param>
        </member>
        <member name="T:Microsoft.OData.Client.BindingGraph.Graph">
            <summary>Graph implementation for tracking entities, collections for binding</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingGraph.Graph.vertices">
            <summary>Vertices of the graph, which also hold edges</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingGraph.Graph.root">
            <summary>The root vertex for the graph, DFS traversals start from this vertex</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.AddVertex(System.Object)">
            <summary>Adds vertex to the graph</summary>
            <param name="item">Item corresponding to vertex</param>
            <returns>Newly created vertex</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.ClearEdgesForVertex(Microsoft.OData.Client.BindingGraph.Vertex)">
            <summary>Removes all edges going out of and coming into the given vertex</summary>
            <param name="v">Vertex whose edges are to be cleared</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.ExistsVertex(System.Object)">
            <summary>
            Checks if a vertex exists corresponding to given <paramref name="item"/>
            </summary>
            <param name="item">Item to lookup</param>
            <returns>true if vertex found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.LookupVertex(System.Object)">
            <summary>Looksup the vertex corresponding to <paramref name="item"/></summary>
            <param name="item">Item to lookup</param>
            <returns>Vertex corresponding to item</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.AddEdge(System.Object,System.Object,System.String)">
            <summary>
            Adds edge between vertices corresponding to <paramref name="source"/> and <paramref name="target"/>
            objects which will be labeled with <paramref name="label"/>
            </summary>
            <param name="source">Outgoing end of the edge</param>
            <param name="target">Incoming end of the edge</param>
            <param name="label">Label for the vertex</param>
            <returns>Newly created edge</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.RemoveEdge(System.Object,System.Object,System.String)">
            <summary>
            Removes edge between vertices corresponding to <paramref name="source"/> and <paramref name="target"/>
            objects which was labeled with <paramref name="label"/>
            </summary>
            <param name="source">Outgoing end of the edge</param>
            <param name="target">Incoming end of the edge</param>
            <param name="label">Label for the vertex</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.ExistsEdge(System.Object,System.Object,System.String)">
            <summary>
            Checks if an edge exists between <paramref name="source"/> and <paramref name="target"/> labeled
            with <paramref name="label"/>
            </summary>
            <param name="source">Outgoing end of the edge</param>
            <param name="target">Incoming end of the edge</param>
            <param name="label">Label for the vertex</param>
            <returns>true if an edge exists between source and target with given label, false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.Select(System.Func{System.Object,System.Boolean})">
            <summary>
            Selects collection of objects tracked by the graph based on the given filter
            </summary>
            <param name="filter">Filter for the objects</param>
            <returns>Filtered list of objects tracked by the graph</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.Reset(System.Action{System.Object})">
            <summary>
            Removes everything from the graph after applying <paramref name="action"/>
            </summary>
            <param name="action">Action to apply before removal of each node</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.RemoveUnreachableVertices(System.Action{System.Object})">
            <summary>Remove all vertices from graph that are unreachable from the root collection vertex</summary>
            <param name="detachAction">Action to perform for each removed vertex</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Graph.UnreachableVertices">
            <summary>Collects all vertices unreachable from the root collection vertex</summary>
            <returns>Sequence of vertices that are unreachable from the root collection vertex</returns>
            <remarks>
            Performs a depth first traversal of the graph starting from the root collection
            vertex and checks if some vertices were unreachable was reached while doing the traversal.
            Alogrithm from Introduction to Algorithms 22.2 by Cormen et al.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Graph.Root">
            <summary>Root vertex of the graph</summary>
        </member>
        <member name="T:Microsoft.OData.Client.BindingGraph.Vertex">
            <summary>Vertex of the <see cref="T:Microsoft.OData.Client.BindingGraph.Graph"/></summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingGraph.Vertex.incomingEdges">
            <summary>Collection of incoming edges for the vertex</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingGraph.Vertex.outgoingEdges">
            <summary>Collection of outgoing edges for the vertex</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Vertex.#ctor(System.Object)">
            <summary>Constructor</summary>
            <param name="item">Item corresponding to vertex</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Vertex.GetDataServiceCollectionInfo(System.Object@,System.String@,System.String@,System.String@)">
            <summary>Get the binding information for a collection vertex</summary>
            <param name="source">The source object that reference the target object through a navigation property corresponding to current collection vertex.</param>
            <param name="sourceProperty">The navigation property in the source object that reference the target object.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="targetEntitySet">The entity set of the target object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Vertex.GetPrimitiveOrComplexCollectionInfo(System.Object@,System.String@,System.Type@)">
            <summary>Get the binding information for a collection vertex</summary>
            <param name="source">The source object that reference the target object through a collection property corresponding to current collection vertex.</param>
            <param name="sourceProperty">The collection property in the source object that references the collection object.</param>
            <param name="collectionItemType">Type of item in the collection.</param>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.Item">
            <summary>Item corresponding to the vertex</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.EntitySet">
            <summary>Entity set of the item held by the vertex</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.IsDataServiceCollection">
            <summary>Is item a DataServiceCollection object</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.IsComplex">
            <summary>Is item a complex type object</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.IsPrimitiveOrEnumOrComplexCollection">
            <summary>Is item a collection of primitives or enum or complex types</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.PrimitiveOrComplexCollectionItemType">
            <summary>Type of items in the collection if this items represents a collection of primitives or complex types</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.Parent">
            <summary>Parent vertex, only exists for non-top level collection vertices or complex objects</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.ParentProperty">
            <summary>Property of the <see cref="P:Microsoft.OData.Client.BindingGraph.Vertex.Parent"/> object that associates this vertex with it's parent</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.IsRootDataServiceCollection">
            <summary>Is item a root collection object</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.Color">
            <summary>Color of the vertex</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.IncomingEdges">
            <summary>Edges coming into this vertex</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Vertex.OutgoingEdges">
            <summary>Edges going out of this vertex</summary>
        </member>
        <member name="T:Microsoft.OData.Client.BindingGraph.Edge">
            <summary>
            Edge between two vertices of graph, directed and labeled
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingGraph.Edge.Equals(Microsoft.OData.Client.BindingGraph.Edge)">
            <summary>IEquatable override</summary>
            <param name="other">Comparand</param>
            <returns>true if equal, false otherwise</returns>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Edge.Source">
            <summary>Source vertex</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Edge.Target">
            <summary>Target vertex</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingGraph.Edge.Label">
            <summary>Label of the edge</summary>
        </member>
        <member name="T:Microsoft.OData.Client.BindingObserver">
            <summary>The BindingObserver class</summary>
        </member>
        <member name="F:Microsoft.OData.Client.BindingObserver.bindingGraph">
            <summary>
            The BindingGraph maps objects tracked by the DataServiceContext to vertices in a 
            graph used to manage the information needed for data binding. The objects tracked 
            by the BindingGraph are entities, complex types and DataServiceCollections.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.#ctor(Microsoft.OData.Client.DataServiceContext,System.Func{Microsoft.OData.Client.EntityChangedParams,System.Boolean},System.Func{Microsoft.OData.Client.EntityCollectionChangedParams,System.Boolean})">
            <summary>Constructor</summary>
            <param name="context">The DataServiceContext associated with the BindingObserver.</param>
            <param name="entityChanged">EntityChanged delegate.</param>
            <param name="collectionChanged">EntityCollectionChanged delegate.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.StartTracking``1(Microsoft.OData.Client.DataServiceCollection{``0},System.String)">
            <summary>Start tracking the specified DataServiceCollection.</summary>
            <typeparam name="T">An entity type.</typeparam>
            <param name="collection">An DataServiceCollection.</param>
            <param name="collectionEntitySet">The entity set of the elements in <paramref name="collection"/>.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.StopTracking">
            <summary>Stop tracking the root DataServiceCollection associated with the observer.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.LookupParent``1(Microsoft.OData.Client.DataServiceCollection{``0},System.Object@,System.String@)">
            <summary>
            Looks up parent entity that references <param ref="collection" />.
            </summary>
            <typeparam name="T">Type of DataServiceCollection.</typeparam>
            <param name="collection">DataService collection</param>
            <param name="parentEntity">Parent entity that references <param ref="collection" />. May return null if there is none.</param>
            <param name="parentProperty">Navigation property in the parentEntity that references <param ref="collection" />. May return null if there is no parent entity.</param>
            <returns>True if parent entity was found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Handle changes to tracked entity.</summary>
            <param name="source">The entity that raised the event.</param>
            <param name="eventArgs">Information about the event such as changed property name.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.OnDataServiceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Handle changes to tracked DataServiceCollection.</summary>
            <param name="collection">The DataServiceCollection that raised the event.</param>
            <param name="eventArgs">Information about the event such as added/removed entities, operation.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.OnPrimitiveOrComplexCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Handle changes to collection properties.</summary>
            <param name="sender">The collection that raised the event.</param>
            <param name="e">Information about the event such as added/removed items, operation.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.HandleAddEntity(System.Object,System.String,System.String,System.Collections.ICollection,System.Object,System.String)">
            <summary>Handle Adds to a tracked DataServiceCollection. Perform operations on context to reflect the changes.</summary>
            <param name="source">The source object that reference the target object through a navigation property.</param>
            <param name="sourceProperty">The navigation property in the source object that reference the target object.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="collection">The collection containing the target object.</param>
            <param name="target">The target entity to attach.</param>
            <param name="targetEntitySet">The entity set name of the target object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.HandleDeleteEntity(System.Object,System.String,System.String,System.Collections.ICollection,System.Object,System.String)">
            <summary>Handle Deletes from a tracked DataServiceCollection. Perform operations on context to reflect the changes.</summary>
            <param name="source">The source object that reference the target object through a navigation property.</param>
            <param name="sourceProperty">The navigation property in the source object that reference the target object.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="collection">The collection containing the target object.</param>
            <param name="target">The target entity.</param>
            <param name="targetEntitySet">The entity set name of the target object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.HandleUpdateEntityReference(System.Object,System.String,System.String,System.Object,System.String)">
            <summary>Handle changes to navigation properties of a tracked entity. Perform operations on context to reflect the changes.</summary>
            <param name="source">The source object that reference the target object through a navigation property.</param>
            <param name="sourceProperty">The navigation property in the source object that reference the target object.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="target">The target entity.</param>
            <param name="targetEntitySet">The entity set name of the target object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.IsContextTrackingEntity(System.Object)">
            <summary>Determine if the DataServiceContext is tracking the specified entity.</summary>
            <param name="entity">An entity object.</param>
            <returns>true if the entity is tracked; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.HandleUpdateEntity(System.Object,System.String,System.Object)">
            <summary>
            Handle changes to an entity object tracked by the BindingObserver
            </summary>
            <param name="entity">The entity object that has changed.</param>
            <param name="propertyName">The property of the target entity object that has changed.</param>
            <param name="propertyValue">The value of the changed property of the target object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.OnAddToDataServiceCollection(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Object,System.String,System.String,System.Object)">
            <summary>Processes the INotifyCollectionChanged.Add event.</summary>
            <param name="eventArgs">Event information such as added items.</param>
            <param name="source">Parent entity to which collection belongs.</param>
            <param name="sourceProperty">Parent entity property referring to collection.</param>
            <param name="targetEntitySet">Entity set of the collection.</param>
            <param name="collection">Collection that changed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.OnRemoveFromDataServiceCollection(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Object,System.String,System.Object)">
            <summary>Processes the INotifyCollectionChanged.Remove event.</summary>
            <param name="eventArgs">Event information such as deleted items.</param>
            <param name="source">Parent entity to which collection belongs.</param>
            <param name="sourceProperty">Parent entity property referring to collection.</param>
            <param name="collection">Collection that changed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.RemoveWithDetachDataServiceCollection(System.Object)">
            <summary>Removes a collection from the binding graph and detaches each item.</summary>
            <param name="collection">Collection whose elements are to be removed and detached.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.DeepRemoveDataServiceCollection(System.Collections.IEnumerable,System.Object,System.String,System.Action{System.Object})">
            <summary>Performs a Deep removal of all entities in a collection.</summary>
            <param name="collection">Collection whose items are removed from binding graph.</param>
            <param name="source">Parent item whose property refer to the <paramref name="collection"/> being cleared.</param>
            <param name="sourceProperty">Property of the <paramref name="source"/> that refers to <paramref name="collection"/>.</param>
            <param name="itemValidator">Validation method if any that checks the individual item in <paramref name="collection"/> for validity.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.OnAddToComplexTypeCollection(System.Object,System.Collections.IList)">
            <summary>
            Handles additions to collections of complex types.
            </summary>
            <param name="collection">Collection that contains the new items.</param>
            <param name="newItems">Items that were added to the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.OnRemoveFromComplexTypeCollection(System.Object,System.Collections.IList)">
            <summary>
            Handles removals from collections of complex types.
            </summary>
            <param name="collection">Collection that no longer contains the items.</param>
            <param name="items">Items that were removed from the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.OnChangesSaved(System.Object,Microsoft.OData.Client.SaveChangesEventArgs)">
            <summary>Handle the DataServiceContext.SaveChanges operation.</summary>
            <param name="sender">DataServiceContext for the observer.</param>
            <param name="eventArgs">Information about SaveChanges operation results.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.CollectUnTrackingInfo(System.Object,System.Object,System.String,System.Collections.Generic.IList{Microsoft.OData.Client.BindingObserver.UnTrackingInfo})">
            <summary>Collects a list of entities that observer is supposed to stop tracking</summary>
            <param name="currentEntity">Entity being delete along with it's children</param>
            <param name="parentEntity">Parent of the <paramref name="currentEntity"/></param>
            <param name="parentProperty">Property by which <paramref name="parentEntity"/> refers to <paramref name="currentEntity"/></param>
            <param name="entitiesToUnTrack">List in which entities to be untracked are collected</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.IsContextTrackingLink(System.Object,System.String,System.Object)">
            <summary>Determine if the DataServiceContext is tracking link between <paramref name="source"/> and <paramref name="target"/>.</summary>
            <param name="source">The source object side of the link.</param>
            <param name="sourceProperty">A property in the source side of the link that references the target.</param>
            <param name="target">The target object side of the link.</param>
            <returns>True if the link is tracked; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.IsDetachedOrDeletedFromContext(System.Object)">
            <summary>Checks whether the given entity is in detached or deleted state.</summary>
            <param name="entity">Entity being checked.</param>
            <returns>true if the entity is detached or deleted, otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingObserver.ValidateDataServiceCollectionItem(System.Object)">
            <summary>Entity validator that checks if the <paramref name="target"/> is of entity type.</summary>
            <param name="target">Entity being validated.</param>
        </member>
        <member name="P:Microsoft.OData.Client.BindingObserver.Context">
            <summary>The DataServiceContext associated with the BindingObserver.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingObserver.AttachBehavior">
            <summary>The behavior of add operations should be Attach or Add on the context.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingObserver.DetachBehavior">
            <summary>The behavior of remove operations should be Detach on the context.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingObserver.EntityChanged">
            <summary>
            Callback invoked when a property of an entity object tracked by the BindingObserver has changed.
            </summary>
            <remarks>
            Entity objects tracked by the BindingObserver implement INotifyPropertyChanged. Events of this type
            flow throw the EntityChangedParams. If this callback is not implemented by user code, or the user code
            implementation returns false, the BindingObserver executes a default implementation for the callback.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.BindingObserver.CollectionChanged">
            <summary>
            Callback invoked when an DataServiceCollection tracked by the BindingObserver has changed.
            </summary>
            <remarks>
            DataServiceCollection objects tracked by the BindingObserver implement INotifyCollectionChanged.  
            Events of this type flow throw the EntityCollectionChanged callback. If this callback is not 
            implemented by user code, or the user code implementation returns false, the BindingObserver executes 
            a default implementation for the callback.
            </remarks>
        </member>
        <member name="T:Microsoft.OData.Client.BindingObserver.UnTrackingInfo">
            <summary>Information regarding each entity to be untracked</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingObserver.UnTrackingInfo.Entity">
            <summary>Entity to untrack</summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingObserver.UnTrackingInfo.Parent">
            <summary>Parent object of <see cref="P:Microsoft.OData.Client.BindingObserver.UnTrackingInfo.Entity"/></summary>
        </member>
        <member name="P:Microsoft.OData.Client.BindingObserver.UnTrackingInfo.ParentProperty">
            <summary>Parent object property referring to <see cref="P:Microsoft.OData.Client.BindingObserver.UnTrackingInfo.Entity"/></summary>
        </member>
        <member name="T:Microsoft.OData.Client.BindingUtils">
            <summary>Utilities for binding related operations</summary>
        </member>
        <member name="M:Microsoft.OData.Client.BindingUtils.ValidateEntitySetName(System.String,System.Object)">
            <summary>
            Throw if the entity set name is null or empty
            </summary>
            <param name="entitySetName">entity set name.</param>
            <param name="entity">entity instance for which the entity set name is generated.</param>
        </member>
        <member name="M:Microsoft.OData.Client.BindingUtils.GetCollectionEntityType(System.Type)">
            <summary>
            Given a collection type, gets it's entity type
            </summary>
            <param name="collectionType">Input collection type</param>
            <returns>Generic type argument for the collection</returns>
        </member>
        <member name="M:Microsoft.OData.Client.BindingUtils.VerifyObserverNotPresent``1(System.Object,System.String,System.Type)">
            <summary>Verifies the absence of observer for an DataServiceCollection</summary>
            <typeparam name="T">Type of DataServiceCollection</typeparam>
            <param name="oec">Non-typed collection object</param>
            <param name="sourceProperty">Collection property of the source object which is being assigned to</param>
            <param name="sourceType">Type of the source object</param>
        </member>
        <member name="T:Microsoft.OData.Client.SaveChangesEventArgs">
            <summary>
            Encapsulates the arguments for the DataServiceContext ChangesSaved event
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveChangesEventArgs.response">
            <summary>
            DataServiceContext SaveChanges response
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SaveChangesEventArgs.#ctor(Microsoft.OData.Client.DataServiceResponse)">
            <summary>
            Construct a DataServiceSaveChangesEventArgs object.
            </summary>
            <param name="response">DataServiceContext SaveChanges response</param>
        </member>
        <member name="T:Microsoft.OData.Client.EntityChangedParams">
            <summary>Encapsulates the arguments of a <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> delegate</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityChangedParams.context">
            <summary>Context associated with the BindingObserver.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityChangedParams.entity">
            <summary>The entity object that has changed.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityChangedParams.propertyName">
            <summary>The property of the entity that has changed.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityChangedParams.propertyValue">
            <summary>The current value of the target property.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityChangedParams.sourceEntitySet">
            <summary>Entity set to which the entity object belongs</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityChangedParams.targetEntitySet">
            <summary>Entity set to which the target propertyValue entity belongs</summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityChangedParams.#ctor(Microsoft.OData.Client.DataServiceContext,System.Object,System.String,System.Object,System.String,System.String)">
            <summary>
            Construct an EntityChangedParams object.
            </summary>
            <param name="context">Context to which the entity and propertyValue belong.</param>
            <param name="entity">The entity object that has changed.</param>
            <param name="propertyName">The property of the target entity object that has changed.</param>
            <param name="propertyValue">The current value of the entity property.</param>
            <param name="sourceEntitySet">Entity set to which the entity object belongs</param>
            <param name="targetEntitySet">Entity set to which the target propertyValue entity belongs</param>
        </member>
        <member name="P:Microsoft.OData.Client.EntityChangedParams.Context">
            <summary>The context that is associated with the entity object that has changed.</summary>
            <returns>The context that is tracking the changed object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityChangedParams.Entity">
            <summary>The entity object that has changed.</summary>
            <returns>The changed object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityChangedParams.PropertyName">
            <summary>The name of the property on the entity object that references the target object.</summary>
            <returns>The name of the changed property.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityChangedParams.PropertyValue">
            <summary>The object that is currently referenced by the changed property on the entity object.</summary>
            <returns>The current value that references a target entity. </returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityChangedParams.SourceEntitySet">
            <summary>The entity set of the source object.</summary>
            <returns>An entity set name.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityChangedParams.TargetEntitySet">
            <summary>The entity set to which the target entity object belongs</summary>
            <returns>An entity set name.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.EntityCollectionChangedParams">
            <summary>Encapsulates the arguments of a <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> delegate.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityCollectionChangedParams.context">
            <summary>Context associated with the BindingObserver.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityCollectionChangedParams.sourceEntity">
            <summary>
            The source object that references the target object through a collection navigation property.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityCollectionChangedParams.propertyName">
            <summary>The property of the source object that references the collection that has changed.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityCollectionChangedParams.sourceEntitySet">
            <summary>The entity set of the source object.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityCollectionChangedParams.collection">
            <summary>The collection that has changed.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityCollectionChangedParams.targetEntity">
            <summary>The target entity object involved in the change.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityCollectionChangedParams.targetEntitySet">
            <summary>The entity set name of the target object.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityCollectionChangedParams.action">
            <summary>
            The action that indicates how the collection was changed. The value will be Add or Remove.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityCollectionChangedParams.#ctor(Microsoft.OData.Client.DataServiceContext,System.Object,System.String,System.String,System.Collections.ICollection,System.Object,System.String,System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Construct an EntityCollectionChangedParams object.
            </summary>
            <param name="context">The DataServiceContext associated with the BindingObserver.</param>
            <param name="sourceEntity">The source object that references the target object through a collection navigation property.</param>
            <param name="propertyName">The property of the source object that references the collection that has changed.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="collection">The collection that has changed.</param>
            <param name="targetEntity">The target entity object involved in the change.</param>
            <param name="targetEntitySet">The entity set name of the target object.</param>
            <param name="action">The action that indicates how the collection was changed. The value will be Add or Remove.</param>
        </member>
        <member name="P:Microsoft.OData.Client.EntityCollectionChangedParams.Context">
            <summary>The <see cref="T:Microsoft.OData.Client.DataServiceContext" /> associated with the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> that has changed.</summary>
            <returns>The context associated with the collection that has changed</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityCollectionChangedParams.SourceEntity">
            <summary>The source object that references the target object in the collection by using a navigation property. </summary>
            <returns>The source object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityCollectionChangedParams.PropertyName">
            <summary>The navigation property on the source object that references the collection that has changed.</summary>
            <returns>The navigation property name.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityCollectionChangedParams.SourceEntitySet">
            <summary>The entity set of the source object.</summary>
            <returns>An entity set name.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityCollectionChangedParams.TargetEntity">
            <summary>The entity object in the collection that has changed.</summary>
            <returns>The changed entity object in the collection.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityCollectionChangedParams.TargetEntitySet">
            <summary>The entity set name of the object in the collection.</summary>
            <returns>An entity set name.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityCollectionChangedParams.Collection">
            <summary>The <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> that has changed.</summary>
            <returns>A reference to the collection that has changed.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityCollectionChangedParams.Action">
            <summary>A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> value that indicates how the collection was changed. </summary>
            <returns>A value that indicates how the collection was changed.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.TrackingMode">
            <summary>Determines whether changes that are made to a <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> are tracked.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TrackingMode.None">
            <summary>The collection should not track changes.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TrackingMode.AutoChangeTracking">
            <summary>The collection should automatically track changes to the entities
            in the collection.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceCollection`1">
            <summary>Represents a dynamic entity collection that provides notifications when items get added, removed, or when the list is refreshed.</summary>
            <typeparam name="T">An entity type.</typeparam>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceCollection`1.observer">
            <summary>The BindingObserver associated with the DataServiceCollection</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceCollection`1.rootCollection">
            <summary>Is this a root collection</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceCollection`1.continuation">
            <summary>The continuation for partial collections.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceCollection`1.trackingOnLoad">
            <summary>True if tracking setup was deferred to first Load() call.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceCollection`1.entityChangedCallback">
            <summary>Callback tracked until tracking is enabled.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceCollection`1.collectionChangedCallback">
            <summary>Callback tracked until tracking is enabled.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceCollection`1.entitySetName">
            <summary>Entity set name tracked until tracking is enabled.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceCollection`1.ongoingAsyncOperation">
            <summary>
            The async handle for the current LoadAsync Operation
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> class.</summary>
            <remarks>Creates a default data service collection, with auto-change tracking enabled as soon as data is loaded into it.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.#ctor(Microsoft.OData.Client.DataServiceQuerySingle{`0})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> class based on query execution.</summary>
            <param name="item">A <see cref="T:Microsoft.OData.Client.DataServiceQuerySingle`1" /> or LINQ query that returns an object that are used to initialize the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> class based on query execution.</summary>
            <param name="items">A <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> or LINQ query that  returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects that are used to initialize the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.#ctor(Microsoft.OData.Client.TrackingMode,Microsoft.OData.Client.DataServiceQuerySingle{`0})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> class based on query execution and with the specified tracking mode.</summary>
            <param name="trackingMode">A <see cref="T:Microsoft.OData.Client.TrackingMode" /> value that indicated whether or not changes made to items in the collection are automatically tracked.</param>
            <param name="item">A <see cref="T:Microsoft.OData.Client.DataServiceQuerySingle`1" /> or LINQ query that returns an object that are used to initialize the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},Microsoft.OData.Client.TrackingMode)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> class based on query execution and with the specified tracking mode.</summary>
            <param name="items">A <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> or LINQ query that returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects that are used to initialize the collection.</param>
            <param name="trackingMode">A <see cref="T:Microsoft.OData.Client.TrackingMode" /> value that indicated whether or not changes made to items in the collection are automatically tracked.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.#ctor(Microsoft.OData.Client.DataServiceContext)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> class that uses the specified <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</summary>
            <param name="context">The <see cref="T:Microsoft.OData.Client.DataServiceContext" /> used to track changes to objects in the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.#ctor(Microsoft.OData.Client.DataServiceContext,System.String,System.Func{Microsoft.OData.Client.EntityChangedParams,System.Boolean},System.Func{Microsoft.OData.Client.EntityCollectionChangedParams,System.Boolean})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> class with the supplied change method delegates and that uses the specified <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</summary>
            <param name="context">The <see cref="T:Microsoft.OData.Client.DataServiceContext" /> used to track items in the collection.</param>
            <param name="entitySetName">The entity set of the objects in the collection.</param>
            <param name="entityChangedCallback">A delegate that encapsulates a method that is called when an entity changes.</param>
            <param name="collectionChangedCallback">A delegate that encapsulates a method that is called when the collection of entities changes.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},Microsoft.OData.Client.TrackingMode,System.String,System.Func{Microsoft.OData.Client.EntityChangedParams,System.Boolean},System.Func{Microsoft.OData.Client.EntityCollectionChangedParams,System.Boolean})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> class based on query execution and with the supplied change method delegates.</summary>
            <param name="items">A <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> or LINQ query that returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects that are used to initialize the collection.</param>
            <param name="trackingMode">A <see cref="T:Microsoft.OData.Client.TrackingMode" /> value that indicated whether or not changes made to items in the collection are automatically tracked.</param>
            <param name="entitySetName">The entity set of the objects in the collection.</param>
            <param name="entityChangedCallback">A delegate that encapsulates a method that is called when an entity changes.</param>
            <param name="collectionChangedCallback">A delegate that encapsulates a method that is called when the collection of entities changes.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.#ctor(Microsoft.OData.Client.DataServiceContext,System.Collections.Generic.IEnumerable{`0},Microsoft.OData.Client.TrackingMode,System.String,System.Func{Microsoft.OData.Client.EntityChangedParams,System.Boolean},System.Func{Microsoft.OData.Client.EntityCollectionChangedParams,System.Boolean})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> class based on query execution, with the supplied change method delegates, and that uses the supplied <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</summary>
            <param name="context">The <see cref="T:Microsoft.OData.Client.DataServiceContext" /> used to track items in the collection.</param>
            <param name="items">A <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> or LINQ query that returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects that are used to initialize the collection.</param>
            <param name="trackingMode">A <see cref="T:Microsoft.OData.Client.TrackingMode" /> value that indicated whether or not changes made to items in the collection are automatically tracked.</param>
            <param name="entitySetName">The entity set of the objects in the collection.</param>
            <param name="entityChangedCallback">A delegate that encapsulates a method that is called when an entity changes.</param>
            <param name="collectionChangedCallback">A delegate that encapsulates a method that is called when the collection of entities changes.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.#ctor(System.Object,Microsoft.OData.Client.DataServiceContext,System.Collections.Generic.IEnumerable{`0},Microsoft.OData.Client.TrackingMode,System.String,System.Func{Microsoft.OData.Client.EntityChangedParams,System.Boolean},System.Func{Microsoft.OData.Client.EntityCollectionChangedParams,System.Boolean})">
            <summary>Creates new DataServiceCollection.</summary>
            <param name="entityMaterializer">The materializer</param>
            <param name="context"><see cref="T:Microsoft.OData.Client.DataServiceContext"/> associated with the new collection.</param>
            <param name="items">Enumeration of items to initialize the new DataServiceCollection with.</param>       
            <param name="trackingMode">The tracking mode for the new collection.</param>
            <param name="entitySetName">The name of the entity set the elements in the collection belong to.</param>
            <param name="entityChangedCallback">Delegate that gets called when an entity changes.</param>
            <param name="collectionChangedCallback">Delegate that gets called when an entity collection changes.</param> 
            <remarks>This is the internal constructor called from materializer and used inside our projection queries.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.Load(System.Collections.Generic.IEnumerable{`0})">
            <summary>Loads a collection of entity objects into the collection.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <param name="items">Collection of entity objects to be added to the <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" />.</param>
            <remarks>
            When tracking is enabled, the behavior of Load would be to attach all those entities that are not already tracked by the context
            associated with the collection. The operation will go deep into the input entities so that all related
            entities are attached to the context if not already present. All entities in <paramref name="items"/>
            will be tracked after Load is done.
            Load method checks for duplication. The collection will ignore any duplicated items been loaded.
            For large amount of items, consider DataServiceContext.LoadProperty instead.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.LoadAsync(System.Linq.IQueryable{`0})">
            <summary>Asynchronously loads the collection by executing a <see cref="T:Microsoft.OData.Client.DataServiceQuery`1"/>.Supported only by the WCF Data Services 5.0 client for Silverlight.</summary>
            <param name="query">The <see cref="T:Microsoft.OData.Client.DataServiceQuery`1"/> that, when executed, returns the entities to load into the collection.</param>
            <exception cref="T:System.ArgumentException">When query is null or not a <see cref="T:Microsoft.OData.Client.DataServiceQuery`1"/>.</exception>
            <exception cref="T:System.InvalidOperationException">When a previous call to <see cref="M:Microsoft.OData.Client.DataServiceCollection`1.LoadAsync"/> is not yet complete.</exception>
            <remarks>This method uses the event-based async pattern.
            The method returns immediately without waiting for the query to complete. Then it calls the handler of the
            <see cref="E:Microsoft.OData.Client.DataServiceCollection`1.LoadCompleted"/> event exactly once on the UI thread. The event will be raised regradless
            if the query succeeded or not.
            This class only support one asynchronous operation in flight.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.LoadAsync(System.Uri)">
            <summary>Loads the collection asynchronously by loading the results from the request Uri.</summary>
            <param name="requestUri">The request uri to download results from.</param>
            <remarks>This method uses the event-based async pattern.
            The method returns immediately without waiting for the query to complete. Then it calls the handler of the
            <see cref="E:Microsoft.OData.Client.DataServiceCollection`1.LoadCompleted"/> event exactly once on the UI thread. The event will be raised regradless
            if the query succeeded or not.
            This class only support one asynchronous operation in flight.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.LoadAsync">
            <summary>Asynchronously loads items into the collection, when it represents the navigation property of an entity.Supported only by the WCF Data Services 5.0 client for Silverlight.</summary>
            <exception cref="T:System.InvalidOperationException">When the collection does not belong to a parent entity.-or-When the parent entity is not tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext"/>.-or-When a previous call to <see cref="M:Microsoft.OData.Client.DataServiceCollection`1.LoadAsync"/> is not yet complete.</exception>
            <remarks>This method loads the content of a property represented by this DataServiceCollection.
            If this instance is not associated with any property and entity the method will fail.
            This method uses the event-based async pattern.
            The method returns immediately without waiting for the query to complete. Then it calls the handler of the
            <see cref="E:Microsoft.OData.Client.DataServiceCollection`1.LoadCompleted"/> event exactly once on the UI thread. The event will be raised regradless
            if the query succeeded or not.
            This class only support one asynchronous operation in flight.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.LoadNextPartialSetAsync">
            <summary>Loads the next page of data into the collection.Supported only by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>A <see cref="T:System.Boolean"/> value that is true when the Microsoft.OData.Client.DataServiceCollection has a continuation token; otherwise false.</returns>
            <remarks>This method is the same as <see cref="M:Microsoft.OData.Client.DataServiceCollection`1.LoadAsync(System.Linq.IQueryable{`0})"/> except that it runs the query as defined
            by the continuation token of this collection.
            The method returns immediately without waiting for the query to complete. Then it calls the handler of the
            <see cref="E:Microsoft.OData.Client.DataServiceCollection`1.LoadCompleted"/> event exactly once on the UI thread. The event will be raised regradless
            if the query succeeded or not. Even if the method returns false, the event will be raised (immeditaly)
            This class only support one asynchronous operation in flight.
            If this collection doesn't have a continuation token (this.Continuation == null) then this method
            returns false and does not issue any request.
            If there is a continuation token the method will return true and will start a request to load
            the next partial set based on that continuation token.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.CancelAsyncLoad">
            <summary>Cancels any running LoadAsync operations and calls the LoadCompleted event handler after cancellation.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.Load(`0)">
            <summary>Loads a single entity object into the collection.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <param name="item">Entity object to be added.</param>
            <remarks>
            When tracking is enabled, the behavior of Load would be to attach the entity if it is not already tracked by the context
            associated with the collection. The operation will go deep into the input entity so that all related
            entities are attached to the context if not already present. The <paramref name="item"/> will be
            tracked after Load is done.
            Load method checks for duplication. The collection will ignore any duplicated items been loaded.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.Clear(System.Boolean)">
            <summary>Indicates whether all the items from the collection are removed.</summary>
            <param name="stopTracking">true if all the items from the collection are removed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.Detach">
            <summary>Disables the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> tracking of all items in the collection.</summary>
            <remarks>
            All the entitities in the root collection and all it's related objects will be untracked at the
            end of this operation.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.InsertItem(System.Int32,`0)">
            <summary>Adds a specified item to the collection at the specified index.</summary>
            <param name="index">Index at which to add the item.</param>
            <param name="item">The item to add.</param>
            <remarks>
            Override to prevent additions to the collection in "deferred tracking" mode, and to verify that the item implements INotifyPropertyChanged.
            Overridding this method will cover items that are added to the collection via Add and Insert.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.ValidateIteratorParameter(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Verifies that input iterator parameter is not null and in case
            of Silverlight, it is not of DataServiceQuery type.
            </summary>
            <param name="items">Input iterator parameter.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.GetContextFromItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Obtain the DataServiceContext from the incoming enumerable
            </summary>
            <param name="items">An IEnumerable that may be a DataServiceQuery or QueryOperationResponse object</param>
            <returns>DataServiceContext instance associated with the input</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.InternalLoadCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Populate this collection with another collection of items
            </summary>
            <param name="items">The items to populate this collection with</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.StartLoading">
            <summary>
            Prepare the collection for loading. For tracked collections, we enter the attaching state
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.FinishLoading">
            <summary>
            Reset the collection after loading. For tracked collections, we exit the attaching state.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.StartTracking(Microsoft.OData.Client.DataServiceContext,System.Collections.Generic.IEnumerable{`0},System.String,System.Func{Microsoft.OData.Client.EntityChangedParams,System.Boolean},System.Func{Microsoft.OData.Client.EntityCollectionChangedParams,System.Boolean})">
            <summary>Initialize and start tracking an DataServiceCollection</summary>
            <param name="context">The context</param>
            <param name="items">Collection to initialize with</param>
            <param name="entitySet">The entity set of the elements in the collection.</param>
            <param name="entityChanged">delegate that needs to be called when an entity changes.</param>
            <param name="collectionChanged">delegate that needs to be called when an entity collection is changed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.BeginLoadAsyncOperation(System.Func{System.AsyncCallback,System.IAsyncResult},System.Func{System.IAsyncResult,Microsoft.OData.Client.QueryOperationResponse})">
            <summary>Helper method to start a LoadAsync operation.</summary>
            <param name="beginCall">Function which calls the Begin method for the load. It should take <see cref="T:System.AsyncCallback"/>
            parameter which should be used as the callback for the Begin call. It should return <see cref="T:System.IAsyncResult"/>
            of the started asynchronous operation (or throw).</param>
            <param name="endCall">Function which calls the End method for the load. It should take <see cref="T:System.IAsyncResult"/>
            which represents the asynchronous operation in flight. It should return <see cref="T:Microsoft.OData.Client.QueryOperationResponse"/>
            with the result of the operation (or throw).</param>
            <remarks>The method takes care of error handling as well as maintaining the <see cref="F:Microsoft.OData.Client.DataServiceCollection`1.ongoingAsyncOperation"/>.
            Note that it does not check the <see cref="F:Microsoft.OData.Client.DataServiceCollection`1.ongoingAsyncOperation"/> to disallow multiple operations in flight.
            The method makes sure that the <paramref name="endCall"/> will be called from the UI thread. It makes no assumptions
            about the calling thread of this method.
            The method does not process the results of the <paramref name="endCall"/>, it just raises the <see cref="E:Microsoft.OData.Client.DataServiceCollection`1.LoadCompleted"/>
            event as appropriate. If there's some processing to be done for the results it should all be done by the
            <paramref name="endCall"/> method before it returns.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceCollection`1.EndLoadAsyncOperation(System.Func{System.IAsyncResult,Microsoft.OData.Client.QueryOperationResponse},System.IAsyncResult)">
            <summary>
            Calls the end method for the LoadAsync operation and fires the LoadCompleted event.
            </summary>
            <param name="endCall">End method to complete the asynchronous query execution.</param>
            <param name="asyncResult">IAsyncResult to be passed to <paramref name="endCall"/>.</param>
        </member>
        <member name="E:Microsoft.OData.Client.DataServiceCollection`1.LoadCompleted">
            <summary>A completion event for the <see cref="M:Microsoft.OData.Client.DataServiceCollection`1.LoadAsync(System.Linq.IQueryable{`0})"/>, <see cref="M:Microsoft.OData.Client.DataServiceCollection`1.LoadAsync"/> 
            and <see cref="M:Microsoft.OData.Client.DataServiceCollection`1.LoadNextPartialSetAsync"/> method.</summary>
            <remarks>This event is raised exactly once for each call to the <see cref="M:Microsoft.OData.Client.DataServiceCollection`1.LoadAsync(System.Linq.IQueryable{`0})"/>, 
            <see cref="M:Microsoft.OData.Client.DataServiceCollection`1.LoadAsync"/> or <see cref="M:Microsoft.OData.Client.DataServiceCollection`1.LoadNextPartialSetAsync"/> method. It is called both when the operation 
            succeeded and/or when it failed.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceCollection`1.Continuation">
            <summary>Gets a continuation object that is used to return the next set of paged results.</summary>
            <returns>A <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation`1" /> object that contains the URI to return the next set of paged results.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceCollection`1.Observer">
            <summary>Observer for the collection.</summary>
            <remarks>The setter would get called only for child collections in the graph.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceCollection`1.IsTracking">
            <summary>
            Whether this collection is actively tracking
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.LoadCompletedEventArgs">
            <summary>Used as the <see cref="T:System.EventArgs" /> class for the <see cref="E:Microsoft.OData.Service.Client.DataServiceCollection`1.LoadCompleted" /> event.Supported only by the WCF Data Services 5.0 client for Silverlight.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LoadCompletedEventArgs.queryOperationResponse">
            <summary>The <see cref="P:Microsoft.OData.Client.LoadCompletedEventArgs.QueryOperationResponse"/> which represents
            the response for the Load operation.</summary>
            <remarks>This field is non-null only when the Load operation was successfull.
            Otherwise it's null.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.LoadCompletedEventArgs.#ctor(Microsoft.OData.Client.QueryOperationResponse,System.Exception)">
            <summary>Constructor</summary>
            <param name="queryOperationResponse">The response for the Load operation. null when the operation didn't succeed.</param>
            <param name="error"><see cref="T:System.Exception"/> which represents the error if the Load operation failed. null if the operation
            didn't fail.</param>
            <remarks>This constructor doesn't allow creation of canceled event args.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.LoadCompletedEventArgs.#ctor(Microsoft.OData.Client.QueryOperationResponse,System.Exception,System.Boolean)">
            <summary>Constructor</summary>
            <param name="queryOperationResponse">The response for the Load operation. null when the operation didn't succeed.</param>
            <param name="error"><see cref="T:System.Exception"/> which represents the error if the Load operation failed. null if the operation
            didn't fail.</param>
            <param name="cancelled">True, if the LoadAsync operation was cancelled, False otherwise.</param>
            <remarks>This constructor doesn't allow creation of canceled event args.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.LoadCompletedEventArgs.QueryOperationResponse">
            <summary>Gets the response to an asynchronous load operation.Supported only by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>A <see cref="T:Microsoft.OData.Service.Client.QueryOperationResponse" /> that represents the response to a load operation.</returns>
            <remarks>Accessing this property will throw exception if the Load operation failed
            or it was canceled.</remarks>
        </member>
        <member name="T:Microsoft.OData.Client.EntitySetAttribute">
            <summary>Indicates the entity set to which a client data service class belongs.</summary>
            <remarks>
            This attribute is generated only when there is one entity set associated with the type.
            When there are more than one entity set associated with the type, then the entity set
            name can be passed in through the EntitySetNameResolver event.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.EntitySetAttribute.entitySet">
            <summary>
            The entity set name.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntitySetAttribute.#ctor(System.String)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.OData.Client.EntitySetAttribute" />.</summary>
            <param name="entitySet">The entity set to which the class belongs.</param>
        </member>
        <member name="P:Microsoft.OData.Client.EntitySetAttribute.EntitySet">
            <summary>Gets the entity set to which the class belongs.</summary>
            <returns>The entity set as string value. </returns>
        </member>
        <member name="T:Microsoft.OData.Client.EntityTypeAttribute">
            <summary>Marks a class as an entity type in WCF Data Services.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityTypeAttribute.#ctor">
            <summary>Creates a new instance of the <see cref="T:Microsoft.OData.Client.EntityTypeAttribute" /> class.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.KeyAttribute">
            <summary>Denotes the key property or properties of an entity. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.KeyAttribute.keyNames">
            <summary>Name of the properties that form the key.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.KeyAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.KeyAttribute" /> class. </summary>
            <param name="keyName">The string that contains name of the key attribute.</param>
        </member>
        <member name="M:Microsoft.OData.Client.KeyAttribute.#ctor(System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.KeyAttribute" /> class. </summary>
            <param name="keyNames">An array of string values that contain key attribute names.</param>
        </member>
        <member name="P:Microsoft.OData.Client.KeyAttribute.KeyNames">
            <summary>Gets the names of key attributes.</summary>
            <returns>String value that contains names of key attributes. </returns>
        </member>
        <member name="T:Microsoft.OData.Client.ODataProtocolVersion">
            <summary>Represents the versions of the Open Data Protocol (OData) that the data service may support. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.ODataProtocolVersion.V4">
            <summary>Version 4</summary>
        </member>
        <member name="T:Microsoft.OData.Client.HasStreamAttribute">
            <summary>Indicates that a class that is an entity type has a default binary data stream. </summary>
        </member>
        <member name="T:Microsoft.OData.Client.NamedStreamAttribute">
            <summary>Indicates that a class that is an entity type has a related named binary stream.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.NamedStreamAttribute.#ctor(System.String)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.OData.Client.NamedStreamAttribute" /> class.</summary>
            <param name="name">The name of a binary stream that belongs to the attributed entity.</param>
        </member>
        <member name="P:Microsoft.OData.Client.NamedStreamAttribute.Name">
            <summary>The name of a binary stream that belongs to the attributed entity.</summary>
            <returns>The name of the binary stream.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceQueryException">
            <summary>Exception that indicates an error occurred while querying the data service. </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQueryException.response">
            <summary>Actual response object.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceQueryException" /> class with a system-supplied message that describes the error. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceQueryException" /> class with a specified message that describes the error. </summary>
            <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.The string value that the contains error message.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceQueryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
            <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. The string value that contains the error message.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. The inner exception object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryException.#ctor(System.String,System.Exception,Microsoft.OData.Client.QueryOperationResponse)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceQueryException" /> class. </summary>
            <param name="message">The string value that contains the error message.</param>
            <param name="innerException">The inner exception object.</param>
            <param name="response">The <see cref="T:Microsoft.OData.Client.QueryOperationResponse" /> object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DataServiceQueryException class from the 
            specified SerializationInfo and StreamingContext instances.
            </summary>
            <param name="info">
            A SerializationInfo containing the information required to serialize 
            the new DataServiceQueryException.</param>
            <param name="context">
            A StreamingContext containing the source of the serialized stream 
            associated with the new DataServiceQueryException.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQueryException.Response">
            <summary>Gets the <see cref="T:Microsoft.OData.Client.QueryOperationResponse" /> that indicates the exception results.</summary>
            <returns>A <see cref="T:Microsoft.OData.Client.QueryOperationResponse" /> object that indicates the exception results.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceRequestArgs">
            <summary>Represents additional metadata that is included in a request message to WCF Data Services.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequestArgs.#ctor">
            <summary>Creates a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestArgs" /> class.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequestArgs.AcceptContentType">
            <summary>Gets or sets the Accept header of the request message.</summary>
            <returns>The value of the Accept header.</returns>
            <remarks>
            Sets the mime type (ex. image/png) to be used when retrieving the stream.
            Note that no validation is done on the contents of this property.
            It is the responsibility of the user to format it correctly to be used
            as the value of an HTTP Accept header.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequestArgs.ContentType">
            <summary>Gets or sets the Content-Type header of the request message.</summary>
            <returns>The value of the Content-Type header.</returns>
            <remarks>
            Sets the Content-Type header to be used when sending the stream to the server.
            Note that no validation is done on the contents of this property.
            It is the responsibility of the user to format it correctly to be used
            as the value of an HTTP Content-Type header.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequestArgs.Slug">
            <summary>Gets or sets the value of the Slug header of the request message.</summary>
            <returns>A value that is the Slug header of the request. </returns>
            <remarks>
            Sets the Slug header to be used when sending the stream to the server.
            Note that no validation is done on the contents of this property.
            It is the responsibility of the user to format it correctly to be used
            as the value of an HTTP Slug header.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequestArgs.Headers">
            <summary>Gets the headers in the request message.</summary>
            <returns>The headers in the request message.</returns>
            <remarks>
            Dictionary containing all the request headers to be used when retrieving the stream.
            The user should take care so as to not alter an HTTP header which will change
            the meaning of the request.
            No validation is performed on the header names or values.
            This class will not attempt to fix up any of the headers specified and
            will try to use them "as is".
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequestArgs.HeaderCollection">
            <summary>Request header collection.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceRequestException">
            <summary>Represents the error thrown if the data service returns a response code less than 200 or greater than 299, or the top-level element in the response is &lt;error&gt;. This class cannot be inherited.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceRequestException.response">
            <summary>Actual response object.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequestException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestException" /> class with a system-supplied message that describes the error. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequestException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestException" /> class with a specified message that describes the error. </summary>
            <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.The error message text.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequestException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
            <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequestException.#ctor(System.String,System.Exception,Microsoft.OData.Client.DataServiceResponse)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestException" /> class. </summary>
            <param name="message">Error message text.</param>
            <param name="innerException">Exception object that contains the inner exception.</param>
            <param name="response"><see cref="T:Microsoft.OData.Client.DataServiceResponse" /> object.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DataServiceQueryException class from the 
            specified SerializationInfo and StreamingContext instances.
            </summary>
            <param name="info">
            A SerializationInfo containing the information required to serialize 
            the new DataServiceException.</param>
            <param name="context">
            A StreamingContext containing the source of the serialized stream 
            associated with the new DataServiceException.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequestException.Response">
            <summary>Gets the response as a <see cref="T:Microsoft.OData.Client.DataServiceResponse" /> object. </summary>
            <returns>A <see cref="T:Microsoft.OData.Client.DataServiceResponse" /> object.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceStreamResponse">
            <summary>Represents a response from WCF Data Services that contains binary data as a stream.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceStreamResponse.responseMessage">
            <summary>IODataResponseMessage containing all the response information.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceStreamResponse.headers">
            <summary>Lazy initialized cached response headers.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceStreamResponse.responseStream">
            <summary>
            Response stream. Caching the response stream so that IODataResponseStream.GetStream is only called once.
            This helps us to assert that no one internally calls the GetStream method more than once.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceStreamResponse.#ctor(Microsoft.OData.Core.IODataResponseMessage)">
            <summary>
            Constructor for the response. This method is internal since we don't want users to create instances
            of this class.
            </summary>
            <param name="response">The web response to wrap.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceStreamResponse.Dispose">
            <summary>Releases all resources used by the current instance of the <see cref="T:Microsoft.OData.Client.DataServiceStreamResponse" /> class.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceStreamResponse.CheckDisposed">
            <summary>Checks if the object has already been disposed. If so it throws the ObjectDisposedException.</summary>
            <exception cref="T:System.ObjectDisposedException">If the object has already been disposed.</exception>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceStreamResponse.ContentType">
            <summary>Gets the content type of the response stream.</summary>
            <returns>The content type of the response stream.</returns>
            <remarks>If the Content-Type header was not present in the response this property will return null.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceStreamResponse.ContentDisposition">
            <summary>Gets the Content-Disposition header field for the response stream.</summary>
            <returns>The contents of the Content-Disposition header field.</returns>
            /// <remarks>If the Content-Disposition header was not present in the response this property will return null.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceStreamResponse.Headers">
            <summary>Gets the collection of headers from the response.</summary>
            <returns>The headers collection from the response message as a <see cref="T:System.Collections.Generic.Dictionary`2" /> object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceStreamResponse.Stream">
            <summary>Gets the binary property data from the data service as a binary stream. </summary>
            <returns>The stream that contains the binary property data.</returns>
            <exception cref="T:System.ObjectDisposedException">When the <see cref="T:Microsoft.OData.Client.DataServiceStreamResponse" /> is already disposed.</exception>
            <remarks>
            Returns the stream obtained from the data service. When reading from this stream
            the operations may throw if a network error occurs. This stream is read-only.
            
            Caller must call Dispose/Close on either the returned stream or on the response
            object itself. Otherwise the network connection will be left open and the caller
            might run out of available connections.
            </remarks>
        </member>
        <member name="T:Microsoft.OData.Client.DescriptorKind">
            <summary>
            enum to describe the descriptor kind
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DescriptorKind.Entity">
            <summary>Entity Descriptor</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DescriptorKind.Link">
            <summary>Link Descriptor</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DescriptorKind.NamedStream">
            <summary>Named stream descriptor</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DescriptorKind.OperationDescriptor">
            <summary>Service Operation descriptor</summary>
        </member>
        <member name="T:Microsoft.OData.Client.LinkDescriptor">
            <summary>
            represents the association between two entities
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.LinkDescriptor.EquivalenceComparer">
            <summary>equivalence comparer</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LinkDescriptor.source">
            <summary>source entity</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LinkDescriptor.sourceProperty">
            <summary>name of property on source entity that references the target entity</summary>
        </member>
        <member name="F:Microsoft.OData.Client.LinkDescriptor.target">
            <summary>target entity</summary>
        </member>
        <member name="M:Microsoft.OData.Client.LinkDescriptor.#ctor(System.Object,System.String,System.Object,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Constructor
            </summary>
            <param name="source">Source entity</param>
            <param name="sourceProperty">Navigation property on the source entity</param>
            <param name="target">Target entity</param>
            <param name="model">The client model.</param>
        </member>
        <member name="M:Microsoft.OData.Client.LinkDescriptor.#ctor(System.Object,System.String,System.Object,Microsoft.OData.Client.EntityStates)">
            <summary>
            Constructor
            </summary>
            <param name="source">Source entity</param>
            <param name="sourceProperty">Navigation property on the source entity</param>
            <param name="target">Target entity</param>
            <param name="state">The link state</param>
        </member>
        <member name="M:Microsoft.OData.Client.LinkDescriptor.ClearChanges">
            <summary>
            Clear all the changes associated with this descriptor
            This method is called when the client is done with sending all the pending requests.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.LinkDescriptor.IsEquivalent(System.Object,System.String,System.Object)">
            <summary>
            If the current instance of link descriptor is equivalent to the parameters supplied
            </summary>
            <param name="src">The source entity</param>
            <param name="srcPropName">The source property name</param>
            <param name="targ">The target entity</param>
            <returns>true if equivalent</returns>
        </member>
        <member name="P:Microsoft.OData.Client.LinkDescriptor.Target">
            <summary>The source entity in a link returned by a <see cref="T:Microsoft.OData.Client.DataServiceResponse" />. </summary>
            <returns><see cref="T:System.Object" />.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.LinkDescriptor.Source">
            <summary>A source entity in a link returned by a <see cref="T:Microsoft.OData.Client.DataServiceResponse" />.</summary>
            <returns><see cref="T:System.Object" />.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.LinkDescriptor.SourceProperty">
            <summary>The identifier property of the source entity in a link returned by a <see cref="T:Microsoft.OData.Client.DataServiceResponse" />.</summary>
            <returns>The string identifier of an identity property in a source entity. </returns>
        </member>
        <member name="P:Microsoft.OData.Client.LinkDescriptor.DescriptorKind">
            <summary>this is a link</summary>
        </member>
        <member name="P:Microsoft.OData.Client.LinkDescriptor.IsSourcePropertyCollection">
            <summary>is this a collection property or not</summary>
        </member>
        <member name="T:Microsoft.OData.Client.LinkDescriptor.Equivalent">
            <summary>equivalence comparer</summary>
        </member>
        <member name="M:Microsoft.OData.Client.LinkDescriptor.Equivalent.Equals(Microsoft.OData.Client.LinkDescriptor,Microsoft.OData.Client.LinkDescriptor)">
            <summary>are two LinkDescriptors equivalent, ignore state</summary>
            <param name="x">link descriptor x</param>
            <param name="y">link descriptor y</param>
            <returns>true if equivalent</returns>
        </member>
        <member name="M:Microsoft.OData.Client.LinkDescriptor.Equivalent.GetHashCode(Microsoft.OData.Client.LinkDescriptor)">
            <summary>compute hashcode for LinkDescriptor</summary>
            <param name="obj">link descriptor</param>
            <returns>hashcode</returns>
        </member>
        <member name="T:Microsoft.OData.Client.ChangeOperationResponse">
            <summary>Response from SaveChanges.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.ChangeOperationResponse.descriptor">
            <summary>Descriptor containing the response object.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.ChangeOperationResponse.#ctor(Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.Descriptor)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.ChangeOperationResponse" /> class. </summary>
            <param name="headers">HTTP headers</param>
            <param name="descriptor">response object containing information about resources that got changed.</param>
        </member>
        <member name="P:Microsoft.OData.Client.ChangeOperationResponse.Descriptor">
            <summary>Gets the <see cref="T:Microsoft.OData.Client.EntityDescriptor" /> or <see cref="T:Microsoft.OData.Client.LinkDescriptor" /> modified by a change operation.</summary>
            <returns>An <see cref="T:Microsoft.OData.Client.EntityDescriptor" /> or <see cref="T:Microsoft.OData.Client.LinkDescriptor" /> modified by a change operation. </returns>
        </member>
        <member name="T:Microsoft.OData.Client.ClientConvert">
            <summary>
            static utility functions for conversions
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.ClientConvert.ChangeType(System.String,System.Type)">
            <summary>
            convert from string to the appropriate type
            </summary>
            <param name="propertyValue">incoming string value</param>
            <param name="propertyType">type to convert to</param>
            <returns>converted value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientConvert.TryConvertBinaryToByteArray(System.Object,System.Byte[]@)">
            <summary>
            Tries to converts a binary value to a byte array.
            </summary>
            <param name="binaryValue">The binary value to convert.</param>
            <param name="converted">The equivalent value converted to a byte array.</param>
            <returns>Whether the value was binary.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientConvert.ToNamedType(System.String,System.Type@)">
            <summary>
            change primtive typeName into non-nullable type
            </summary>
            <param name="typeName">like Edm.String or Edm.Binary</param>
            <param name="type">the mapped output type</param>
            <returns>true if named</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientConvert.ToString(System.Object)">
            <summary>
            Convert from primitive value to an xml payload string. 
            </summary>
            <param name="propertyValue">incoming object value</param>
            <returns>converted value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.ClientConvert.GetEdmType(System.Type)">
            <summary>type edm type string for content</summary>
            <param name="propertyType">type to analyze</param>
            <returns>edm type string for payload, null for unknown</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Metadata.ClientTypeAnnotation">
            <summary>
            Annotates a type on the client.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.EdmType">
            <summary>Back reference to the EdmType this annotation is part of.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.ElementTypeName">
            <summary>what is the clr full name using ToString for generic name expansion</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.ElementType">
            <summary>what clr type does this represent</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.model">
            <summary>Storage for the client model.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.isMediaLinkEntry">
            <summary>Set to true if the type is marked as ATOM-style media link entry</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.mediaDataMember">
            <summary>Property that holds data for ATOM-style media link entries</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.metadataVersion">
            <summary>Whether any property (including properties on descendant types) of this type is a collection of primitive or complex types.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.clientPropertyCache">
            <summary>Cached client properties.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.edmPropertyCache">
            <summary>Cached Edm properties</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.#ctor(Microsoft.OData.Edm.IEdmType,System.Type,System.String,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            discover and prepare properties for usage
            </summary>
            <param name="edmType">Back reference to the EdmType this annotation is part of.</param>
            <param name="type">type being processed</param>
            <param name="qualifiedName">the qualified name of the type being processed</param>
            <param name="model">The client model.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.EdmProperties">
            <summary>
            Returns the list of EdmProperties for this type.
            </summary>
            <returns>Returns the list of EdmProperties for this type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.Properties">
            <summary>Returns the list of properties from this type.</summary>
            <returns>Returns the list of properties from this type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.PropertiesToSerialize">
            <summary>
            Gets the set of properties on this type that should be serialized into insert/update payloads.
            </summary>
            <returns>The properties to serialize.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.GetProperty(System.String,System.Boolean)">
            <summary>
            get property wrapper for a property name, might be method around open types for otherwise unknown properties
            </summary>
            <param name="propertyName">property name</param>
            <param name="ignoreMissingProperties">are missing properties ignored</param>
            <returns>property wrapper</returns>
            <exception cref="T:System.InvalidOperationException">for unknown properties on closed types</exception>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.GetMetadataVersion">
            <summary>
            Checks if any of the properties (including properties of descendant types) is a collection of primitive or complex types.
            </summary>
            <returns>true if any if any of the properties (including properties of descendant types) is a collection of primitive or complex types. Otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.ShouldSerializeProperty(Microsoft.OData.Client.Metadata.ClientTypeAnnotation,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation)">
            <summary>
            Determines whether a given property should be serialized into an insert or update payload.
            </summary>
            <param name="type">The declaring type of the property.</param>
            <param name="property">The property.</param>
            <returns>Whether or not the property should be serialized.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.BuildPropertyCache">
            <summary>
            build the clientPropertyCache from EdmProperties
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.CheckMediaLinkEntry">
            <summary>
            Check if this type represents an ATOM-style media link entry and
            if so mark the ClientType as such
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.ComputeVersionForPropertyCollection(System.Collections.Generic.IEnumerable{Microsoft.OData.Edm.IEdmProperty},System.Collections.Generic.HashSet{Microsoft.OData.Edm.IEdmType})">
            <summary>
            Computes the metadata version of the property.
            </summary>
            <param name="propertyCollection">List of properties for which metadata version needs to be computed.</param>
            <param name="visitedComplexTypes">List of complex type already visited.</param>
            <returns>the metadata version of the property collection.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.DiscoverEdmProperties">
            <summary>
            Discovers and returns edm properties for this type.
            </summary>
            <returns>Edm properties on this type.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.IsEntityType">
            <summary>if true then EntityType else if !KnownType then ComplexType else PrimitiveType</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.MediaDataMember">
            <summary>Property that holds data for ATOM-style media link entries</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.IsMediaLinkEntry">
            <summary>Returns true if the type is marked as ATOM-style media link entry</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientTypeAnnotation.EdmTypeReference">
            <summary> Gets the EdmTypeReference for the client Type annotation. </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceClientException">
            <summary>
            The exception that is thrown when the server returns an error.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceClientException.state">
            <summary>
            Contains the state for this exception.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceClientException" /> class with a system-supplied message that describes the error. </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceClientException" /> class with a specified message that describes the error. </summary>
            <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceClientException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
            <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientException.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceClientException" /> class. </summary>
            <param name="message">The string value that contains the error message.</param>
            <param name="statusCode">The integer value that contains status code.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceClientException" /> class. </summary>
            <param name="message">The string value that contains the error message.</param>
            <param name="innerException">The System.Exception object that contains the inner exception.</param>
            <param name="statusCode">The integer value that contains status code.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientException.StatusCode">
            <summary>Gets the HTTP error status code returned after <see cref="T:Microsoft.OData.Client.DataServiceClientException" />.</summary>
            <returns>An integer value that represents the exception.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceClientException.DataServiceClientExceptionSerializationState">
            <summary>
            Contains the state of the exception, used for serialization in security transparent code.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceClientException.DataServiceClientExceptionSerializationState.System#Runtime#Serialization#ISafeSerializationData#CompleteDeserialization(System.Object)">
            <summary>
            Called when deserialization of the exception is complete.
            </summary>
            <param name="deserialized">The deserialized exception.</param>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceClientException.DataServiceClientExceptionSerializationState.StatusCode">
            <summary>
            Gets or sets the status code as returned by the server.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceQuery">
            <summary>non-generic placeholder for generic implementation</summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceRequest">
            <summary>non-generic placeholder for generic implementation</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest.#ctor">
            <summary>internal constructor so that only our assembly can provide an implementation</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest.Materialize(Microsoft.OData.Client.ResponseInfo,Microsoft.OData.Client.QueryComponents,Microsoft.OData.Client.ProjectionPlan,System.String,Microsoft.OData.Core.IODataResponseMessage,Microsoft.OData.Core.ODataPayloadKind)">
            <summary>
            get an enumerable materializes the objects the response
            </summary>
            <param name="responseInfo">context</param>
            <param name="queryComponents">query components</param>
            <param name="plan">Projection plan (if compiled in an earlier query).</param>
            <param name="contentType">contentType</param>
            <param name="message">the message</param>
            <param name="expectedPayloadKind">expected payload kind.</param>
            <returns>atom materializer</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest.GetInstance(System.Type,System.Uri)">
            <summary>
            Creates a instance of strongly typed DataServiceRequest with the given element type.
            </summary>
            <param name="elementType">element type for the DataServiceRequest.</param>
            <param name="requestUri">constructor parameter.</param>
            <returns>returns the strongly typed DataServiceRequest instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest.EndExecute``1(System.Object,Microsoft.OData.Client.DataServiceContext,System.String,System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to an Internet resource.
            </summary>
            <typeparam name="TElement">Element type of the result.</typeparam>
            <param name="source">Source object of async request.</param>
            <param name="context">The data service context.</param>
            <param name="method">async method name.</param>
            <param name="asyncResult">The asyncResult being ended.</param>
            <returns>The response - result of the request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest.QueryComponents(Microsoft.OData.Client.ClientEdmModel)">
            <summary>The QueryComponents associated with this request</summary>
            <param name="model">The client model.</param>
            <returns>instance of query components</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest.Execute``1(Microsoft.OData.Client.DataServiceContext,Microsoft.OData.Client.QueryComponents)">
            <summary>
            execute uri and materialize result
            </summary>
            <typeparam name="TElement">element type</typeparam>
            <param name="context">context</param>
            <param name="queryComponents">query components for request to execute</param>
            <returns>enumerable of results</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest.GetQuerySetCount(Microsoft.OData.Client.DataServiceContext)">
            <summary>
            Synchronizely get the query set count from the server by executing the $count=value query
            </summary>
            <param name="context">The context</param>
            <returns>The server side count of the query set</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest.BeginExecute(System.Object,Microsoft.OData.Client.DataServiceContext,System.AsyncCallback,System.Object,System.String)">
            <summary>
            Begins an asynchronous request to an Internet resource.
            </summary>
            <param name="source">source of execute (DataServiceQuery or DataServiceContext</param>
            <param name="context">context</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <param name="method">async method name.</param>
            <returns>An IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest.CreateExecuteResult(System.Object,Microsoft.OData.Client.DataServiceContext,System.AsyncCallback,System.Object,System.String)">
            <summary>
            Creates the result object for the specified query parameters.
            </summary>
            <param name="source">The source object for the request.</param>
            <param name="context">The data service context.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">The state object for the callback.</param>
            <param name="method">async method name at the source.</param>
            <returns>Result representing the create request. The request has not been initiated yet.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequest.ElementType">
            <summary>Gets the type of object submitted as a batch to the data service.</summary>
            <returns>Type object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequest.RequestUri">
            <summary>Gets the URI of the request object submitted to a data service.</summary>
            <returns>URI of the request object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequest.Plan">
            <summary>The ProjectionPlan for the request, if precompiled in a previous page; null otherwise.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequest.PayloadKind">
            <summary>Gets or sets the payload kind for this request.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery.#ctor">
            <summary>internal constructor so that only our assembly can provide an implementation</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection returned by the query.</summary>
            <returns>An enumerator over the query results.</returns>
            <remarks>Expect derived class to override this with an explict interface implementation</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery.Execute">
            <summary>Executes the query against the data service.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the results of the query operation.</returns>
            <exception cref="T:Microsoft.OData.Client.DataServiceQueryException">When the data service returns an HTTP 404: Resource Not Found error.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery.BeginExecute(System.AsyncCallback,System.Object)">
            <summary>Asynchronously sends a request to execute the data service query.</summary>
            <returns>An <see cref="T:System.IAsyncResult" /> object that is used to track the status of the asynchronous operation.</returns>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery.ExecuteAsync">
            <summary>Asynchronously sends a request to execute the data service query.</summary>
            <returns>A task represents An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the results of the query operation.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery.EndExecute(System.IAsyncResult)">
            <summary>Called to complete the asynchronous operation of executing a data service query.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the results of the query operation.</returns>
            <param name="asyncResult">The result from the <see cref="M:Microsoft.OData.Client.DataServiceQuery.BeginExecute(System.AsyncCallback,System.Object)" /> operation that contains the query results.</param>
            <exception cref="T:Microsoft.OData.Client.DataServiceQueryException">When the data service returns an HTTP 404: Resource Not Found error.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery.ExecuteInternal">
            Synchronous methods not available
            <summary>
            Returns an IEnumerable from an Internet resource. 
            </summary>
            <returns>An IEnumerable that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery.BeginExecuteInternal(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to an Internet resource.
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery.EndExecuteInternal(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to an Internet resource.
            </summary>
            <param name="asyncResult">The pending request for a response. </param>
            <returns>An IEnumerable that contains the response from the Internet resource.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuery.Expression">
            <summary>Represents an expression that contains the query to the data service.</summary>
            <returns>An <see cref="T:System.Linq.Expressions.Expression" /> object that represents the query.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuery.Provider">
            <summary>Represents the query provider instance.</summary>
            <returns>An <see cref="T:System.Linq.IQueryProvider" /> representing the data source provider.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceRequest`1">
            <summary>
            Holds a Uri and type for the request.
            </summary>
            <typeparam name="TElement">The type to construct for the request results</typeparam>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceRequest`1.plan">
            <summary>The ProjectionPlan for the request (if precompiled in a previous page).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceRequest`1.requestUri">
            <summary>Request uri for the current request.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceRequest`1.queryComponents">
            <summary>The QueryComponents for the request</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest`1.#ctor(System.Uri)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequest`1" /> class. </summary>
            <param name="requestUri">The URI object that contains the request string.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest`1.#ctor(System.Uri,Microsoft.OData.Client.QueryComponents,Microsoft.OData.Client.ProjectionPlan)">
            <summary>Create a request for a specific Uri</summary>
            <param name="requestUri">The URI for the request.</param>
            <param name="queryComponents">The query components for the request</param>
            <param name="plan">Projection plan to reuse (possibly null).</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest`1.ToString">
            <summary>Represents the URI of the query to the data service. </summary>
            <returns>The requested URI as a <see cref="T:System.String" /> value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceRequest`1.QueryComponents(Microsoft.OData.Client.ClientEdmModel)">
            <summary>The QueryComponents associated with this request</summary>
            <param name="model">The client model.</param>
            <returns>an instance of QueryComponents.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequest`1.ElementType">
            <summary>Gets the type of the object used to create the <see cref="T:Microsoft.OData.Client.DataServiceRequest`1"/> instance.</summary>
            <returns>A <see cref="T:System.Type"/> value that indicates the type of data returned.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequest`1.RequestUri">
            <summary>Gets the URI object that contains the request string. </summary>
            <returns>A <see cref="T:System.Uri"/> object that contains the request string.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceRequest`1.Plan">
            <summary>The ProjectionPlan for the request, if precompiled in a previous page; null otherwise.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceResponse">
            <summary>
            Data service response to ExecuteBatch &amp; SaveChanges
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceResponse.headers">
            <summary>Http headers of the response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceResponse.statusCode">
            <summary>Http status code of the response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceResponse.response">
            <summary>responses</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceResponse.batchResponse">
            <summary>true if this is a batch response, otherwise false.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceResponse.#ctor(Microsoft.OData.Client.HeaderCollection,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.OData.Client.OperationResponse},System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="headers">HTTP headers</param>
            <param name="statusCode">HTTP status code</param>
            <param name="response">list of responses</param>
            <param name="batchResponse">true if this represents a batch response, otherwise false.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceResponse.GetEnumerator">
            <summary>Gets an enumerator that enables retrieval of responses to operations being tracked by <see cref="T:Microsoft.OData.Client.OperationResponse" /> objects within the <see cref="T:Microsoft.OData.Client.DataServiceResponse" />.</summary>
            <returns>An enumerator over the response received from the service.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceResponse.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerator that enables retrieval of responses to operations being tracked by <see cref="T:Microsoft.OData.Client.OperationResponse" /> objects within the <see cref="T:Microsoft.OData.Client.DataServiceResponse" />.</summary>
            <returns>An enumerator over the response received from the service.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceResponse.BatchHeaders">
            <summary>The headers from an HTTP response associated with a batch request.</summary>
            <returns>An <see cref="T:System.Collections.IDictionary" /> object containing the name-value pairs of an HTTP response.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceResponse.BatchStatusCode">
            <summary>The status code from an HTTP response associated with a batch request.</summary>
            <returns>An integer based on status codes defined in Hypertext Transfer Protocol.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceResponse.IsBatchResponse">
            <summary>Gets a Boolean value that indicates whether the response contains multiple results.</summary>
            <returns>A Boolean value that indicates whether the response contains multiple results.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.QueryOperationResponse`1">
            <summary>
            Response to a batched query or Execute call.
            </summary>
            <typeparam name="T">The type to construct for the request results</typeparam>
        </member>
        <member name="T:Microsoft.OData.Client.QueryOperationResponse">
            <summary>
            Response to a batched query.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryOperationResponse.query">
            <summary>Original query</summary>
        </member>
        <member name="F:Microsoft.OData.Client.QueryOperationResponse.results">
            <summary>Enumerable of objects in query</summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOperationResponse.#ctor(Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.DataServiceRequest,Microsoft.OData.Client.MaterializeAtom)">
            <summary>
            constructor
            </summary>
            <param name="headers">HTTP headers</param>
            <param name="query">original query</param>
            <param name="results">retrieved objects</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOperationResponse.GetEnumerator">
            <summary>Executes the <see cref="T:Microsoft.OData.Client.DataServiceQuery" /> and returns <see cref="T:Microsoft.OData.Client.QueryOperationResponse" /> items. </summary>
            <returns>The enumerator to a collection of <see cref="T:Microsoft.OData.Client.QueryOperationResponse" /> items.</returns>
            <remarks>In the case of Collection(primitive) or Collection(complex), the entire collection is
            materialized when this is called.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOperationResponse.GetContinuation">
            <summary>Gets a <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation" /> object containing the URI that is used to retrieve the next results page.</summary>
            <returns>An object containing the URI that is used to return the next results page.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOperationResponse.GetContinuation(System.Collections.IEnumerable)">
            <summary>Gets a <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation" /> object containing the URI that is used to retrieve the next page of related entities in the specified collection.</summary>
            <returns>A continuation object that points to the next page for the collection.</returns>
            <param name="collection">The collection of related objects being loaded.</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOperationResponse.GetContinuation``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Gets a <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation`1" /> object that contains the URI that is used to retrieve the next page of related entities in the specified collection.</summary>
            <returns>A continuation object that points to the next page for the collection.</returns>
            <param name="collection">The collection of related objects being loaded.</param>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOperationResponse.GetInstance(System.Type,Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.DataServiceRequest,Microsoft.OData.Client.MaterializeAtom)">
            <summary>
            Creates a generic instance of the QueryOperationResponse and return it
            </summary>
            <param name="elementType">generic type for the QueryOperationResponse.</param>
            <param name="headers">constructor parameter1</param>
            <param name="query">constructor parameter2</param>
            <param name="results">constructor parameter3</param>
            <returns>returns a new strongly typed instance of QueryOperationResponse.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOperationResponse.GetEnumeratorHelper``1(System.Func{``0})">
            <summary>Gets the enumeration helper for the <see cref="T:Microsoft.OData.Client.QueryOperationResponse" />.</summary>
            <param name="getEnumerator">The enumerator.</param>
            <typeparam name="T">The generic type.</typeparam>
            <returns>An enumerator to enumerator through the results.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.QueryOperationResponse.Query">
            <summary>Gets the <see cref="T:Microsoft.OData.Client.DataServiceQuery" /> that generates the <see cref="T:Microsoft.OData.Client.QueryOperationResponse" /> items. </summary>
            <returns>A <see cref="T:Microsoft.OData.Client.DataServiceQuery" /> object.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.QueryOperationResponse.TotalCount">
            <summary>Gets the server result set count value from a query, if the query has requested the value.</summary>
            <returns>The return value can be either a zero or positive value equal to the number of entities in the set on the server.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the count tag is not found in the response stream.</exception>
        </member>
        <member name="P:Microsoft.OData.Client.QueryOperationResponse.Results">
            <summary>get a non-null enumerable of the result</summary>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOperationResponse`1.#ctor(Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.DataServiceRequest,Microsoft.OData.Client.MaterializeAtom)">
            <summary>
            constructor
            </summary>
            <param name="headers">HTTP headers</param>
            <param name="query">original query</param>
            <param name="results">retrieved objects</param>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOperationResponse`1.GetContinuation">
            <summary>Gets a <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation`1" /> object that contains the URI that is used to retrieve the next results page.</summary>
            <returns>An object that contains the URI that is used to return the next results page.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.QueryOperationResponse`1.GetEnumerator">
            <summary>Executes the <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> and gets <see cref="T:Microsoft.OData.Client.QueryOperationResponse`1" /> items.</summary>
            <returns>An enumerator to a collection of <see cref="T:Microsoft.OData.Client.QueryOperationResponse`1" /> items.</returns>
            <remarks>In the case of Collection(primitive) or Collection(complex), the entire collection is
            materialized when this is called.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.QueryOperationResponse`1.TotalCount">
            <summary>The server result set count value from a query, if the query has requested the value.</summary>
            <returns>The return value can be either zero or a positive value equal to the number of entities in the set on the server.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Error.Argument(System.String,System.String)">
            <summary>
            create and trace new ArgumentException
            </summary>
            <param name="message">exception message</param>
            <param name="parameterName">parameter name in error</param>
            <returns>ArgumentException</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Error.InvalidOperation(System.String)">
            <summary>
            create and trace new InvalidOperationException
            </summary>
            <param name="message">exception message</param>
            <returns>InvalidOperationException</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Error.InvalidOperation(System.String,System.Exception)">
            <summary>
            create and trace new InvalidOperationException
            </summary>
            <param name="message">exception message</param>
            <param name="innerException">innerException</param>
            <returns>InvalidOperationException</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Error.NotSupported(System.String)">
            <summary>
            Create and trace a NotSupportedException with a message
            </summary>
            <param name="message">Message for the exception</param>
            <returns>NotSupportedException</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Error.ThrowObjectDisposed(System.Type)">
            <summary>
            create and throw a ThrowObjectDisposed with a type name
            </summary>
            <param name="type">type being thrown on</param>
        </member>
        <member name="M:Microsoft.OData.Client.Error.HttpHeaderFailure(System.Int32,System.String)">
            <summary>
            create and trace a 
            </summary>
            <param name="errorCode">errorCode</param>
            <param name="message">message</param>
            <returns>InvalidOperationException</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Error.MethodNotSupported(System.Linq.Expressions.MethodCallExpression)">
            <summary>method not supported</summary>
            <param name="m">method</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Error.ThrowBatchUnexpectedContent(Microsoft.OData.Client.InternalError)">
            <summary>throw an exception because unexpected batch content was encounted</summary>
            <param name="value">internal error</param>
        </member>
        <member name="M:Microsoft.OData.Client.Error.ThrowBatchExpectedResponse(Microsoft.OData.Client.InternalError)">
            <summary>throw an exception because expected batch content was not encountered</summary>
            <param name="value">internal error</param>
        </member>
        <member name="M:Microsoft.OData.Client.Error.InternalError(Microsoft.OData.Client.InternalError)">
            <summary>unexpected xml when reading web responses</summary>
            <param name="value">internal error</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Error.ThrowInternalError(Microsoft.OData.Client.InternalError)">
            <summary>throw exception for unexpected xml when reading web responses</summary>
            <param name="value">internal error</param>
        </member>
        <member name="M:Microsoft.OData.Client.Error.Trace``1(``0)">
            <summary>
            Trace the exception
            </summary>
            <typeparam name="T">type of the exception</typeparam>
            <param name="exception">exception object to trace</param>
            <returns>the exception parameter</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Error.ArgumentNull(System.String)">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Error.ArgumentOutOfRange(System.String)">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Error.NotImplemented">
            <summary>
            The exception that is thrown when the author has not yet implemented the logic at this point in the program. This can act as an exception based TODO tag.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Error.NotSupported">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.InternalError">
            <summary>unique numbers for repeated error messages for unlikely, unactionable exceptions</summary>
        </member>
        <member name="T:Microsoft.OData.Client.MaterializeAtom">
            <summary>
            Use this class to materialize objects from an application/atom+xml stream.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.responseInfo">
            <summary>Backreference to the context to allow type resolution.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.elementType">
            <summary>base type of the object to create from the stream.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.expectingPrimitiveValue">
            <summary>when materializing a known type (like string)</summary>
            <remarks>&lt;property&gt; text-value &lt;/property&gt;</remarks>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.materializer">
            <summary>Materializer from which instances are read.</summary>
            <remarks>
            The log for the materializer stores all changes for the 
            associated data context.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.current">
            <summary>untyped current object</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.calledGetEnumerator">
            <summary>has GetEnumerator been called?</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.moved">
            <summary>Whether anything has been read.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.writer">
            <summary>
            output writer, set using reflection
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.#ctor(Microsoft.OData.Client.ResponseInfo,Microsoft.OData.Client.QueryComponents,Microsoft.OData.Client.ProjectionPlan,Microsoft.OData.Core.IODataResponseMessage,Microsoft.OData.Core.ODataPayloadKind)">
            <summary>
            constructor
            </summary>
            <param name="responseInfo">originating context</param>
            <param name="queryComponents">Query components (projection, expected type)</param>
            <param name="plan">Projection plan (if compiled in an earlier query).</param>
            <param name="responseMessage">responseMessage</param>
            <param name="payloadKind">The kind of the payload to materialize.</param>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.#ctor(Microsoft.OData.Client.ResponseInfo,System.Collections.Generic.IEnumerable{Microsoft.OData.Core.ODataEntry},System.Type,Microsoft.OData.Core.ODataFormat)">
            <summary>
            constructor
            </summary>
            <param name="responseInfo">originating context</param>
            <param name="entries">entries that needs to be materialized.</param>
            <param name="elementType">result type.</param>
            <param name="format">The format of the response being materialized from.</param>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.#ctor">
            <summary>
            Private internal constructor used for creating empty wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.IsNoContentResponse">
            <summary>
            if the response from server is null (no-content)
            </summary>
            <returns>return true if it no content.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.Dispose">
            <summary>
            dispose
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.GetEnumerator">
            <summary>
            as IEnumerable
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.GetTypeForMaterializer(System.Boolean,System.Type,Microsoft.OData.Client.ClientEdmModel,System.Type@)">
            <summary>
            Gets the type that of the instances that will be returned by materializer.
            </summary>
            <param name="expectingPrimitiveValue">Whether the expected is a primitive type.</param>
            <param name="elementType">Actual type on the client.</param>
            <param name="model">The client model used.</param>
            <param name="implementationType">The actual type that implements ICollection&lt;&gt;</param>
            <returns>Type of the instances that will be returned by materializer.</returns>
            <remarks>
            For collection navigation properties (i.e. ICollection&lt;T&gt; where T is an entity the method returns T. Materializer will 
            return single entity each time MoveNext() is called. However for collection properties we need the whole property instead of just a
            single collection item. 
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.MoveNext">
            <summary>
            Creates the next object from the stream.
            </summary>
            <returns>false if stream is finished</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.MoveNextInternal">
            <summary>
            Creates the next object from the stream.
            </summary>
            <returns>false if stream is finished</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.System#Collections#IEnumerator#Reset">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown</exception>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.CreateWrapper(Microsoft.OData.Client.DataServiceContext,System.Collections.IEnumerable)">
            <summary>
             Creates materializer for results
            </summary>
            <param name="context">Context of expression to analyze.</param>
            <param name="results">the results to wrap</param>
            <returns>a new materializer</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.CreateWrapper(Microsoft.OData.Client.DataServiceContext,System.Collections.IEnumerable,Microsoft.OData.Client.DataServiceQueryContinuation)">
            <summary>Creates a materializer for partial result sets.</summary>
            <param name="context">Context of expression to analyze.</param>
            <param name="results">The current page of results</param>
            <param name="continuation">The continuation for the results.</param>
            <returns>A new materializer.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.SetInsertingObject(System.Object)">
            <summary>set the inserted object expected in the response</summary>
            <param name="addedObject">object being inserted that the response is looking for</param>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.CountValue">
            <summary>
            The count tag's value, if requested
            </summary>
            <returns>The count value returned from the server</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.GetContinuation(System.Collections.IEnumerable)">
            <summary>
            Returns the next link URI for the collection key
            </summary>
            <param name="key">The collection for which the Uri is returned, or null, if the top level link is to be returned</param>
            <returns>An Uri pointing to the next page for the collection</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.CheckGetEnumerator">
            <summary>verify the GetEnumerator can only be called once</summary>
        </member>
        <member name="P:Microsoft.OData.Client.MaterializeAtom.Current">
            <summary>Loosely typed current object property.</summary>
            <remarks>
            For collection properties this property will be of AtomContentProperties to allow further materialization processing. 
            Otherwise the value should be of the right type, as the materializer takes the expected type into account.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.MaterializeAtom.EmptyResults">
            <summary>
            A materializer for empty results
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.MaterializeAtom.IsCountable">
            <summary>
            Returns true if the underlying object used for counting is available
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.MaterializeAtom.Context">
            <summary>
            The data service context object this materializer belongs to
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.MaterializeAtom.SetInstanceAnnotations">
            <summary>
            The action to set instance annotation for property or entry or feed
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.MaterializeAtom.ResultsWrapper">
            <summary>
            Private type to wrap partial (paged) results and make it look like standard materialized results.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.ResultsWrapper.results">
            <summary> The results to wrap </summary>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.ResultsWrapper.continuation">
            <summary>A continuation to the next page of results.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MaterializeAtom.ResultsWrapper.context">
            <summary>The data service context this result belongs to</summary>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.ResultsWrapper.#ctor(Microsoft.OData.Client.DataServiceContext,System.Collections.IEnumerable,Microsoft.OData.Client.DataServiceQueryContinuation)">
            <summary>
            Creates a wrapper for raw results
            </summary>
            <param name="context">Context of expression to analyze.</param>
            <param name="results">the results to wrap</param>
            <param name="continuation">The continuation for this query.</param>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.ResultsWrapper.GetContinuation(System.Collections.IEnumerable)">
            <summary>
            Get the next link to the result set
            </summary>
            <param name="key">When equals to null, returns the next link associated with this collection. Otherwise throws InvalidOperationException.</param>
            <returns>The continuation for this query.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.ResultsWrapper.IsEmptyResult">
            <summary>
            If the ResultWrapper is empty. When response code is No-Content, it is empty.
            </summary>
            <returns>Return true if it is empty result.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.MaterializeAtom.ResultsWrapper.GetEnumerator">
            <summary>
            Gets Enumerator for wrapped results.
            </summary>
            <returns>IEnumerator for results</returns>
        </member>
        <member name="P:Microsoft.OData.Client.MaterializeAtom.ResultsWrapper.Context">
            <summary>
            The data service context this result belongs to
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.MaterializerEntry">
            <summary>
            Materializer state for a given ODataEntry
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerEntry.entry">
            <summary>The entry.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerEntry.entityDescriptor">
            <summary>entity descriptor object which keeps track of the entity state and other entity specific information.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerEntry.isAtomOrTracking">
            <summary>True if the context format is Atom or if the MergeOption is anything other than NoTracking.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerEntry.flags">
            <summary>Entry flags.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerEntry.navigationLinks">
            <summary>List of navigation links for this entry.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.#ctor">
            <summary>
            Creates a new instance of MaterializerEntry.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.#ctor(Microsoft.OData.Core.ODataEntry,Microsoft.OData.Core.ODataFormat,System.Boolean,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Creates a new instance of MaterializerEntry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="format">The format the entry was read in.</param>
            <param name="isTracking">True if the contents of the entry will be tracked in the context, otherwise False.</param>
            <param name="model">The client model.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.#ctor(Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Core.ODataFormat,System.Boolean)">
            <summary>
            Creates a new instance of MaterializerEntry using the given entity descriptor for LoadProperty.
            </summary>
            <param name="entityDescriptor">Entity descriptor.</param>
            <param name="format">OData Format.</param>
            <param name="isTracking">Whether this entity is being tracked.</param>
            <remarks>Use this constructor only for LoadProperty scenario.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.CreateEmpty">
            <summary>
            Creates an empty entry.
            </summary>
            <returns>An empty entry.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.CreateEntry(Microsoft.OData.Core.ODataEntry,Microsoft.OData.Core.ODataFormat,System.Boolean,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Creates the materializer entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="format">The format the entry was read in.</param>
            <param name="isTracking">True if the contents of the entry will be tracked in the context, otherwise False.</param>
            <param name="model">The client model.</param>
            <returns>A new materializer entry.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.CreateEntryForLoadProperty(Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Core.ODataFormat,System.Boolean)">
            <summary>
            Creates the materializer entry for LoadProperty scenario.
            </summary>
            <param name="descriptor">The entity descriptor.</param>
            <param name="format">The format the entry was read in.</param>
            <param name="isTracking">True if the contents of the entry will be tracked in the context, otherwise False.</param>
            <returns>A new materializer entry.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.GetEntry(Microsoft.OData.Core.ODataEntry)">
            <summary>
            Gets an entry for a given ODataEntry.
            </summary>
            <param name="entry">The ODataEntry.</param>
            <returns>The materializer entry</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.AddNavigationLink(Microsoft.OData.Core.ODataNavigationLink)">
            <summary>
            Adds a navigation link.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.UpdateEntityDescriptor">
            <summary>
            Updates the entity descriptor.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.GetFlagValue(Microsoft.OData.Client.Materialization.MaterializerEntry.EntryFlags)">
            <summary>Gets the value for a masked item.</summary>
            <param name="mask">Mask value.</param>
            <returns>true if the flag is set; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerEntry.SetFlagValue(Microsoft.OData.Client.Materialization.MaterializerEntry.EntryFlags,System.Boolean)">
            <summary>Sets the value for a masked item.</summary>
            <param name="mask">Mask value.</param>
            <param name="value">Value to set</param>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.Entry">
            <summary>
            Gets the entry.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.IsAtomOrTracking">
            <summary>
            True if the context format is Atom or if the context's MergeOption is anything other than NoTracking.
            This is used to avoid building URI metadata information that is not needed outside of the context, such
            as odata.id and odata.editlink. Since this information is always available in the payload with Atom, for
            backward compatibility we continue using it as we always have, even for NoTracking cases.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.Id">
            <summary>
            Entry ID.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.Properties">
            <summary>
            Properties of the entry.
            </summary>
            <remarks>
            Non-property content goes to annotations.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.EntityDescriptor">
            <summary>The entity descriptor.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.ResolvedObject">
            <summary>Resolved object.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.ActualType">
            <summary>Actual type of the ResolvedObject.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.ShouldUpdateFromPayload">
            <summary>Whether values should be updated from payload.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.EntityHasBeenResolved">
            <summary>Whether the entity has been resolved / created.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.CreatedByMaterializer">
            <summary>Whether the materializer has created the ResolvedObject instance.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.ForLoadProperty">
            <summary>Is this entry created for LoadProperty.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.NavigationLinks">
            <summary>The navigation links.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.Format">
            <summary> Gets the format </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerEntry.EntityDescriptorUpdated">
            <summary> Whether the entity descriptor has been updated.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.MaterializerEntry.EntryFlags">
            <summary>
            Masks used get/set the status of the entry
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerEntry.EntryFlags.ShouldUpdateFromPayload">
            <summary>Bitmask for ShouldUpdateFromPayload flag.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerEntry.EntryFlags.CreatedByMaterializer">
            <summary>Bitmask for CreatedByMaterializer flag.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerEntry.EntryFlags.EntityHasBeenResolved">
            <summary>Bitmask for EntityHasBeenResolved flag.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerEntry.EntryFlags.EntityDescriptorUpdated">
            <summary>Bitmask for MediaLinkEntry flag (value).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerEntry.EntryFlags.ForLoadProperty">
            <summary>Bitmask for LoadProperty scenario.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.MaterializerFeed">
            <summary>
            Materializer state for a given ODataFeed
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerFeed.feed">
            <summary>The feed.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerFeed.entries">
            <summary>The entries.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerFeed.#ctor(Microsoft.OData.Core.ODataFeed,System.Collections.Generic.IEnumerable{Microsoft.OData.Core.ODataEntry})">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.OData.Client.Materialization.MaterializerFeed"/> struct from being created.
            </summary>
            <param name="feed">The feed.</param>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerFeed.CreateFeed(Microsoft.OData.Core.ODataFeed,System.Collections.Generic.IEnumerable{Microsoft.OData.Core.ODataEntry})">
            <summary>
            Creates the materializer feed.
            </summary>
            <param name="feed">The feed.</param>
            <param name="entries">The entries.</param>
            <returns>The materializer feed.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerFeed.GetFeed(Microsoft.OData.Core.ODataFeed)">
            <summary>
            Gets the materializer feed.
            </summary>
            <param name="feed">The feed.</param>
            <returns>The materializer feed.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerFeed.Feed">
            <summary>
            Gets the feed.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerFeed.Entries">
            <summary>
            Gets the entries.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerFeed.NextPageLink">
            <summary>
            URI representing the next page link.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Materialization.MaterializerNavigationLink">
            <summary>
            Materializer state for a given ODataNavigationLink
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerNavigationLink.link">
            <summary>The navigation link.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Materialization.MaterializerNavigationLink.feedOrEntry">
            <summary>An object field for the feed or enty.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerNavigationLink.#ctor(Microsoft.OData.Core.ODataNavigationLink,System.Object)">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.OData.Client.Materialization.MaterializerNavigationLink"/> struct from being created.
            </summary>
            <param name="link">The link.</param>
            <param name="materializedFeedOrEntry">Value of the link.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerNavigationLink.CreateLink(Microsoft.OData.Core.ODataNavigationLink,Microsoft.OData.Client.Materialization.MaterializerEntry)">
            <summary>
            Creates the materializer link with an entry.
            </summary>
            <param name="link">The link.</param>
            <param name="entry">The entry.</param>
            <returns>The materializer link.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerNavigationLink.CreateLink(Microsoft.OData.Core.ODataNavigationLink,Microsoft.OData.Core.ODataFeed)">
            <summary>
            Creates the materializer link with a feed.
            </summary>
            <param name="link">The link.</param>
            <param name="feed">The feed.</param>
            <returns>The materializer link.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Materialization.MaterializerNavigationLink.GetLink(Microsoft.OData.Core.ODataNavigationLink)">
            <summary>
            Gets the materializer link.
            </summary>
            <param name="link">The link.</param>
            <returns>The materializer link.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerNavigationLink.Link">
            <summary>
            Gets the link.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerNavigationLink.Entry">
            <summary>
            Gets the entry.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Materialization.MaterializerNavigationLink.Feed">
            <summary>
            Gets the feed.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.MediaEntryAttribute">
            <summary>
            This class marks a type that represents an Astoria client entity
            such that the Astoria client will treat it as a media entry 
            according to ATOM's "media link entry" concept.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.MediaEntryAttribute.mediaMemberName">
            <summary>Name of the member that contains the data for the media entry</summary>
        </member>
        <member name="M:Microsoft.OData.Client.MediaEntryAttribute.#ctor(System.String)">
            <summary>Creates a new instance of <see cref="T:Microsoft.OData.Client.MediaEntryAttribute" />.</summary>
            <param name="mediaMemberName">A string value that identifies the property that holds media data.</param>
            <remarks>
            Creates a new MediaEntryAttribute attribute and sets the name
            of the member that contains the actual data of the media entry
            (e.g. a byte[] containing a picture, a string containing HTML, etc.)
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.MediaEntryAttribute.MediaMemberName">
            <summary>The name of the property on the class that holds the media, usually binary data.</summary>
            <returns>A string value that identifies the property that holds media data.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.MergeOption">
            <summary>
            Used to specify a value synchronization strategy. 
            </summary>
            <remarks>
            Equivalent to System.Data.dll!System.Data.LoadOption
            Equivalent to System.Data.Linq.dll!System.Data.Linq.RefreshMode
            Equivalent to System.Data.Entity.dll!System.Data.Objects.MergeOption
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.MergeOption.AppendOnly">
            <summary>
            No current values are modified.
            </summary>
            <remarks>
            Equivalent to System.Data.Objects.MergeOption.AppendOnly
            Equivalent to System.Data.Linq.RefreshMode.KeepCurrentValues
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.MergeOption.OverwriteChanges">
            <summary>
            All current values are overwritten with current store values,
            regardless of whether they have been changed.
            </summary>
            <remarks>
            Equivalent to System.Data.LoadOption.OverwriteChanges
            Equivalent to System.Data.Objects.MergeOption.OverwriteChanges
            Equivalent to System.Data.Linq.RefreshMode.OverwriteCurrentValues
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.MergeOption.PreserveChanges">
            <summary>
            Current values that have been changed are not modified, but
            any unchanged values are updated with the current store
            values.  No changes are lost in this merge.
            </summary>
            <remarks>
            Equivalent to System.Data.LoadOption.PreserveChanges
            Equivalent to System.Data.Objects.MergeOption.PreserveChanges
            Equivalent to System.Data.Linq.RefreshMode.KeepChanges
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.MergeOption.NoTracking">
            <summary>
            Equivalent to System.Data.Objects.MergeOption.NoTracking
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.MimeTypePropertyAttribute">
            <summary>
            This attribute indicates another property in the same type that
            contains the MIME type that should be used for the data contained
            in the property this attribute is applied to.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.MimeTypePropertyAttribute.dataPropertyName">
            <summary>The name of the property that contains the data</summary>
        </member>
        <member name="F:Microsoft.OData.Client.MimeTypePropertyAttribute.mimeTypePropertyName">
            <summary>The name of the property that contains the mime type</summary>
        </member>
        <member name="M:Microsoft.OData.Client.MimeTypePropertyAttribute.#ctor(System.String,System.String)">
            <summary>Creates a new instance of the MimeTypePropertyAttribute.</summary>
            <param name="dataPropertyName">A string that contains the name of the new property attribute.</param>
            <param name="mimeTypePropertyName">A string that contains the Mime type of the new property attribute.</param>
        </member>
        <member name="P:Microsoft.OData.Client.MimeTypePropertyAttribute.DataPropertyName">
            <summary>Gets the name of the MimeTypePropertyAttribute.</summary>
            <returns>A string that contains the name of the property attribute. </returns>
        </member>
        <member name="P:Microsoft.OData.Client.MimeTypePropertyAttribute.MimeTypePropertyName">
            <summary>Gets the Mime type of the MimeTypePropertyAttribute</summary>
            <returns>A string that contains the Mime type of the property attribute. </returns>
        </member>
        <member name="T:Microsoft.OData.Client.EntityDescriptor">
            <summary>
            represents the cached entity
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityDescriptor.identity">
            <summary>uri to identitfy the entity</summary>
            <remarks>&lt;atom:id&gt;identity&lt;/id&gt;</remarks>
        </member>
        <member name="F:Microsoft.OData.Client.EntityDescriptor.entity">
            <summary>entity</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityDescriptor.defaultStreamDescriptor">
            <summary>tracks information about the default stream, if any.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityDescriptor.addToUri">
            <summary>uri of the resource set to add the entity to during save</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityDescriptor.selfLink">
            <summary>uri to query the entity</summary>
            <remarks>&lt;atom:link rel="self" href="queryLink" /&gt;</remarks>
        </member>
        <member name="F:Microsoft.OData.Client.EntityDescriptor.editLink">
            <summary>uri to edit the entity. In case of deep add, this can also refer to the navigation property name.</summary>
            <remarks>&lt;atom:link rel="edit" href="editLink" /&gt;</remarks>
        </member>
        <member name="F:Microsoft.OData.Client.EntityDescriptor.relatedEntityLinks">
            <summary>
            Contains the LinkInfo (navigation and relationship links) for navigation properties
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityDescriptor.transientEntityDescriptor">
            <summary>
            entity descriptor instance which contains metadata from responses which haven't been fully processed/materialized yet.
            This is used only in non-batch SaveChanges scenario.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityDescriptor.streamDescriptors">
            <summary>List of named streams for this entity</summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityDescriptor.operationDescriptors">
            <summary>List of service operation descriptors for this entity.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.#ctor(Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Create a new instance of Entity descriptor.
            </summary>
            <param name="model">The client model</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetLatestIdentity">
            <summary>
            returns the most recent identity of the entity
            </summary>
            <returns>the identity of the entity, as returned in the latest response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetLatestEditLink">
            <summary>return the most recent edit link for the entity</summary>
            <returns>the uri to edit the entity associated with the entity descriptor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetLatestEditStreamUri">
            <summary>return the most recent edit link for the MR associated with the entity</summary>
            <returns>the uri to edit the MR associated with the entity descriptor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetLatestETag">
            <summary>return the most recent etag for the entity</summary>
            <returns>etag for the entity associated with the entity descriptor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetLatestStreamETag">
            <summary>return the most return etag for the MR associated with the entity</summary>
            <returns>etag for the MR associated with the entity descriptor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetLatestServerTypeName">
            <summary>return the most recent type name of the entity as returned in the response payload.</summary>
            <returns>the type name of the entity as returned in the response payload.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetResourceUri(Microsoft.OData.Client.UriResolver,System.Boolean)">
            <summary>uri to edit the entity</summary>
            <param name="baseUriResolver">retrieves the baseUri to use for a given entity set.</param>
            <param name="queryLink">whether to return the query link or edit link</param>
            <returns>absolute uri which can be used to edit the entity</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.IsRelatedEntity(Microsoft.OData.Client.LinkDescriptor)">
            <summary>is the entity the same as the source or target entity</summary>
            <param name="related">related end</param>
            <returns>true if same as source or target entity</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetRelatedEnd">
            <summary>
            Return the related end for this resource. One should call this method, only if the resource is inserted via deep resource.
            </summary>
            <returns>returns the related end via which the resource was inserted.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.ClearChanges">
            <summary>
            clears all the changes - like closes the save stream, clears the transient entity descriptor.
            This method is called when the client is done with sending all the pending requests.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.CloseSaveStream">
            <summary>
            Closes the save stream if there's any and sets it to null
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.AddNavigationLink(System.String,System.Uri)">
            <summary>
            Add the given navigation link to the entity descriptor
            </summary>
            <param name="propertyName">name of the navigation property via which this entity is related to the other end.</param>
            <param name="navigationUri">uri that can be used to navigate from this entity to the other end.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.AddAssociationLink(System.String,System.Uri)">
            <summary>
            Add the given association link to the entity descriptor
            </summary>
            <param name="propertyName">name of the navigation property via which this entity is related to the other end.</param>
            <param name="associationUri">uri that can be used to navigate associations for this property.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.MergeLinkInfo(Microsoft.OData.Client.LinkInfo)">
            <summary>
            Merges the given linkInfo to the entity descriptor, 
            overwrites existing links with new ones (coming from the payload)
            </summary>
            <param name="linkInfo">linkInfo</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetNavigationLink(Microsoft.OData.Client.UriResolver,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation)">
            <summary>
            Try and get the navigation link. If the navigation link is not specified, then its used the self link of the entity and
            appends the property name.
            </summary>
            <param name="baseUriResolver">retrieves the appropriate baseUri for a given entitySet.</param>
            <param name="property">ClientProperty instance representing the navigation property.</param>
            <returns>returns the uri for the given link. If the link is not present, its uses the self link of the current entity and appends the navigation property name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.TryGetLinkInfo(System.String,Microsoft.OData.Client.LinkInfo@)">
            <summary>
            Returns the LinkInfo for the given navigation property. 
            </summary>
            <param name="propertyName">name of the navigation property </param>
            <param name="linkInfo"> LinkInfo for the navigation propery</param>
            <returns>true if LinkInfo is found for the navigation property, false if not found</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.AddStreamInfoIfNotPresent(System.String)">
            <summary>
            Check if there is a stream with this name. If yes, returns the information about that stream, otherwise add a streams with the given name.
            </summary>
            <param name="name">name of the stream.</param>
            <returns>an existing or new namedstreaminfo instance with the given name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.AddOperationDescriptor(Microsoft.OData.Client.OperationDescriptor)">
            <summary>
            Adds an operation descriptor to the list of operation descriptors.
            </summary>
            <param name="operationDescriptor">the operation descriptor to add.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.ClearOperationDescriptors">
            <summary>
            Clears all operator descriptors
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.AppendOperationalDescriptors(System.Collections.Generic.IEnumerable{Microsoft.OData.Client.OperationDescriptor})">
            <summary>
            Appends OperationDescriptors to the existing list of OperationDescriptors
            </summary>
            <param name="descriptors">List containing OperationDescriptors to add for this entityDescriptor</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.TryGetNamedStreamInfo(System.String,Microsoft.OData.Client.StreamDescriptor@)">
            <summary>
            Gets the stream info with the given name.
            </summary>
            <param name="name">name of the stream.</param>
            <param name="namedStreamInfo">information about the stream with the given name.</param>
            <returns>true if there is a stream with the given name, otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.MergeStreamDescriptor(Microsoft.OData.Client.StreamDescriptor)">
            <summary>
            Merges the given named stream info object.
            If the stream descriptor is already present, then this method merges the info from the given stream descriptor
            into the existing one, otherwise justs add this given stream descriptor to the list of stream descriptors for
            this entity.
            </summary>
            <param name="materializedStreamDescriptor">namedStreamInfo instance containing information about the stream.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.SetParentForInsert(Microsoft.OData.Client.EntityDescriptor,System.String)">
            <summary>
            Sets up the descriptor's parent descriptor and parent property. Only valid if the descriptor is in the Added state.
            If the property ParentForUpdate and ParentPropertyForUpdate of descriptor has already been set, this method will also set value for these two properties to null.
            </summary>
            <param name="parentDescriptor">The parent descriptor.</param>
            <param name="propertyForInsert">The property for insert.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.SetParentForUpdate(Microsoft.OData.Client.EntityDescriptor,System.String)">
            <summary>
            Sets up the descriptor's parent descriptor and parent property for update. Only valid if the descriptor is in the Modified state.
            If the property ParentForInsert and ParentPropertyForInsert of descriptor has already been set, this method will also set value for these two properties to null.
            </summary>
            <param name="parentDescriptor">The parent descriptor.</param>
            <param name="propertyForUpdate">The property for update.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.SetEntitySetUriForInsert(System.Uri)">
            <summary>
            Sets the entity set URI to use for inserting the entity tracked by this descriptor. Only valid if the descriptor is in the added state.
            </summary>
            <param name="entitySetInsertUri">The entity set insert URI.</param>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetLinkInfo(System.String)">
            <summary>
            Returns LinkInfo for the given property, if it does not exists than a new one is created.
            </summary>
            <param name="propertyName">name of the navigation property</param>
            <returns>LinkInfo for propertyName</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.GetLink(System.Boolean)">
            <summary>
            In V1, we used to not support self links. Hence we used to use edit links as self links.
            IN V2, we are adding support for self links. But if there are not specified, we need to 
            fall back on the edit link.
            </summary>
            <param name="queryLink">whether to get query link or the edit link.</param>
            <returns>the query or the edit link, as specified in the <paramref name="queryLink"/> parameter.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.EntityDescriptor.CreateDefaultStreamDescriptor">
            <summary>
            Creates a default stream descriptor, if there is none yet, and returns it.
            If there is one already present, then returns the current instance.
            </summary>
            <returns>stream descriptor representing the default stream.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.Identity">
            <summary>Gets the URI that is the identity value of the entity.</summary>
            <returns>The <see cref="P:Microsoft.OData.Client.EntityDescriptor.Identity" /> property corresponds to the identity element of the entry that represents the entity in the Atom response.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.SelfLink">
            <summary>Gets the URI that is used to return the entity resource.</summary>
            <returns>A URI that returns the entity.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.EditLink">
            <summary>Gets the URI that modifies the entity.</summary>
            <returns>The edit link URI for the entity resource.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.ReadStreamUri">
            <summary>Gets the URI that accesses the binary property data of the entity.</summary>
            <returns>A URI that accesses the binary property as a stream.</returns>
            <remarks>
            If the entity for the box is an MLE this property stores the content source URI of the MLE.
            That is, it stores the read URI for the associated MR.
            Setting it to non-null marks the entity as MLE.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.EditStreamUri">
            <summary>Gets the URI that modifies the binary property data of the entity.</summary>
            <returns>The <see cref="P:Microsoft.OData.Client.EntityDescriptor.EditStreamUri" /> property contains the edit-media link URI for the Media Resource that is associated with the entity, which is a Media Link Entry.</returns>
            <remarks>
            If the entity for the box is an MLE this property stores the edit-media link URI.
            That is, it stores the URI to send PUTs for the associated MR.
            Setting it to non-null marks the entity as MLE.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.Entity">
            <summary>Gets the entity that contains the update data.</summary>
            <returns>An object that contains update data.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.ETag">
            <summary>Gets an eTag value that indicates the state of data targeted for update since the last call to <see cref="M:Microsoft.OData.Client.DataServiceContext.SaveChanges" />.</summary>
            <returns>The state of data.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.StreamETag">
            <summary>Gets the eTag for the media resource associated with an entity that is a media link entry.</summary>
            <returns>A string value that indicates the state of data.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.ParentForInsert">
            <summary>Gets the parent entity that is related to the entity.</summary>
            <returns>An object that is the parent entity in the relationship link.</returns>
            <remarks>This is only set for entities added through AddRelateObject call</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.ParentPropertyForInsert">
            <summary>Gets the name of the property of the entity that is a navigation property and links to the parent entity.</summary>
            <returns>The name of the parent property.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.ParentForUpdate">
            <summary>Gets the parent entity that is related to the entity.</summary>
            <returns>An object that is the parent entity in the relationship link.</returns>
            <remarks>This is only set for entities updated through UpdateRelateObject call</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.ParentPropertyForUpdate">
            <summary>Gets the name of the property of the entity that is a navigation property and links to the parent entity.</summary>
            <returns>The name of the parent property.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.ServerTypeName">
            <summary>Gets the name of the type in the data source to which the entity is mapped.</summary>
            <returns>A string that is the name of the data type.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.LinkInfos">
            <summary>Returns a collection of links that are the relationships in which the entity participates.</summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:Microsoft.OData.Client.LinkInfo" /> objects that represents links in which the entity participates.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.StreamDescriptors">
            <summary>Returns a collection of named binary data streams that belong to the entity.</summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:Microsoft.OData.Client.StreamDescriptor" /> objects that are the named binary data streams that belong to the entity.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.OperationDescriptors">
            <summary>Gets a collection of operation descriptors associated with the entity.</summary>
            <returns>A collection of operation descriptors associated with the entity.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.Model">
            <summary>
            Gets the client model.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.ParentEntity">
            <summary>Parent entity</summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.ParentEntityDescriptor">
            <summary>Parent entity descriptor</summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.ParentProperty">
            <summary>Gets the name of the property of the entity that is a navigation property and links to the parent entity. </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.DescriptorKind">
            <summary>this is a entity</summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.IsDeepInsert">
            <summary>
            Returns true if the resource was inserted via its parent. E.g. POST customer(0)/Orders
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.SaveStream">
            <summary>
            The stream which contains the new content for the MR associated with this MLE.
            This stream is used during SaveChanges to POST/PUT the MR.
            Setting it to non-null marks the entity as MLE.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.StreamState">
            <summary>
            Describes whether the SaveStream is for Insert or Update.
            The value NoStream is for both non-MLEs and MLEs with unmodified stream.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.IsMediaLinkEntry">
            <summary>
            Returns true if we know that the entity is MLE. Note that this does not include the information
            from the entity type. So if the entity was attributed with HasStream for example
            this boolean might not be aware of it.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.IsModified">
            <summary>
            Returns true if the entry has been modified (and thus should participate in SaveChanges).
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.TransientEntityDescriptor">
            <summary>
            entity descriptor instance containing metadata from responses, which hasn't been fully processed yet.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.DefaultStreamDescriptor">
            <summary>
            Returns the stream descriptor for the default stream associated with this entity.
            If this entity is not an MLE, then returns null;
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.EdmValue">
            <summary>
            Gets the edm structured value associated with this entity.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.EntitySetName">
            <summary>
            The entity set name provided in either AttachTo or AddObject.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.EntityDescriptor.PropertiesToSerialize">
            <summary>
             The hash set contains names of changed properties in this entity.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.EntityStates">
            <summary>
            Describes the insert/update/delete state of an entity or link.
            </summary>
            <remarks>
            Deleting an inserted resource will detach it.
            After SaveChanges, deleted resources will become detached and Added &amp; Modified resources will become unchanged.
            </remarks>
        </member>
        <member name="F:Microsoft.OData.Client.EntityStates.Detached">
            <summary>
            The resource is not tracked by the context.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityStates.Unchanged">
            <summary>
            The resource is tracked by a context with no changes.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityStates.Added">
            <summary>
            The resource is tracked by a context for insert.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityStates.Deleted">
            <summary>
            The resource is tracked by a context for deletion.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.EntityStates.Modified">
            <summary>
            The resource is tracked by a context for update.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.SaveChangesOptions">
            <summary>
            options when saving changes
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveChangesOptions.None">
            <summary>default option, using multiple requests to the server stopping on the first failure</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveChangesOptions.BatchWithSingleChangeset">
            <summary>save the changes in a single changeset in a batch request.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveChangesOptions.ContinueOnError">
            <summary>save all the changes using multiple requests</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveChangesOptions.ReplaceOnUpdate">
            <summary>Use replace semantics when doing update.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveChangesOptions.BatchWithIndependentOperations">
            <summary>save each change independently in a batch request.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveChangesOptions.PostOnlySetProperties">
            <summary>
            Use partial payload when doing post.
            Note it can only be used when using <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" />
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.SaveResult">
            <summary>
            Handle the request (both sync and async) for non batch scenarios
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveResult.cachedResponses">
            <summary>keeps track of all the parsed responses.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveResult.inMemoryResponseStream">
            <summary>
            We cache the current response and then parse it. we need to do this for the async case only.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveResult.responseMessage">
            <summary>http web response</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveResult.cachedResponse">
            <summary>remove it later</summary>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.#ctor(Microsoft.OData.Client.DataServiceContext,System.String,Microsoft.OData.Client.SaveChangesOptions,System.AsyncCallback,System.Object)">
            <summary>
            constructor for SaveResult
            </summary>
            <param name="context">context</param>
            <param name="method">method</param>
            <param name="options">options</param>
            <param name="callback">user callback</param>
            <param name="state">user state object</param>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.BeginCreateNextChange">
            <summary>
            This starts the next change
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.CreateNextChange">
            <summary>
            This starts the next change
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.FinishCurrentChange(Microsoft.OData.Client.BaseAsyncResult.PerRequest)">
            <summary>Read and store response data for the current change, and try to start the next one</summary>
            <param name="pereq">the completed per request object</param>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.HandleOperationResponse(Microsoft.OData.Core.IODataResponseMessage)">
            <summary>IODataResponseMessage contain response for the operation.</summary>
            <param name="responseMsg">IODataResponseMessage instance.</param>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.HandleResponse">
            <summary>
            Handle the response.
            </summary>
            <returns>an instance of the DataServiceResponse, containing individual responses for all the requests made during this SaveChanges call.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.GetMaterializer(Microsoft.OData.Client.EntityDescriptor,Microsoft.OData.Client.ResponseInfo)">
            <summary>
            Get the materializer to process the response.
            </summary>
            <param name="entityDescriptor">entity descriptor whose response is getting materialized.</param>
            <param name="responseInfo">information about the response to be materialized.</param>
            <returns>an instance of MaterializeAtom, that can be used to materialize the response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.CreateRequestMessage(System.String,System.Uri,Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.HttpStack,Microsoft.OData.Client.Descriptor,System.String)">
            <summary>
            Returns the request message to write the headers and payload into.
            </summary>
            <param name="method">Http method for the request.</param>
            <param name="requestUri">Base Uri for the request.</param>
            <param name="headers">Request headers.</param>
            <param name="httpStack">HttpStack to use.</param>
            <param name="descriptor">Descriptor for the request, if there is one.</param>
            <param name="contentId">Content-ID header that could be used in batch request.</param>
            <returns>an instance of IODataRequestMessage.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.CreateNonBatchChangeData(System.Int32,Microsoft.OData.Client.ODataRequestMessageWrapper)">
            <summary>
            Create memory stream for descriptor (entity or link or MR or named stream).
            </summary>
            <param name="index">Index into changed entries.</param>
            <param name="requestMessage">RequestMessage to be used to generate the payload.</param>
            <returns>Stream of data for descriptor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.CreateNextRequest">
            <summary>
            Create request message from the next change.
            </summary>
            <returns>An instance of ODataRequestMessage for the next change.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.CheckAndProcessMediaEntryPost(Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Check to see if the resource to be inserted is a media descriptor, and if so
            setup a POST request for the media content first and turn the rest of 
            the operation into a PUT to update the rest of the properties.
            </summary>
            <param name="entityDescriptor">The resource to check/process</param>
            <returns>An instance of ODataRequestMessage to do POST to the media resource</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.CheckAndProcessMediaEntryPut(Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Checks if the entity descriptor represents an MLE with modified MR and if so creates a PUT request
              to update the MR.
            </summary>
            <param name="entityDescriptor">The entity descriptor for the entity to be checked.</param>
            <returns>An instance of ODataRequestMessage for the newly created MR PUT request or null if the entity is not MLE or its MR hasn't changed.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.CreateMediaResourceRequest(System.Uri,System.String,System.Version,System.Boolean,System.Boolean,Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.Descriptor)">
            <summary>
            Creates HTTP request for the media resource (MR)
            </summary>
            <param name="requestUri">The URI to request</param>
            <param name="method">The HTTP method to use (POST or PUT)</param>
            <param name="version">version to be sent in the DSV request header.</param>
            <param name="sendChunked">Send the request using chunked encoding to avoid buffering.</param>
            <param name="applyResponsePreference">If the response preference setting should be applied to the request
            (basically means if the response is expected to contain an entity or not).</param>
            <param name="headers">Collection of request headers</param>
            <param name="descriptor">Descriptor for this media resource request.</param>
            <returns>An instance of ODataRequestMessage.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.SetupMediaResourceRequest(Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.DataServiceSaveStream,System.String)">
            <summary>
            Sets the content and the headers of the media resource request
            </summary>
            <param name="headers">The header collection to setup.</param>
            <param name="saveStream">DataServiceSaveStream instance containing all information about the stream.</param>
            <param name="etag">ETag header value to be set. If passed null, etag header is not set.</param>
            <remarks>This only works with the V2 MR support (SetSaveStream), this will not setup
            the request for V1 property based MRs.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.HandleOperationException(System.InvalidOperationException,Microsoft.OData.Core.IODataResponseMessage)">
            <summary>operation with exception</summary>
            <param name="e">exception object</param>
            <param name="response">response object</param>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.CheckContinueOnError">
            <summary>
            Decide whether we should continue when there is an error thrown
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.HandleOperationResponseData(Microsoft.OData.Core.IODataResponseMessage)">
            <summary>
            copy the response data
            </summary>
            <param name="response">response object</param>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.HandleOperationResponseData(Microsoft.OData.Core.IODataResponseMessage,System.IO.Stream)">
            <summary>
            Handle the response payload.
            </summary>
            <param name="responseMsg">httpwebresponse instance.</param>
            <param name="responseStream">stream containing the response payload.</param>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.CreateNamedStreamRequest(Microsoft.OData.Client.StreamDescriptor)">
            <summary>
            Creates a request for the given named stream.
            </summary>
            <param name="namedStreamInfo">NamedStreamInfo instance containing information about the stream.</param>
            <returns>An instance of ODataRequestMessage for the given named stream.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.SaveResult.IsBatchRequest">
            <summary>returns false since this class handles only non-batch scenarios</summary>
        </member>
        <member name="P:Microsoft.OData.Client.SaveResult.ProcessResponsePayload">
            <summary>
            returns true if the payload needs to be processed.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.SaveResult.ResponseStream">
            <summary>
            In async case, this is a memory stream used to cache responses, as we are reading async from the underlying http web response stream.
            In non-async case, this is the actual response stream, as returned by the http request.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.SaveResult.CachedResponse">
            <summary>
            cached response
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveResult.CachedResponse.Headers">
            <summary>response headers</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveResult.CachedResponse.StatusCode">
            <summary>response status code</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveResult.CachedResponse.Version">
            <summary>Parsed response OData-Version header.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveResult.CachedResponse.MaterializerEntry">
            <summary>entry containing the parsed response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveResult.CachedResponse.Exception">
            <summary>Exception if encountered.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SaveResult.CachedResponse.Descriptor">
            <summary>descriptor for which the response is getting parsed.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.SaveResult.CachedResponse.#ctor(Microsoft.OData.Client.Descriptor,Microsoft.OData.Client.HeaderCollection,System.Net.HttpStatusCode,System.Version,Microsoft.OData.Client.Materialization.MaterializerEntry,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="descriptor">descriptor whose response is getting processed.</param>
            <param name="headers">headers</param>
            <param name="statusCode">status code</param>
            <param name="responseVersion">Parsed response OData-Version header.</param>
            <param name="entry">atom entry, if there is a non-error response payload.</param>
            <param name="exception">exception, if the request threw an exception.</param>
        </member>
        <member name="T:Microsoft.OData.Client.SendingRequestEventArgs">
            <summary>
            Event args for the event fired before executing a web request. Gives a 
            chance to customize or replace the request object to be used.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.SendingRequestEventArgs.request">
            <summary>The web request reported through this event</summary>
        </member>
        <member name="F:Microsoft.OData.Client.SendingRequestEventArgs.requestHeaders">
            <summary>The request header collection.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.SendingRequestEventArgs.#ctor(System.Net.WebRequest,System.Net.WebHeaderCollection)">
            <summary>
            Constructor
            </summary>
            <param name="request">The request reported through this event</param>
            <param name="requestHeaders">The request header collection.</param>
        </member>
        <member name="P:Microsoft.OData.Client.SendingRequestEventArgs.Request">
            <summary>Gets or sets the <see cref="T:System.Net.HttpWebRequest" /> instance about to be sent by the client library to the data service.</summary>
            <returns><see cref="T:System.Net.HttpWebRequest" />.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.SendingRequestEventArgs.RequestHeaders">
            <summary>Gets the collection protocol headers that are associated with the request to the data service.</summary>
            <returns>A collection of protocol headers that are associated with the request.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Serializer">
            <summary>
            Serializes the request data into the given format using the given message writer.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Serializer.requestInfo">
            <summary>where to pull the changes from</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Serializer.propertyConverter">
            <summary>The property converter to use for creating ODataProperty instances.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Serializer.options">
            <summary>The save changes option.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Serializer.sendOption">
            <summary>The option to send entity parameters.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.#ctor(Microsoft.OData.Client.RequestInfo)">
            <summary>
            Creates a new instance of the Serializer.
            </summary>
            <param name="requestInfo">the request info.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.#ctor(Microsoft.OData.Client.RequestInfo,Microsoft.OData.Client.EntityParameterSendOption)">
            <summary>
            Creates a new instance of the Serializer.
            </summary>
            <param name="requestInfo">the request info.</param>
            <param name="sendOption">The option to send entity operation parameters.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.#ctor(Microsoft.OData.Client.RequestInfo,Microsoft.OData.Client.SaveChangesOptions)">
            <summary>
            Creates a new instance of the Serializer.
            </summary>
            <param name="requestInfo">the request info.</param>
            <param name="options">the save change options.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.GetKeyString(Microsoft.OData.Client.DataServiceContext,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the string of keys used in URI.
            </summary>
            <param name="context">Wrapping context instance.</param>
            <param name="keys">The dictionary containing key pairs.</param>
            <returns>The string of keys.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.GetParameterString(Microsoft.OData.Client.DataServiceContext,Microsoft.OData.Client.OperationParameter[])">
            <summary>
            Gets the string of parameters used in URI.
            </summary>
            <param name="context">Wrapping context instance.</param>
            <param name="parameters">Parameters of function.</param>
            <returns>The string of parameters.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.GetParameterValue(Microsoft.OData.Client.DataServiceContext,Microsoft.OData.Client.OperationParameter)">
            <summary>
            Seriliaze the parameter value to string.
            </summary>
            <param name="context">The context.</param>
            <param name="parameter">The parameter.</param>
            <returns>Parameter value string.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.CreateMessageWriter(Microsoft.OData.Client.ODataRequestMessageWrapper,Microsoft.OData.Client.RequestInfo,System.Boolean)">
            <summary>
            Creates an instance of ODataMessageWriter.
            </summary>
            <param name="requestMessage">Instance of IODataRequestMessage.</param>
            <param name="requestInfo">RequestInfo containing information about the client settings.</param>
            <param name="isParameterPayload">true if the writer is intended to for a parameter payload, false otherwise.</param>
            <returns>An instance of ODataMessageWriter.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.CreateODataEntry(Microsoft.OData.Client.EntityDescriptor,System.String,Microsoft.OData.Client.Metadata.ClientTypeAnnotation,Microsoft.OData.Client.DataServiceClientFormat)">
            <summary>
            Creates an ODataEntry for the given EntityDescriptor and fills in its ODataLib metadata.
            </summary>
            <param name="entityDescriptor">The entity descriptor.</param>
            <param name="serverTypeName">Name of the server type.</param>
            <param name="entityType">The client-side entity type.</param>
            <param name="clientFormat">The current client format.</param>
            <returns>An odata entry with its metadata filled in.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.WriteBodyOperationParameters(System.Collections.Generic.List{Microsoft.OData.Client.BodyOperationParameter},Microsoft.OData.Client.ODataRequestMessageWrapper)">
            <summary>
            Writes the body operation parameters associated with a ServiceAction. For each BodyOperationParameter:
            1. calls ODataPropertyConverter  to convert CLR object into ODataValue/primitive values.
            2. then calls ODataParameterWriter to write the ODataValue/primitive values.
            </summary>
            <param name="operationParameters">The list of operation parameters to write.</param>
            <param name="requestMessage">The OData request message used to write the operation parameters.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.WriteEntry(Microsoft.OData.Client.EntityDescriptor,System.Collections.Generic.IEnumerable{Microsoft.OData.Client.LinkDescriptor},Microsoft.OData.Client.ODataRequestMessageWrapper)">
            <summary>
            Write the entry element.
            </summary>
            <param name="entityDescriptor">The entity.</param>
            <param name="relatedLinks">Collection of links related to the entity.</param>
            <param name="requestMessage">The OData request message.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.WriteNavigationLink(Microsoft.OData.Client.EntityDescriptor,System.Collections.Generic.IEnumerable{Microsoft.OData.Client.LinkDescriptor},Microsoft.OData.Client.ODataWriterWrapper)">
            <summary>
            Writes a navigation link.
            </summary>
            <param name="entityDescriptor">The entity</param>
            <param name="relatedLinks">The links related to the entity</param>
            <param name="odataWriter">The ODataWriter used to write the navigation link.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.WriteEntityReferenceLink(Microsoft.OData.Client.LinkDescriptor,Microsoft.OData.Client.ODataRequestMessageWrapper)">
            <summary>
            Writes an entity reference link.
            </summary>
            <param name="binding">The link descriptor.</param>
            <param name="requestMessage">The request message used for writing the payload.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.WriteUriOperationParametersToUri(System.Uri,System.Collections.Generic.List{Microsoft.OData.Client.UriOperationParameter})">
            <summary>
            Enumerates through the list of URI operation parameters and creates a new Uri with the uri operation parameters written as query string of the new Uri.
            </summary>
            <param name="requestUri">The Uri used to construct the new Uri.</param>
            <param name="operationParameters">The non-empty list of uri parameters which will be converted to query string.</param>
            <returns>Uri containing the uri parameters as query string.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.WriteCollectionValueInBodyOperationParameter(Microsoft.OData.Core.ODataParameterWriter,Microsoft.OData.Client.BodyOperationParameter,Microsoft.OData.Edm.IEdmCollectionType)">
            <summary>
            Writes collection value in body operation parameter.
            </summary>
            <param name="parameterWriter">The odata parameter writer.</param>
            <param name="operationParameter">The operation parameter.</param>
            <param name="edmCollectionType">The edm collection type.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.ConvertToEscapedUriValue(System.String,System.Object,System.Boolean)">
            <summary>
            Converts a <see cref="T:Microsoft.OData.Client.UriOperationParameter"/> value to an escaped string for use in a Uri. Wraps the call to ODL's ConvertToUriLiteral and escapes the results. 
            </summary>
            <param name="paramName">The name of the <see cref="T:Microsoft.OData.Client.UriOperationParameter"/>. Used for error reporting.</param>
            <param name="value">The value of the <see cref="T:Microsoft.OData.Client.UriOperationParameter"/>.</param>
            <param name="useEntityReference">If true, use entity reference, instead of entity to serialize the parameter.</param>
            <returns>A string representation of <paramref name="value"/> for use in a Url.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.ConvertToODataValue(System.String,System.Object,System.Boolean@,System.Boolean)">
            <summary>
            Converts the object to ODataValue, the result could be null, the original primitive object, ODataNullValue,
            ODataEnumValue, ODataCollectionValue, ODataEntry, ODataEntityReferenceLinks, ODataEntityReferenceLinks, or
            a list of ODataEntry.
            </summary>
            <param name="paramName">The name of the <see cref="T:Microsoft.OData.Client.UriOperationParameter"/>. Used for error reporting.</param>
            <param name="value">The value of the <see cref="T:Microsoft.OData.Client.UriOperationParameter"/>.</param>
            <param name="needsSpecialEscaping">True if the result need special escaping.</param>
            <param name="useEntityReference">If true, use entity reference, instead of entity to serialize the parameter.</param>
            <returns>The converted result.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.ConvertToCollectionValue(System.String,System.Object,Microsoft.OData.Client.Metadata.ClientTypeAnnotation,System.Boolean)">
            <summary>
            Converts the object to ODataCollectionValue, ODataEntityReferenceLinks, or
            a list of ODataEntry.
            </summary>
            <param name="paramName">The name of the <see cref="T:Microsoft.OData.Client.UriOperationParameter"/>. Used for error reporting.</param>
            <param name="value">The value of the <see cref="T:Microsoft.OData.Client.UriOperationParameter"/>.</param>
            <param name="itemTypeAnnotation">The client type annotation of the value.</param>
            <param name="useEntityReference">If true, use entity reference, instead of entity to serialize the parameter.</param>
            <returns>The converted result.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.ConvertToEntityValue(System.Object,System.Type,System.Boolean)">
            <summary>
            Converts the object to ODataEntry or ODataEntityReferenceLink.
            </summary>
            <param name="value">The value of the <see cref="T:Microsoft.OData.Client.UriOperationParameter"/>.</param>
            <param name="elementType">The type of the value</param>
            <param name="useEntityReference">If true, use entity reference, instead of entity to serialize the parameter.</param>
            <returns>The converted result.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Serializer.CreateODataEntryFromEntityOperationParameter(Microsoft.OData.Client.Metadata.ClientTypeAnnotation,System.Object)">
            <summary>
            Creates an ODataEntry using some properties extracted from an entity operation parameter.
            </summary>
            <param name="clientTypeAnnotation">The client type annotation of the entity.</param>
            <param name="parameterValue">The Clr value of the entity.</param>
            <returns>The ODataEntry created.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.StreamDescriptor">
            <summary>
            Holds information about stream.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.StreamDescriptor.streamLink">
            <summary>
            The Data service stream link object
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.StreamDescriptor.entityDescriptor">
            <summary>entity descriptor refering the parent entity.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.StreamDescriptor.transientNamedStreamInfo">
            <summary>
            transient named stream info, which contains metadata from the response which has not been materialized yet.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.StreamDescriptor.#ctor(System.String,Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Creates a StreamDescriptor class with the given name and other information
            </summary>
            <param name="name">name of the stream.</param>
            <param name="entityDescriptor">instance of entity descriptor that contains this stream.</param>
        </member>
        <member name="M:Microsoft.OData.Client.StreamDescriptor.#ctor(Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Creates a StreamDescriptor class for the default stream (MR) associated with an entity.
            </summary>
            <param name="entityDescriptor">instance of entity descriptor that contains this stream.</param>
        </member>
        <member name="M:Microsoft.OData.Client.StreamDescriptor.MergeStreamDescriptor(Microsoft.OData.Client.StreamDescriptor,Microsoft.OData.Client.StreamDescriptor)">
            <summary>
            Merge the information from the new stream info into the existing one.
            </summary>
            <param name="existingStreamDescriptor">stream info into which the data needs to be merged.</param>
            <param name="newStreamDescriptor">stream info which contains the latest data.</param>
        </member>
        <member name="M:Microsoft.OData.Client.StreamDescriptor.ClearChanges">
            <summary>
            clears all the changes - like closes the save stream, clears the transient entity descriptor.
            This method is called when the client is done with sending all the pending requests.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.StreamDescriptor.GetLatestEditLink">
            <summary>return the most recent edit link for the named stream</summary>
            <returns>the uri to edit the named stream.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.StreamDescriptor.GetLatestETag">
            <summary>return the most recent etag for the named stream</summary>
            <returns>the etag for the named stream.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.StreamDescriptor.CloseSaveStream">
            <summary>
            Closes the save stream if there's any and sets it to null
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.StreamDescriptor.StreamLink">
            <summary>The <see cref="T:Microsoft.OData.Client.DataServiceStreamLink" /> that represents the binary resource stream.</summary>
            <returns>Returns <see cref="T:Microsoft.OData.Client.DataServiceStreamLink" />.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.StreamDescriptor.EntityDescriptor">
            <summary>The <see cref="T:Microsoft.OData.Client.EntityDescriptor" /> that represents the entity to which the named resource stream belongs.</summary>
            <returns>The <see cref="T:Microsoft.OData.Client.EntityDescriptor" /> of the entity.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.StreamDescriptor.Name">
            <summary>
            Returns the name of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.StreamDescriptor.SelfLink">
            <summary>
            Returns the URI to get the named stream.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.StreamDescriptor.EditLink">
            <summary>
            Returns the URI to update the named stream.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.StreamDescriptor.ContentType">
            <summary>
            Returns the content type of the named stream.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.StreamDescriptor.ETag">
            <summary>
            Returns the etag for the named stream.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.StreamDescriptor.SaveStream">
            <summary>
            Returns the stream associated with this name.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.StreamDescriptor.DescriptorKind">
            <summary>return true, since this class represents entity descriptor.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.StreamDescriptor.TransientNamedStreamInfo">
            <summary>
            Transient named stream info, if there are responses which hasn't been fully processed yet.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.TypeResolver">
            <summary>
            Class which contains all the logic for resolving the type from the wire name.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeResolver.edmTypeNameMap">
            <summary>
            Dictionary instance to map the edm type name to the client type annotation.
            In V1/V2, we never used to cache this and call this during materialization. Hence 2 different contexts can resolve the same wire type
            differently and that would have been fine. Also, someone could have written a logic that might differ based on queries within the same context.
            For e.g. before executing a projection query, the user can set a flag so that the resolver behaves differently.
            Hence caching this locally for every request to simulate that behavior.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeResolver.resolveTypeFromName">
            <summary>The callback for resolving client CLR types.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeResolver.resolveNameFromType">
            <summary>The callback for resolving server type names.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeResolver.clientEdmModel">
            <summary>The client model.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeResolver.serviceModel">
            <summary>The service model, or null if one has not been provided.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.TypeResolver.skipTypeAssignabilityCheck">
            <summary>Indicates whether or not to skip the type assignability check.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.#ctor(Microsoft.OData.Client.ClientEdmModel,System.Func{System.String,System.Type},System.Func{System.Type,System.String},Microsoft.OData.Edm.IEdmModel)">
            <summary>
            Creates an instance of TypeResolver class.
            </summary>
            <param name="model">The client model.</param>
            <param name="resolveTypeFromName">The callback to resolve client CLR types.</param>
            <param name="resolveNameFromType">The callback for resolving server type names.</param>
            <param name="serviceModel">The service model.</param>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.IsProjectionRequest">
            <summary>
            In V2, in projection path, we do not use to check for assignability between the expected type
            and the type returned by the type resolver. This variable is used to track that scenario.
            If this is true, the current request is a projection request otherwise not.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.ResolveTypeForMaterialization(System.Type,System.String)">
            <summary>
            Resolves the client type that should be used for materialization.
            </summary>
            <param name="expectedType">Expected client clr type based on the API called.</param>
            <param name="readerTypeName">
            The name surfaced by the ODataLib reader. 
            If we have a server model, this will be a server type name that needs to be resolved. 
            If not, then this will already be a client type name.</param>
            <returns>The resolved annotation for the client type to materialize into.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.ResolveWireTypeName(Microsoft.OData.Edm.IEdmType,System.String)">
            <summary>
            ODL callback for client type resolution
            </summary>
            <param name="expectedEdmType">The expected type for the given wire name</param>
            <param name="wireName">The name of the type from the payload</param>
            <returns>An IEdmType</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.ResolveServiceEntityTypeFullName(System.Type)">
            <summary>
            Resolves the expected EDM type full name to give to the ODataLib reader based on a client CLR type.
            </summary>
            <param name="clientClrType">The client side CLR type.</param>
            <returns>The resolved EDM type full name to provide to ODataLib.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.ResolveExpectedTypeForReading(System.Type)">
            <summary>
            Resolves the expected EDM type to give to the ODataLib reader based on a client CLR type.
            </summary>
            <param name="clientClrType">The client side CLR type.</param>
            <returns>The resolved EDM type to provide to ODataLib.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.ShouldWriteClientTypeForOpenServerProperty(Microsoft.OData.Edm.IEdmProperty,System.String)">
            <summary>
            Determines whether or not the client type should be written for a property that is not defined on the server.
            DEVNOTE: If there is no server model, the declaring type is complex, or the server type cannot be
            found then the server type will be assumed to match the client type.
            This is done this way to prevent getting this wrong if the server property is defined, but we cannot find it for some reason.
            So if the types do not match, or we aren't able to align them, we will not write the type name, allowing the server to interpret it as the correct type.
            </summary>
            <param name="clientProperty">The client-side property.</param>
            <param name="serverTypeName">The server type name of the current entity.</param>
            <returns>True if the client property type should be written because the property definitely not defined on the server type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.TryResolveEntitySetBaseTypeName(System.String,System.String@)">
            <summary>
            Tries to resolve the name of the base type of the given entity set if a server model has been provided.
            </summary>
            <param name="entitySetName">The name of the entity set.</param>
            <param name="serverTypeName">The server type name if one could be found.</param>
            <returns>Whether the type name could be found.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.TryResolveNavigationTargetTypeName(System.String,System.String,System.String@)">
            <summary>
            Tries to resolve the name of a navigation property's target if a server model has been provided.
            </summary>
            <param name="serverSourceTypeName">The name of the server side source type.</param>
            <param name="navigationPropertyName">The name of the navigation property.</param>
            <param name="serverTypeName">The server type name if one could be found.</param>
            <returns>Whether the type name could be found.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.TryToResolveServerType(Microsoft.OData.Client.Metadata.ClientTypeAnnotation,Microsoft.OData.Edm.IEdmStructuredType@)">
            <summary>
            Tries to resolve the server type corresponding to the client type.
            </summary>
            <param name="clientTypeAnnotation">The client type annotation.</param>
            <param name="serverType">The server type, if the server type could be resolved.</param>
            <returns>Whether or not the server type could be resolved.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.TypeResolver.ResolveTypeFromName(System.String,System.Type)">
            <summary>
            User hook to resolve name into a type.
            </summary>
            <param name="wireName">Name to resolve.</param>
            <param name="expectedType">Expected type for the name.</param>
            <returns>the type as returned by the resolver. If no resolver is registered or resolver returns null, expected type is returned.</returns>
            <exception cref="T:System.InvalidOperationException">if ResolveType function returns a type not assignable to the userType</exception>
        </member>
        <member name="P:Microsoft.OData.Client.TypeResolver.ReaderModel">
            <summary>
            Gets the reader model.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.UriResolver">
            <summary>
            This immutable class is responsible for knowing how to correctly resolve base uri requests
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriResolver.baseUri">
            <summary>The baseUri provided by the user. can be null.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriResolver.resolveEntitySet">
            <summary>The function provided by the user to resolve the baseUri of entity sets. can be null</summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriResolver.baseUriWithSlash">
            <summary>base uri with guranteed trailing slash</summary>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.#ctor(System.Uri,System.Func{System.String,System.Uri})">
            <summary>
            Ctor for BaseUriResolver
            </summary>
            <param name="baseUri">The baseUri provided by the user.</param>
            <param name="resolveEntitySet">The function provider by the user to resolve the baseUri of the entity sets.</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.CreateFromBaseUri(System.Uri,System.String)">
            <summary>
            Creates a UriResolver from a baseUri
            </summary>
            <param name="baseUri">The baseUri to use in the UriResolver</param>
            <param name="parameterName">The name of the paramter that the user passed the baseUri in from.</param>
            <returns>The new UriResolver using the passed in baseUri</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.CloneWithOverrideValue(System.Uri,System.String)">
            <summary>
            Creates a new BaseUriResolver with all the same values except a new BaseUri value
            </summary>
            <param name="overrideBaseUriValue">The new BaseUri value</param>
            <param name="parameterName">The name of the paramter that the user passed the baseUri in from.</param>
            <returns>A new BaseUriResolver with the BaseUri property set to the new value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.CloneWithOverrideValue(System.Func{System.String,System.Uri})">
            <summary>
            Creates a new BaseUriResolver with all the same values except a new ResolveEntitySet value
            </summary>
            <param name="overrideResolveEntitySetValue">The new BaseUri value</param>
            <returns>A new BaseUriResolver with the ResolveEntitySet property set to the new value.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.GetEntitySetUri(System.String)">
            <summary>base uri with no trailing slash</summary>
            <param name="entitySetName">the name of the entitSet whose Uri will be retrieved.</param>
            <returns>the baseUri ended with a slash for the entitySetName passed in.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.GetBaseUriWithSlash">
            <summary>
            returns the BaseUri property followed by a slash.
            
            if the BaseUri property is null, an InvalidOperationException is thrown
            </summary>
            <returns>The BaseUri property with a slash.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.GetOrCreateAbsoluteUri(System.Uri)">
            <summary>
            If necessary will create an absolute uri by combining the BaseUri and requestUri
            </summary>
            <param name="requestUri">The uri specified by the user</param>
            <returns>An absolute Uri based on the requestUri and if nessesary the BaseUri</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.ConvertToAbsoluteAndValidateBaseUri(System.Uri@,System.String)">
            <summary>
            Converts the baseUri passed in to an absolute Uri and then validates that it is 
            usable by the system.
            </summary>
            <param name="baseUri">The user provided baseUri value.</param>
            <param name="parameterName">The name of the paramter that the user passed the baseUri in from.</param>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.IsValidBaseUri(System.Uri)">
            <summary>
            Validates that the passed in BaseUri
            </summary>
            <param name="baseUri">the baseUri that needs to be validated</param>
            <returns>True if the baseUri is valid, otherwise false</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.ConvertToAbsoluteUri(System.Uri)">
            <summary>
            Updates a relative silverlight uri to an absolute uri
            </summary>
            <param name="baseUri">the uri passed by the client</param>
            <returns>the updated absolute uri</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.ForceNonSlashTerminatedUri(System.Uri)">
            <summary>
            Returns a Uri that is not slash terminated
            
            Will be the passed in one if it is slash termination free, or a new one
            if the passed in one is slash terminated.
            </summary>
            <param name="uri">The Uri to be un slash terminated</param>
            <returns>A slash termination free version of the passed in Uri.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.ForceSlashTerminatedUri(System.Uri)">
            <summary>
            Returns a slash terminated Uri.  
            
            Will be the passed in one if it is already slash terminated, or a new one
            if the passed in one is not slash terminated.
            </summary>
            <param name="uri">The Uri to be slash terminated</param>
            <returns>A slash terminated version of the passed in Uri.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.GetBaseUriWithSlash(System.Func{System.String})">
            <summary>
            returns the BaseUri property followed by a slash.
            
            if the BaseUri property is null, an InvalidOperationException is thrown
            </summary>
            <param name="getErrorMessage">
            Returns the error message to use if the BaseUri is not available. Using a function so we only have to 
            look up the resource if an error is actually thrown;
            </param>
            <returns>The BaseUri property with a slash.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriResolver.GetEntitySetUriFromResolver(System.String)">
            <summary>
            Gets a Uri from the ResolveEntitySet property if available
            </summary>
            <param name="entitySetName">The name of the entity set to resolve to a URI</param>
            <returns>An absolute URI for the entitySet or null</returns>
        </member>
        <member name="P:Microsoft.OData.Client.UriResolver.ResolveEntitySet">
            <summary>Gets the ResolveEntitySet value.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.UriResolver.RawBaseUriValue">
            <summary>
            This property returns the baseUri value with no validation at all
            
            NOTE: this property should only be used to show the user what the BaseUri value is, all
                  other access should go through the GetBaseUriWithSlash() method
            </summary>
            <value> the baseUri value </value>
        </member>
        <member name="P:Microsoft.OData.Client.UriResolver.BaseUriOrNull">
            <summary>
            Gets the base URI of the resolver regardless of whether or not it is null.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.UriUtil">
            <summary>
            static utility functions for uris
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.UriUtil.ForwardSlash">
            <summary>forward slash char array for triming uris</summary>
        </member>
        <member name="M:Microsoft.OData.Client.UriUtil.UriToString(System.Uri)">
            <summary>
            Turn Uri instance into string representation
            This is needed because Uri.ToString unescapes the string
            </summary>
            <param name="uri">The uri instance</param>
            <returns>The string representation of the uri</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriUtil.CreateUri(System.String,System.UriKind)">
            <summary>new Uri(string uriString, UriKind uriKind)</summary>
            <param name="value">value</param>
            <param name="kind">kind</param>
            <returns>new Uri(value, kind)</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriUtil.CreateUri(System.Uri,System.Uri)">
            <summary>new Uri(Uri baseUri, Uri requestUri)</summary>
            <param name="baseUri">baseUri</param>
            <param name="requestUri">relativeUri</param>
            <returns>new Uri(baseUri, requestUri)</returns>
        </member>
        <member name="M:Microsoft.OData.Client.UriUtil.AppendBaseUriAndRelativeUri(System.Uri,System.Uri)">
            <summary>
            Appends the absolute baseUri with the relativeUri to create a new absolute uri
            </summary>
            <param name="baseUri">An absolute Uri</param>
            <param name="relativeUri">A relative Uri</param>
            <returns>An absolute Uri that is the combination of the base and relative Uris passed in.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceUrlConventions">
            <summary>
            Component for controlling what convention set is used for generating URLs.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceUrlConventions.DefaultInstance">
            <summary>Singleton instance of the default conventions.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceUrlConventions.KeyAsSegmentInstance">
            <summary>Singleton instance of the key-as-segment conventions.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceUrlConventions.keySerializer">
            <summary>The key serializer to use.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceUrlConventions.urlConvention">
            <summary>The url convention to use.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceUrlConventions.#ctor(Microsoft.OData.Client.UrlConvention)">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.OData.Client.DataServiceUrlConventions"/> class from being created.
            </summary>
            <param name="urlConvention">The url convention to use.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceUrlConventions.AppendKeyExpression(Microsoft.OData.Edm.Values.IEdmStructuredValue,System.Text.StringBuilder)">
            <summary>
            Appends the key expression for the given entity to the given <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="entity">The entity to build the key expression from.</param>
            <param name="builder">The builder to append onto.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceUrlConventions.AppendKeyExpression``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.String},System.Func{``0,System.Object},System.Text.StringBuilder)">
            <summary>
            Appends the key expression for the given entity to the given <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <typeparam name="T">The type of the properties.</typeparam>
            <param name="keyProperties">The properties of the key.</param>
            <param name="getPropertyName">Delegate to get the name of a property.</param>
            <param name="getValueForProperty">Delegate to get the value of a property.</param>
            <param name="builder">The builder to append onto.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceUrlConventions.AddRequiredHeaders(Microsoft.OData.Client.HeaderCollection)">
            <summary>
            Adds the required headers for the url convention.
            </summary>
            <param name="requestHeaders">The request headers to add to.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceUrlConventions.GetPropertyValue(Microsoft.OData.Edm.Values.IEdmPropertyValue,Microsoft.OData.Edm.IEdmTypeReference)">
            <summary>
            Gets the raw CLR value for the given <see cref="T:Microsoft.OData.Edm.Values.IEdmPropertyValue"/>.
            </summary>
            <param name="property">The property to get the value for.</param>
            <param name="type">The type which declared the property.</param>
            <returns>The raw CLR value of the property.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceUrlConventions.Default">
            <summary>
            An instance of <see cref="T:Microsoft.OData.Client.DataServiceUrlConventions"/> which uses default URL conventions. Specifically, this instance will produce keys that use parentheses like "Customers('ALFKI')".
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceUrlConventions.KeyAsSegment">
            <summary>
            An instance of <see cref="T:Microsoft.OData.Client.DataServiceUrlConventions"/> which uses key-as-segment URL conventions. Specifically, this instance will produce keys that use segments like "Customers/ALFKI".
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Util">
            <summary>
            static utility function
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Util.CodeGeneratorToolName">
            <summary>Tool name for the GeneratedCode attribute used by Astoria CodeGen</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Util.LoadPropertyMethodName">
            <summary>Method name for the LoadProperty method.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Util.ExecuteMethodName">
            <summary>Method name for the Execute method.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Util.ExecuteMethodNameForVoidResults">
            <summary>Method name for the Async Execute method overload which expects void result.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Util.SaveChangesMethodName">
            <summary>Method name for the SaveChanges method.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Util.ODataVersionFieldCount">
            <summary>
            The number of components of version.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Util.ODataVersionEmpty">
            <summary>
            Empty OData Version - represents a blank OData-Version header
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Util.ODataVersion4">
            <summary>
            OData Version 4
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Util.SupportedResponseVersions">
            <summary>
            Data service versions supported on the client
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Util.whitespaceForTracing">
            <summary>
            static char[] for indenting whitespace when tracing xml
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Util.GetVersionFromMaxProtocolVersion(Microsoft.OData.Client.ODataProtocolVersion)">
            <summary>
            Converts the ODataProtocolVersion to a Version instance.
            </summary>
            <param name="maxProtocolVersion">The max protocol version value.</param>
            <returns>The same version expressed as Version instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.DebugInjectFault(System.String)">
            <summary>
            DebugInjectFault is a test hook to inject faults in specific locations. The string is the ID for the location
            </summary>
            <param name="state">The injector state parameter</param>
        </member>
        <member name="M:Microsoft.OData.Client.Util.CheckArgumentNull``1(``0,System.String)">
            <summary>
            Checks the argument value for null and throw ArgumentNullException if it is null
            </summary>
            <typeparam name="T">type of the argument to prevent accidental boxing of value types</typeparam>
            <param name="value">argument whose value needs to be checked</param>
            <param name="parameterName">name of the argument</param>
            <exception cref="T:System.ArgumentNullException">if value is null</exception>
            <returns>value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.CheckArgumentNullAndEmpty(System.String,System.String)">
            <summary>
            Checks the string value is not empty
            </summary>
            <param name="value">value to check </param>
            <param name="parameterName">parameterName of public function</param>
            <exception cref="T:System.ArgumentNullException">if value is null</exception>
            <exception cref="T:System.ArgumentException">if value is empty</exception>
        </member>
        <member name="M:Microsoft.OData.Client.Util.CheckArgumentNotEmpty(System.String,System.String)">
            <summary>
            Checks the string value is not empty, but allows it to be null
            </summary>
            <param name="value">value to check</param>
            <param name="parameterName">parameterName of public function</param>
            <exception cref="T:System.ArgumentException">if value is empty</exception>
        </member>
        <member name="M:Microsoft.OData.Client.Util.CheckArgumentNotEmpty``1(``0[],System.String)">
            <summary>
            Checks the array value is not empty
            </summary>
            <typeparam name="T">type of the argument to prevent accidental boxing of value types</typeparam>
            <param name="value">value to check </param>
            <param name="parameterName">parameterName of public function</param>
            <exception cref="T:System.ArgumentNullException">if value is null</exception>
            <exception cref="T:System.ArgumentException">if value is empty or contains null elements</exception>
        </member>
        <member name="M:Microsoft.OData.Client.Util.CheckEnumerationValue(Microsoft.OData.Client.EntityParameterSendOption,System.String)">
            <summary>
            Validate EntityParameterSendOption
            </summary>
            <param name="value">option to validate</param>
            <param name="parameterName">name of the parameter being validated</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if option is not valid</exception>
            <returns>option</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.CheckEnumerationValue(Microsoft.OData.Client.MergeOption,System.String)">
            <summary>
            Validate MergeOption
            </summary>
            <param name="value">option to validate</param>
            <param name="parameterName">name of the parameter being validated</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if option is not valid</exception>
            <returns>option</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.CheckEnumerationValue(Microsoft.OData.Client.ODataProtocolVersion,System.String)">
            <summary>
            Validate MaxProtocolVersion
            </summary>
            <param name="value">version to validate</param>
            <param name="parameterName">name of the parameter being validated</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if version is not valid</exception>
            <returns>version</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.CheckEnumerationValue(Microsoft.OData.Client.HttpStack,System.String)">
            <summary>
            Validate HttpStack
            </summary>
            <param name="value">option to validate</param>
            <param name="parameterName">name of the parameter being validated</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if option is not valid</exception>
            <returns>option</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.GetWhitespaceForTracing(System.Int32)">
            <summary>
            get char[] for indenting whitespace when tracing xml
            </summary>
            <param name="depth">how many characters to trace</param>
            <returns>char[]</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.Dispose``1(``0@)">
            <summary>dispose of the object and set the reference to null</summary>
            <typeparam name="T">type that implements IDisposable</typeparam>
            <param name="disposable">object to dispose</param>
        </member>
        <member name="M:Microsoft.OData.Client.Util.Dispose``1(``0)">
            <summary>dispose of the object</summary>
            <typeparam name="T">type that implements IDisposable</typeparam>
            <param name="disposable">object to dispose</param>
        </member>
        <member name="M:Microsoft.OData.Client.Util.IsKnownClientExcption(System.Exception)">
            <summary>
            Checks whether the exception type is one of the DataService*Exception
            </summary>
            <param name="ex">exception to test</param>
            <returns>true if the exception type is one of the DataService*Exception</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.NullCheck``1(``0,Microsoft.OData.Client.InternalError)">
            <summary>validate value is non-null</summary>
            <typeparam name="T">type of value</typeparam>
            <param name="value">value</param>
            <param name="errorcode">error code to throw if null</param>
            <returns>the non-null value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.DoesNullAttributeSayTrue(System.Xml.XmlReader)">
            <summary>
            check the atom:null="true" attribute
            </summary>
            <param name="reader">XmlReader</param>
            <returns>true of null is true</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.SetNextLinkForCollection(System.Object,Microsoft.OData.Client.DataServiceQueryContinuation)">
            <summary>Set the continuation for the following results for a collection.</summary>
            <param name="collection">The collection to set the links to</param>
            <param name="continuation">The continuation for the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Util.IsNullableType(System.Type)">
            <summary>
            Determines if the current type is nullable or not
            </summary>
            <param name="t">The type parameter.</param>
            <returns>true if its nullable false otherwise</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.ActivatorCreateInstance(System.Type,System.Object[])">
            <summary>
            Similar to Activator.CreateInstance, but uses LCG to avoid 
            more stringent Reflection security constraints.in Silverlight
            </summary>
            <param name="type">Type to create.</param>
            <param name="arguments">Arguments.</param>
            <returns>The newly instantiated object.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.ConstructorInvoke(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Similar to ConstructorInfo.Invoke, but uses LCG to avoid 
            more stringent Reflection security constraints in Silverlight
            </summary>
            <param name="constructor">Constructor to invoke.</param>
            <param name="arguments">Arguments.</param>
            <returns>The newly instantiated object.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.IsFlagSet(Microsoft.OData.Client.SaveChangesOptions,Microsoft.OData.Client.SaveChangesOptions)">
            <summary>
            checks whether the given flag is set on the options
            </summary>
            <param name="options">options as specified by the user.</param>
            <param name="flag">whether the given flag is set on the options</param>
            <returns>true if the given flag is set, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.IsBatch(Microsoft.OData.Client.SaveChangesOptions)">
            <summary>
            checks whether any batch flag is set on the options
            </summary>
            <param name="options">options as specified by the user.</param>
            <returns>true if the given flag is set, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.IsBatchWithSingleChangeset(Microsoft.OData.Client.SaveChangesOptions)">
            <summary>
            checks whether the batch flag is set on the options for the single changeset
            </summary>
            <param name="options">options as specified by the user.</param>
            <returns>true if the given flag is set, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.IsBatchWithIndependentOperations(Microsoft.OData.Client.SaveChangesOptions)">
            <summary>
            checks whether the batch flag with independent Operation per change set is set 
            </summary>
            <param name="options">options as specified by the user.</param>
            <returns>true if the given flag is set, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.IncludeLinkState(Microsoft.OData.Client.EntityStates)">
            <summary>modified or unchanged</summary>
            <param name="x">state to test</param>
            <returns>true if modified or unchanged</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.TraceElement(System.Xml.XmlReader,System.IO.TextWriter)">
            <summary>
            trace Element node
            </summary>
            <param name="reader">XmlReader</param>
            <param name="writer">TextWriter</param>
        </member>
        <member name="M:Microsoft.OData.Client.Util.TraceEndElement(System.Xml.XmlReader,System.IO.TextWriter,System.Boolean)">
            <summary>
            trace EndElement node
            </summary>
            <param name="reader">XmlReader</param>
            <param name="writer">TextWriter</param>
            <param name="indent">indent or not</param>
        </member>
        <member name="M:Microsoft.OData.Client.Util.TraceText(System.IO.TextWriter,System.String)">
            <summary>
            trace string value
            </summary>
            <param name="writer">TextWriter</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.OData.Client.Util.GetEnumerable``1(System.Collections.IEnumerable,System.Func{System.Object,``0})">
            <summary>
            Converts the given IEnumerable into IEnumerable<typeparamref name="T"/> 
            </summary>
            <typeparam name="T">Type parameter.</typeparam>
            <param name="enumerable">IEnumerable which contains the list of the objects that needs to be converted.</param>
            <param name="valueConverter">Delegate to use to convert the value.</param>
            <returns>An instance of IEnumerable<typeparamref name="T"/> which contains the converted values.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.ToVersion(Microsoft.OData.Client.ODataProtocolVersion)">
            <summary>Given a <see cref="T:Microsoft.OData.Client.ODataProtocolVersion"/> enumeration returns the <see cref="T:System.Version"/> instance with the same version number.</summary>
            <param name="protocolVersion">The protocol version enum value to convert.</param>
            <returns>The version instance with the version number for the specified protocol version.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Util.SerializeOperationParameters(Microsoft.OData.Client.DataServiceContext,Microsoft.OData.Client.UriOperationParameter[])">
            <summary>
            Serialize the operation parameters and put them in a dictionary.
            </summary>
            <param name="context">The context.</param>
            <param name="parameters">The parameters.</param>
            <returns>A dictionary where the key is the parameter name, and the value is the serialized parameter value.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Util.ValidatedNotNullAttribute">
            <summary>
            A workaround to a problem with FxCop which does not recognize the CheckArgumentNotNull method
            as the one which validates the argument is not null.
            </summary>
            <remarks>This has been suggested as a workaround in msdn forums by the VS team. Note that even though this is production code
            the attribute has no effect on anything else.</remarks>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceContext">
            <summary>
            The <see cref="T:Microsoft.OData.Client.DataServiceContext" /> represents the runtime context of the data service.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.ServiceRootParameterName">
            <summary>
            string constant for the 'serviceRoot' parameter to UriResolver
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.MaxProtocolVersionAsVersion">
            <summary>Same version as <see cref="F:Microsoft.OData.Client.DataServiceContext.maxProtocolVersion"/> but stored as instance of <see cref="T:System.Version"/> for easy comparisons.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.model">
            <summary>The client model for the current context instance.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.instanceAnnotations">
            <summary> Internal instance annotations in current context </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.metadataAnnotationsDictionary">
            <summary>metadata annotations for currenct context</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.formatTracker">
            <summary>The tracker for user-specified format information.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.maxProtocolVersion">
            <summary>The maximum protocol version the client should support (send and receive).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.entityTracker">
            <summary>
            Class which tracks all the entities and links for the given context
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.addAndUpdateResponsePreference">
            <summary>
            The response preference for add and update operations
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.baseUriResolver">
            <summary>The resolver for baseUris</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.credentials">
            <summary>Authentication interface for retrieving credentials for Web client authentication.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.resolveName">
            <summary>resolve type from a typename</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.resolveType">
            <summary>resolve typename from a type</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.timeout">
            <summary>time-out value in seconds, 0 for default</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.postTunneling">
            <summary>whether to use post-tunneling for PUT/DELETE</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.ignoreMissingProperties">
            <summary>Options when deserializing properties to the target type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.entityParameterSendOption">
            <summary>Used to specify a strategy to send entity parameter.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.mergeOption">
            <summary>Used to specify a value synchronization strategy.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.saveChangesDefaultOptions">
            <summary>Default options to be used while doing savechanges.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.ignoreResourceNotFoundException">
            <summary>Client will ignore 404 resource not found exception and return an empty set when this is set to true</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.urlConventions">
            <summary>The URL conventions to use.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.httpStack">
            <summary>The HTTP stack to use for requests.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.sendRequest">
            <summary>
            Test hook which gets called after the HttpWebRequest has been created and all headers have been set.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.getRequestWrappingStream">
            <summary>
            Test hook which gets called after we call HttpWebRequest.GetRequestStream, so that the test code can wrap the stream and see what gets written to it.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.sendResponse">
            <summary>
            Test hook which gets called after the HttpWebResponse is received.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.getResponseWrappingStream">
            <summary>
            Test hook which gets called after we call HttpWebRequest.GetResponseStream, so that the test code can wrap the stream and see what gets read from it.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.applyingChanges">
            <summary>
            A flag indicating if the data service context is applying changes 
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> class.</summary>
            <remarks>It is expected that the BaseUri or ResolveEntitySet properties will be set before using the newly created context.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.#ctor(System.Uri)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> class with the specified <paramref name="serviceRoot" />.</summary>
            <param name="serviceRoot">An absolute URI that identifies the root of a data service.</param>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="serviceRoot" /> is null.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="serviceRoot" /> is not an absolute URI -or-If the <paramref name="serviceRoot" /> is a well formed URI without a query or query fragment.</exception>
            <remarks>
            The library expects the Uri to point to the root of a data service,
            but does not issue a request to validate it does indeed identify the root of a service.
            If the Uri does not identify the root of the service, the behavior of the client library is undefined.    
            A Uri provided with a trailing slash is equivalent to one without such a trailing character.
            With Silverlight, the <paramref name="serviceRoot"/> can be a relative Uri
            that will be combined with System.Windows.Browser.HtmlPage.Document.DocumentUri.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.#ctor(System.Uri,Microsoft.OData.Client.ODataProtocolVersion)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> class with the specified <paramref name="serviceRoot" /> and targeting the specific <paramref name="maxProtocolVersion" />.</summary>
            <param name="serviceRoot">An absolute URI that identifies the root of a data service.</param>
            <param name="maxProtocolVersion">A <see cref="T:Microsoft.OData.Client.ODataProtocolVersion" /> value that is the maximum protocol version that the client understands.</param>
            <remarks>
            The library expects the Uri to point to the root of a data service,
            but does not issue a request to validate it does indeed identify the root of a service.
            If the Uri does not identify the root of the service, the behavior of the client library is undefined. 
            A Uri provided with a trailing slash is equivalent to one without such a trailing character.
            With Silverlight, the <paramref name="serviceRoot"/> can be a relative Uri
            that will be combined with System.Windows.Browser.HtmlPage.Document.DocumentUri.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.#ctor(System.Uri,Microsoft.OData.Client.ODataProtocolVersion,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Instantiates a new context with the specified <paramref name="serviceRoot"/> Uri.
            The library expects the Uri to point to the root of a data service,
            but does not issue a request to validate it does indeed identify the root of a service.
            If the Uri does not identify the root of the service, the behavior of the client library is undefined.    
            </summary>
            <param name="serviceRoot">
            An absolute, well formed http or https URI without a query or fragment which identifies the root of a data service.
            A Uri provided with a trailing slash is equivalent to one without such a trailing character
            </param>
            <param name="maxProtocolVersion">max protocol version that the client understands.</param>
            <param name="model">The client edm model to use. Provided for testability.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the <paramref name="maxProtocolVersion"/> is not a valid value.</exception>
            <remarks>
            With Silverlight, the <paramref name="serviceRoot"/> can be a relative Uri
            that will be combined with System.Windows.Browser.HtmlPage.Document.DocumentUri.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.TryGetAnnotation``1(System.Object,System.String,System.String,``0@)">
            <summary>
            Try to get instance annotations or metadata annotation associated with the specified object.
            </summary>
            <typeparam name="TResult">CLR type of the annotation</typeparam>
            <param name="source">The annotated object</param>
            <param name="term">The term name of an annotation</param>
            <param name="qualifier">Qualifier to apply</param>
            <param name="annotation">
            When this method returns, contains the annotation associated with the specified object and term, if the annotation is found;
            otherwise, the default value for the type of the annotation parameter.
            </param>
            <returns>true if the annotation is found</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.TryGetAnnotation``1(System.Object,System.String,``0@)">
            <summary>
            Try to get instance annotations or metadata annotation associated with the specified object.
            </summary>
            <typeparam name="TResult">CLR type of the annotation</typeparam>
            <param name="source">The annotated object</param>
            <param name="term">The term name of an annotation</param>
            <param name="annotation">
            When this method returns, contains the annotation associated with the specified object and term, if the annotation is found;
            otherwise, the default value for the type of the annotation parameter.
            </param>
            <returns>true if the annotation is found</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.TryGetAnnotation``2(System.Linq.Expressions.Expression{``0},System.String,System.String,``1@)">
            <summary>
            Try to get instance annotations or metadata annotation for property or navigation property.
            Or try to get metadata annotation for property, navigation property, entitySet, singleton, operation or operation import.
            </summary>
            <typeparam name="TFunc">Type of the action or function the expression represents</typeparam>
            <typeparam name="TResult">CLR Type of annotation</typeparam>
            <param name="expression">The closure expression to access following items:
                property
                navigation property
                entitySet
                singleton
                function
                action
                function import
                action import
            </param>
            <param name="term">The term name of the annotation</param>
            <param name="qualifier">Qualifier to apply</param>
            <param name="annotation">
            When this method returns, contains the annotation associated with the specified expression and term, if the annotation is found;
            otherwise, the default value for the type of the annotation parameter.
            </param>
            <returns>true if the annotation is found</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.TryGetAnnotation``2(System.Linq.Expressions.Expression{``0},System.String,``1@)">
            <summary>
            Try to get instance annotations or metadata annotation for property or navigation property.
            Or try to get metadata annotation for property, navigation property, entitySet, singleton, operation or operation import.
            </summary>
            <typeparam name="TFunc">Type of the action or function the expression represents</typeparam>
            <typeparam name="TResult">Type of annotation</typeparam>
            <param name="expression">The closure expression to access following items:
                property
                navigation property
                entitySet
                singleton
                function
                action
                function import
                action import
            </param>
            <param name="term">The term name of an annotation</param>
            <param name="annotation">
            When this method returns, contains the annotation associated with the specified expression and term, if the annotation is found;
            otherwise, the default value for the type of the annotation parameter.
            </param>
            <returns>true if the annotation is found</returns>
            
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetEntityDescriptor(System.Object)">
            <summary>Gets the <see cref="T:Microsoft.OData.Client.EntityDescriptor" /> for the supplied entity object.</summary>
            <returns>The <see cref="T:Microsoft.OData.Client.EntityDescriptor" /> instance for the <paramref name="entity" />, or null if an <see cref="T:Microsoft.OData.Client.EntityDescriptor" /> does not exist for the object.</returns>
            <param name="entity">The object for which to return the entity descriptor.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetLinkDescriptor(System.Object,System.String,System.Object)">
            <summary>Gets the <see cref="T:Microsoft.OData.Client.LinkDescriptor" /> for a specific link that defines the relationship between two entities.</summary>
            <returns>The <see cref="T:Microsoft.OData.Client.LinkDescriptor" /> instance for the specified relationship, or null if a <see cref="T:Microsoft.OData.Client.LinkDescriptor" /> does not exist for the relationship.</returns>
            <param name="source">Source object in the link</param>
            <param name="sourceProperty">The name of the navigation property on the <paramref name="source" /> object that returns the related object.</param>
            <param name="target">The related entity.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CancelRequest(System.IAsyncResult)">
            <summary>Attempts to cancel the operation that is associated with the supplied <see cref="T:System.IAsyncResult" /> object.</summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> object from the operation being canceled.</param>
            <remarks>DataServiceContext is not safe to use until asyncResult.IsCompleted is true.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CreateQuery``1(System.String)">
            <summary>Creates a data service query for data of a specified generic type.</summary>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> instance that represents a data service query.</returns>
            <param name="entitySetName">A string that resolves to a URI.</param>
            <typeparam name="T">The type returned by the query</typeparam>
            <remarks>create a query based on (BaseUri + relativeUri)</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CreateQuery``1(System.String,System.Boolean)">
            <summary>Creates a data service query for a function with return type in a specified generic type.</summary>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> instance that represents a data service query.</returns>
            <param name="resourcePath">A string ends with function invocation that resolves to a URI.</param>
            <param name="isComposable">Whether this function query is composable</param>
            <typeparam name="T">The type returned by the query</typeparam>
            <remarks>create a query based on (BaseUri + relativeUri)</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CreateFunctionQuery``1">
            <summary>Creates a data service query for a function invocation that returns a specified generic type.</summary>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> instance that represents a data service query.</returns>
            <typeparam name="T">The type returned by the query</typeparam>
            <remarks>create a query based on (BaseUri + relativeUri)</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CreateFunctionQuery``1(System.String,System.String,System.Boolean,Microsoft.OData.Client.UriOperationParameter[])">
            <summary>Creates a data service query for function which return collection of data.</summary>
            <typeparam name="T">The type returned by the query</typeparam>
            <param name="path">The path before the function.</param>
            <param name="functionName">The function name.</param>
            <param name="isComposable">Whether this query is composable.</param>
            <param name="parameters">The function parameters.</param>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> instance that represents the function call.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CreateFunctionQuerySingle``1(System.String,System.String,System.Boolean,Microsoft.OData.Client.UriOperationParameter[])">
            <summary>Creates a data service single query for function which return single data.</summary>
            <typeparam name="T">The type returned by the query</typeparam>
            <param name="path">The path before the function.</param>
            <param name="functionName">The function name.</param>
            <param name="isComposable">Whether this query is composable.</param>
            <param name="parameters">The function parameters.</param>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuerySingle`1" /> instance that represents the function call.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CreateSingletonQuery``1(System.String)">
            <summary>Creates a data service query for singleton data of a specified generic type.</summary>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> instance that represents a data service query.</returns>
            <param name="singletonName">A string that resolves to a URI.</param>
            <typeparam name="T">The type returned by the query</typeparam>
            <remarks>create a query based on (BaseUri + relativeUri)</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetMetadataUri">
            <summary>Gets a URI of the location of .edmx metadata.</summary>
            <returns>A URI that identifies the location of the metadata description, in .edmx format, for the data service identified by the base URI that is passed to the constructor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.AsyncCallback,System.Object)">
            <summary>Asynchronously loads the value of the specified property from the data service.</summary>
            <returns>An IAsyncResult that represents the status of the asynchronous operation.</returns>
            <param name="entity">The entity that contains the property to load.</param>
            <param name="propertyName">The name of the property on the specified entity to load.</param>
            <param name="callback">The delegate called when a response to the request is received.</param>
            <param name="state">The user-defined state object that is used to pass context data to the callback method.</param>
            <remarks>actually doesn't modify the property until EndLoadProperty is called.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.LoadPropertyAsync(System.Object,System.String)">
            <summary>Asynchronously loads the value of the specified property from the data service.</summary>
            <returns>A task that represents the response to the load operation.</returns>
            <param name="entity">The entity that contains the property to load.</param>
            <param name="propertyName">The name of the property on the specified entity to load.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.Uri,System.AsyncCallback,System.Object)">
            <summary>Asynchronously loads a page of related entities from the data service by using the supplied next link URI.</summary>
            <returns>An <see cref="T:System.IAsyncResult" /> object that is used to track the status of the asynchronous operation. </returns>
            <param name="entity">The entity that contains the property to load.</param>
            <param name="propertyName">The name of the property of the specified entity to load.</param>
            <param name="nextLinkUri">The URI used to load the next results page.</param>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.LoadPropertyAsync(System.Object,System.String,System.Uri)">
            <summary>Asynchronously loads a page of related entities from the data service by using the supplied next link URI.</summary>
            <returns>A task that represents the response to the load operation.</returns>
            <param name="entity">The entity that contains the property to load.</param>
            <param name="propertyName">The name of the property on the specified entity to load.</param>
            <param name="nextLinkUri">The URI used to load the next results page.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,Microsoft.OData.Client.DataServiceQueryContinuation,System.AsyncCallback,System.Object)">
            <summary>Asynchronously loads the next page of related entities from the data service by using the supplied query continuation object.</summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that represents the status of the operation.</returns>
            <param name="entity">The entity that contains the property to load.</param>
            <param name="propertyName">The name of the property of the specified entity to load.</param>
            <param name="continuation">A <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation`1" /> object that represents the next page of related entity data to return from the data service.</param>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.LoadPropertyAsync(System.Object,System.String,Microsoft.OData.Client.DataServiceQueryContinuation)">
            <summary>Asynchronously loads the next page of related entities from the data service by using the supplied query continuation object.</summary>
            <returns>A Task that represents the response to the load operation.</returns>
            <param name="entity">The entity that contains the property to load.</param>
            <param name="propertyName">The name of the property on the specified entity to load.</param>
            <param name="continuation">A <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation`1" /> object that represents the next page of related entity data to return from the data service.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.EndLoadProperty(System.IAsyncResult)">
            <summary>Called to complete the <see cref="M:Microsoft.OData.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.AsyncCallback,System.Object)" /> operation.</summary>
            <returns>The response to the load operation.</returns>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.LoadProperty(System.Object,System.String)">
             <summary>Loads deferred content for a specified property from the data service.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
             <returns>The response to the load operation.</returns>
             <param name="entity">The entity that contains the property to load.</param>
             <param name="propertyName">The name of the property of the specified entity to load.</param>
             <remarks>
             If <paramref name="entity"/> is in in detached or added state, this method will throw an InvalidOperationException
             since there is nothing it can load from the server.
            
             If <paramref name="entity"/> is in unchanged or modified state, this method will load its collection or
             reference elements as unchanged with unchanged bindings.
            
             If <paramref name="entity"/> is in deleted state, this method will load the entities linked to by its collection or
             reference property in the unchanged state with bindings in the deleted state.
             </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.LoadProperty(System.Object,System.String,System.Uri)">
             <summary>Loads a page of related entities by using the supplied next link URI.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
             <returns>An instance of <see cref="T:Microsoft.OData.Client.QueryOperationResponse`1" /> that contains the results of the request.</returns>
             <param name="entity">The entity that contains the property to load.</param>
             <param name="propertyName">The name of the property of the specified entity to load.</param>
             <param name="nextLinkUri">The URI that is used to load the next results page.</param>
             <exception cref="T:System.InvalidOperationException">When <paramref name="entity" /> is in a <see cref="F:Microsoft.OData.Client.EntityStates.Detached" /> or <see cref="F:Microsoft.OData.Client.EntityStates.Added" /> state.</exception>
             <remarks>
             If <paramref name="entity"/> is in in detached or added state, this method will throw an InvalidOperationException
             since there is nothing it can load from the server.
            
             If <paramref name="entity"/> is in unchanged or modified state, this method will load its collection or
             reference elements as unchanged with unchanged bindings.
            
             If <paramref name="entity"/> is in deleted state, this method will load the entities linked to by its collection or
             reference property in the unchanged state with bindings in the deleted state.
             </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.LoadProperty(System.Object,System.String,Microsoft.OData.Client.DataServiceQueryContinuation)">
             <summary>Loads the next page of related entities from the data service by using the supplied query continuation object.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
             <returns>The response that contains the next page of related entity data.</returns>
             <param name="entity">The entity that contains the property to load.</param>
             <param name="propertyName">The name of the property of the specified entity to load.</param>
             <param name="continuation">A <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation`1" /> object that represents the next page of related entities to load from the data service.</param>
             <exception cref="T:System.InvalidOperationException">When <paramref name="entity" /> is in the <see cref="F:Microsoft.OData.Client.EntityStates.Detached" /> or <see cref="F:Microsoft.OData.Client.EntityStates.Added" /> state.</exception>
             <remarks>
             If <paramref name="entity"/> is in in detached or added state, this method will throw an InvalidOperationException
             since there is nothing it can load from the server.
            
             If <paramref name="entity"/> is in unchanged or modified state, this method will load its collection or
             reference elements as unchanged with unchanged bindings.
            
             If <paramref name="entity"/> is in deleted state, this method will load the entities linked to by its collection or
             reference property in the unchanged state with bindings in the deleted state.
             </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.LoadProperty``1(System.Object,System.String,Microsoft.OData.Client.DataServiceQueryContinuation{``0})">
             <summary>Loads the next page of related entities from the data service by using the supplied generic query continuation object.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
             <returns>The response that contains the next page of related entity data.</returns>
             <param name="entity">The entity that contains the property to load.</param>
             <param name="propertyName">The name of the property of the specified entity to load.</param>
             <param name="continuation">A <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation`1" /> object that represents the next page of related entities to load from the data service.</param>
             <typeparam name="T">Element type of collection to load.</typeparam>
             <exception cref="T:System.InvalidOperationException">When <paramref name="entity" /> is in the <see cref="F:Microsoft.OData.Client.EntityStates.Detached" /> or <see cref="F:Microsoft.OData.Client.EntityStates.Added" /> state.</exception>
             <remarks>
             If <paramref name="entity"/> is in in detached or added state, this method will throw an InvalidOperationException
             since there is nothing it can load from the server.
            
             If <paramref name="entity"/> is in unchanged or modified state, this method will load its collection or
             reference elements as unchanged with unchanged bindings.
            
             If <paramref name="entity"/> is in deleted state, this method will load the entities linked to by its collection or
             reference property in the unchanged state with bindings in the deleted state.
             </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetReadStreamUri(System.Object)">
            <summary>Gets the URI that is used to return a binary data stream.</summary>
            <returns>The read URI of the binary data stream.</returns>
            <param name="entity">The entity that has a related binary stream to retrieve. </param>
            <exception cref="T:System.ArgumentNullException">If the entity specified is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</exception>
            <remarks>If the specified entity is a Media Link Entry, this method will return an URI which can be used to access the content of the Media Resource. This URI should only be used to GET/Read the content of the MR. It may not respond to POST/PUT/DELETE requests.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetReadStreamUri(System.Object,System.String)">
            <summary>Gets the URI that is used to return a named binary data stream.</summary>
            <returns>The read URI of the binary data stream.</returns>
            <param name="entity">The entity that has the named binary data stream to retrieve.</param>
            <param name="name">The name of the stream to request.</param>
            <remarks>If the specified entity has a stream with the given name, this method will return an URI which can be used to access the content of the stream. This URI should only be used to GET/Read the content of the stream. It may not respond to POST/PUT/DELETE requests.</remarks>
            <exception cref="T:System.ArgumentNullException">If the entity specified is null.</exception>
            <exception cref="T:System.ArgumentException">If the name parameter is empty or the entity specified is not being tracked.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginGetReadStream(System.Object,Microsoft.OData.Client.DataServiceRequestArgs,System.AsyncCallback,System.Object)">
            <summary>Asynchronously gets the binary data stream that belongs to the specified entity, by using the specified message headers.</summary>
            <returns>An <see cref="T:System.IAsyncResult" /> object that is used to track the status of the asynchronous operation. </returns>
            <param name="entity">The entity that has a the binary data stream to retrieve. </param>
            <param name="args">Instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestArgs" /> class that contains settings for the HTTP request message.</param>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
            <exception cref="T:System.ArgumentNullException">Any of the parameters supplied to the method is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:Microsoft.OData.Client.DataServiceContext" />.-or-The <paramref name="entity" /> is in the <see cref="F:Microsoft.OData.Client.EntityStates.Added" /> state.-or-The <paramref name="entity" /> is not a Media Link Entry and does not have a related binary data stream.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetReadStreamAsync(System.Object,Microsoft.OData.Client.DataServiceRequestArgs)">
            <summary>Asynchronously gets the binary data stream that belongs to the specified entity, by using the specified message headers.</summary>
            <returns>A Task that represents an instance of <see cref="T:Microsoft.OData.Client.DataServiceStreamResponse" /> which contains the response stream along with its metadata.</returns>
            <param name="entity">The entity that has a the binary data stream to retrieve. </param>
            <param name="args">Instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestArgs" /> class that contains settings for the HTTP request message.</param>
            <exception cref="T:System.ArgumentNullException">Any of the parameters supplied to the method is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:Microsoft.OData.Client.DataServiceContext" />.-or-The <paramref name="entity" /> is in the <see cref="F:Microsoft.OData.Client.EntityStates.Added" /> state.-or-The <paramref name="entity" /> is not a Media Link Entry and does not have a related binary data stream.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginGetReadStream(System.Object,System.String,Microsoft.OData.Client.DataServiceRequestArgs,System.AsyncCallback,System.Object)">
            <summary>Asynchronously gets a named binary data stream that belongs to the specified entity, by using the specified message headers.</summary>
            <returns>An <see cref="T:System.IAsyncResult" /> object that is used to track the status of the asynchronous operation. </returns>
            <param name="entity">The entity that has the binary data stream to retrieve.</param>
            <param name="name">The name of the binary stream to request.</param>
            <param name="args">Instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestArgs" /> class that contains settings for the HTTP request message.</param>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetReadStreamAsync(System.Object,System.String,Microsoft.OData.Client.DataServiceRequestArgs)">
            <summary>Asynchronously gets the binary data stream that belongs to the specified entity, by using the specified message headers.</summary>
            <returns>A task that represents an instance of <see cref="T:Microsoft.OData.Client.DataServiceStreamResponse" /> which contains the response stream along with its metadata.</returns>
            <param name="entity">The entity that has a the binary data stream to retrieve. </param>
            <param name="name">The name of the binary stream to request.</param>
            <param name="args">Instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestArgs" /> class that contains settings for the HTTP request message.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.EndGetReadStream(System.IAsyncResult)">
            <summary>Called to complete the asynchronous operation of retrieving a binary data stream.</summary>
            <returns>An instance of <see cref="T:Microsoft.OData.Client.DataServiceStreamResponse" /> which contains the response stream along with its metadata.</returns>
            <param name="asyncResult">The result from the <see cref="M:Microsoft.OData.Client.DataServiceContext.BeginGetReadStream(System.Object,Microsoft.OData.Client.DataServiceRequestArgs,System.AsyncCallback,System.Object)" /> operation that contains the binary data stream.</param>
            <remarks>The method will block if the request have not finished yet.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetReadStream(System.Object)">
            <summary>Gets the binary data stream that belongs to the specified entity.</summary>
            <returns>An instance of <see cref="T:Microsoft.OData.Client.DataServiceStreamResponse" /> that represents the response.</returns>
            <param name="entity">The entity that has the binary stream to retrieve. </param>
            <exception cref="T:System.ArgumentNullException">The<paramref name=" entity" /> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:Microsoft.OData.Client.DataServiceContext" />.-or-The <paramref name="entity" /> is in the <see cref="F:Microsoft.OData.Client.EntityStates.Added" /> state.-or-The <paramref name="entity" /> is not a Media Link Entry and does not have a related binary stream.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetReadStream(System.Object,System.String)">
            <summary>Gets the binary data stream that belongs to the specified entity, by using the specified Content-Type message header.</summary>
            <returns>An instance of <see cref="T:Microsoft.OData.Client.DataServiceStreamResponse" /> that represents the response.</returns>
            <param name="entity">The entity that has the binary data stream to retrieve. </param>
            <param name="acceptContentType">The Content-Type of the binary data stream requested from the data service, specified in the Accept header.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="entity" /> is null.-or- <paramref name="acceptContentType" /> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:Microsoft.OData.Client.DataServiceContext" />.-or-The <paramref name="entity" /> is in the <see cref="F:Microsoft.OData.Client.EntityStates.Added" /> state.-or-The <paramref name="entity" /> is not a Media Link Entry and does not have a related stream.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetReadStream(System.Object,Microsoft.OData.Client.DataServiceRequestArgs)">
            <summary>Gets binary data stream for the specified entity by using the specified message headers.</summary>
            <returns>An instance of <see cref="T:Microsoft.OData.Client.DataServiceStreamResponse" /> that represents the response.</returns>
            <param name="entity">The entity that has the binary stream to retrieve. </param>
            <param name="args">Instance of <see cref="T:Microsoft.OData.Client.DataServiceRequestArgs" /> class that contains settings for the HTTP request message.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="entity" /> is null.-or- <paramref name="args" /> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:Microsoft.OData.Client.DataServiceContext" />.-or-The <paramref name="entity" /> is in the <see cref="F:Microsoft.OData.Client.EntityStates.Added" /> state.-or-The <paramref name="entity" /> is not a Media Link Entry and does not have a related binary stream.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetReadStream(System.Object,System.String,Microsoft.OData.Client.DataServiceRequestArgs)">
            <summary>Gets a named binary data stream that belongs to the specified entity, by using the specified Content-Type message header.</summary>
            <returns>An instance of <see cref="T:Microsoft.OData.Client.DataServiceStreamResponse"/> that represents the response.</returns>
            <param name="entity">The entity that has the binary data stream to retrieve.</param>
            <param name="name">The name of the binary stream to request.</param>
            <param name="args">Instance of <see cref="T:Microsoft.OData.Client.DataServiceRequestArgs"/> class that contains settings for the HTTP request message.</param>
            <exception cref="T:System.ArgumentNullException">Either entity or args parameters are null.</exception>
            <exception cref="T:System.ArgumentException">The specified entity is either not tracked, is in the added state.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.SetSaveStream(System.Object,System.IO.Stream,System.Boolean,System.String,System.String)">
            <summary>Sets a binary data stream that belongs to the specified entity, with the specified Content-Type and Slug headers in the request message.</summary>
            <param name="entity">The entity to which the data stream belongs.</param>
            <param name="stream">The <see cref="T:System.IO.Stream" /> from which to read the binary data. </param>
            <param name="closeStream">A <see cref="T:System.Boolean" /> value that determines whether the data stream is closed when the <see cref="M:Microsoft.OData.Client.DataServiceContext.SaveChanges" /> method is completed. </param>
            <param name="contentType">The Content-Type header value for the request message.</param>
            <param name="slug">The Slug header value for the request message.</param>
            <exception cref="T:System.ArgumentNullException">Any of the parameters supplied to the method are null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not being tracked by this <see cref="T:Microsoft.OData.Client.DataServiceContext" /> instance. -or-The entity has the <see cref="T:Microsoft.OData.Client.MediaEntryAttribute" /> applied. </exception>
            <remarks>Calling this method marks the entity as media link resource (MLE). It also marks the entity as modified
            so that it will participate in the next call to SaveChanges.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.SetSaveStream(System.Object,System.IO.Stream,System.Boolean,Microsoft.OData.Client.DataServiceRequestArgs)">
            <summary>Sets a binary data stream for the specified entity, with the specified headers in the request message.</summary>
            <param name="entity">The entity to which the binary stream belongs.</param>
            <param name="stream">The <see cref="T:System.IO.Stream" /> from which to read the binary data. </param>
            <param name="closeStream">A <see cref="T:System.Boolean" /> value that determines whether the data stream is closed when the <see cref="M:Microsoft.OData.Client.DataServiceContext.SaveChanges" /> method is completed. </param>
            <param name="args">An instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestArgs" /> class that contains settings for the HTTP request message.</param>
            <exception cref="T:System.ArgumentNullException">Any of the parameters supplied to the method are null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not being tracked by this <see cref="T:Microsoft.OData.Client.DataServiceContext" /> instance. -or-The <paramref name="entity" /> has the <see cref="T:Microsoft.OData.Client.MediaEntryAttribute" /> applied. </exception>
            <remarks>Calling this method marks the entity as media link resource (MLE). It also marks the entity as modified
            so that it will participate in the next call to SaveChanges.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.SetSaveStream(System.Object,System.String,System.IO.Stream,System.Boolean,System.String)">
            <summary>Sets a binary data stream for the specified entity.</summary>
            <param name="entity">The entity to which the binary stream belongs.</param>
            <param name="name">The name of the binary stream to save.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to read the binary data.</param>
            <param name="closeStream">A <see cref="T:System.Boolean"/> value that determines whether the data stream is closed when the <see cref="M:Microsoft.OData.Client.DataServiceContext.SaveChanges"/> method is completed.</param>
            <param name="contentType">The Content-Type header value for the request message.</param>
            <exception cref="T:System.ArgumentException">The entity is not being tracked or name is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is null.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.SetSaveStream(System.Object,System.String,System.IO.Stream,System.Boolean,Microsoft.OData.Client.DataServiceRequestArgs)">
            <summary>Sets a named binary data stream that belongs to the specified entity, with the specified headers in the request message.</summary>
            <param name="entity">The entity to which the binary stream belongs.</param>
            <param name="name">The name of the binary stream to save.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to read the binary data.</param>
            <param name="closeStream">A <see cref="T:System.Boolean"/> value that determines whether the data stream is closed when the <see cref="M:Microsoft.OData.Client.DataServiceContext.SaveChanges"/> method is completed.</param>
            <param name="args">An instance of the <see cref="T:Microsoft.OData.Client.DataServiceRequestArgs"/> class that contains settings for the HTTP request message.</param>
            <remarks>Calling this method marks the entity as media link resource (MLE). It also marks the entity as modified
            so that it will participate in the next call to SaveChanges.</remarks>
            <exception cref="T:System.ArgumentException">The entity is not being tracked. The entity has the MediaEntry attribute
            marking it to use the older way of handling MRs.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is null.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginExecuteBatch(System.AsyncCallback,System.Object,Microsoft.OData.Client.DataServiceRequest[])">
            <summary>Asynchronously submits a group of queries as a batch to the data service.</summary>
            <returns>An <see cref="T:System.IAsyncResult" /> object that is used to track the status of the asynchronous operation. </returns>
            <param name="callback">The delegate that is called when a response to the batch request is received.</param>
            <param name="state">User-defined state object that is used to pass context data to the callback method.</param>
            <param name="queries">The array of query requests to include in the batch request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ExecuteBatchAsync(Microsoft.OData.Client.DataServiceRequest[])">
            <summary>Asynchronously submits a group of queries as a batch to the data service.</summary>
            <returns>An Task that represents the DataServiceResult object that indicates the result of the batch operation.</returns>
            <param name="queries">The array of query requests to include in the batch request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.EndExecuteBatch(System.IAsyncResult)">
            <summary>Called to complete the <see cref="M:Microsoft.OData.Client.DataServiceContext.BeginExecuteBatch(System.AsyncCallback,System.Object,Microsoft.OData.Client.DataServiceRequest[])" />.</summary>
            <returns>The DataServiceResult object that indicates the result of the batch operation.</returns>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ExecuteBatch(Microsoft.OData.Client.DataServiceRequest[])">
            <summary>Synchronously submits a group of queries as a batch to the data service.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>The response to the batch operation.</returns>
            <param name="queries">Array of <see cref="T:Microsoft.OData.Client.DataServiceRequest[]" /> objects that make up the queries.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object)">
            <summary>Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.</summary>
            <returns>An object that is used to track the status of the asynchronous operation. </returns>
            <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI; it can contain $ query parameters.</param>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
            <typeparam name="TElement">The type returned by the query.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ExecuteAsync``1(System.Uri)">
            <summary>Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.</summary>
            <returns>A task represents the result of the operation. </returns>
            <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI; it can contain $ query parameters.</param>
            <typeparam name="TElement">The type returned by the query.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginExecute(System.Uri,System.AsyncCallback,System.Object,System.String,Microsoft.OData.Client.OperationParameter[])">
            <summary>Asynchronously sends a request to the data service to execute a specific URI.</summary>
            <returns>The result of the operation.</returns>
            <param name="requestUri">The URI to which the query request will be sent.</param>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
            <param name="httpMethod">The HTTP data transfer method used by the client.</param>
            <param name="operationParameters">The operation parameters used.</param>
            <remarks>
            This overload expects the <paramref name="requestUri"/> to end with a ServiceOperation
            or ServiceAction that returns void.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ExecuteAsync(System.Uri,System.String,Microsoft.OData.Client.OperationParameter[])">
            <summary>Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.</summary>
            <returns>A task represents the result of the operation. </returns>
            <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI; it can contain $ query parameters.</param>
            <param name="httpMethod">The HTTP data transfer method used by the client.</param>
            <param name="operationParameters">The operation parameters used.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object,System.String,System.Boolean,Microsoft.OData.Client.OperationParameter[])">
            <summary>Asynchronously sends a request to the data service to execute a specific URI.</summary>
            <returns>The result of the operation.</returns>
            <param name="requestUri">The URI to which the query request will be sent.</param>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
            <param name="httpMethod">The HTTP data transfer method used by the client.</param>
            <param name="singleResult">Attribute used on service operations to specify that they return a single instance of their return element.</param>
            <param name="operationParameters">The operation parameters used.</param>
            <typeparam name="TElement">The type returned by the query.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ExecuteAsync``1(System.Uri,System.String,System.Boolean,Microsoft.OData.Client.OperationParameter[])">
            <summary>Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.</summary>
            <returns>A task represents the result of the operation. </returns>
            <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI; it can contain $ query parameters.</param>
            <param name="httpMethod">The HTTP data transfer method used by the client.</param>
            <param name="singleResult">Attribute used on service operations to specify that they return a single instance of their return element.</param>
            <param name="operationParameters">The operation parameters used.</param>
            <typeparam name="TElement">The type returned by the query.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object,System.String,Microsoft.OData.Client.OperationParameter[])">
            <summary>Asynchronously sends a request to the data service to execute a specific URI.</summary>
            <returns>The result of the operation.</returns>
            <param name="requestUri">The URI to which the query request will be sent.</param>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
            <param name="httpMethod">The HTTP data transfer method used by the client.</param>
            <param name="operationParameters">The operation parameters used.</param>
            <typeparam name="TElement">The type returned by the query.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ExecuteAsync``1(System.Uri,System.String,Microsoft.OData.Client.OperationParameter[])">
            <summary>Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.</summary>
            <returns>A task represents the result of the operation. </returns>
            <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI; it can contain $ query parameters.</param>
            <param name="httpMethod">The HTTP data transfer method used by the client.</param>
            <param name="operationParameters">The operation parameters used.</param>
            <typeparam name="TElement">The type returned by the query.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginExecute``1(Microsoft.OData.Client.DataServiceQueryContinuation{``0},System.AsyncCallback,System.Object)">
            <summary>Asynchronously sends a request to the data service to retrieve the next page of data in a paged query result.</summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that represents the status of the operation.</returns>
            <param name="continuation">A <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation`1" /> object that represents the next page of data to return from the data service.</param>
            <param name="callback">Delegate to invoke when results are available for client consumption.</param>
            <param name="state">User-defined state object passed to the callback.</param>
            <typeparam name="T">The type returned by the query.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ExecuteAsync``1(Microsoft.OData.Client.DataServiceQueryContinuation{``0})">
            <summary>Asynchronously sends a request to the data service to retrieve the next page of data in a paged query result.</summary>
            <returns>A task that represents the results returned by the query operation.</returns>
            <param name="continuation">A <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation`1" /> object that represents the next page of data to return from the data service.</param>
            <typeparam name="TElement">The type returned by the query.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.EndExecute``1(System.IAsyncResult)">
            <summary>Called to complete the <see cref="M:Microsoft.OData.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object)" />.</summary>
            <returns>The results returned by the query operation.</returns>
            <param name="asyncResult">
              <see cref="T:System.IAsyncResult" /> object.</param>
            <typeparam name="TElement">The type returned by the query.</typeparam>
            <exception cref="T:System.ArgumentNullException">When<paramref name=" asyncResult" /> is null.</exception>
            <exception cref="T:System.ArgumentException">When<paramref name=" asyncResult" /> did not originate from this <see cref="T:Microsoft.OData.Client.DataServiceContext" /> instance. -or- When the <see cref="M:Microsoft.OData.Client.DataServiceContext.EndExecute``1(System.IAsyncResult)" /> method was previously called.</exception>
            <exception cref="T:System.InvalidOperationException">When an error is raised either during execution of the request or when it converts the contents of the response message into objects.</exception>
            <exception cref="T:Microsoft.OData.Client.DataServiceQueryException">When the data service returns an HTTP 404: Resource Not Found error.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.EndExecute(System.IAsyncResult)">
            <summary>Called to complete the <see cref="M:Microsoft.OData.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object)" />.</summary>
            <returns>The result of the operation.</returns>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</param>
            <remarks>This method should be used in combination with the BeginExecute overload which
            expects the request uri to end with a service operation or service action that returns void.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.Execute``1(System.Uri)">
            <summary>Sends a request to the data service to execute a specific URI.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>The results of the query operation.</returns>
            <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI. Can contain $ query parameters.</param>
            <typeparam name="TElement">The type that the query returns.</typeparam>
            <exception cref="T:System.Net.WebException">When a response is not received from a request to the <paramref name="requestUri" />.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="requestUri" /> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="requestUri" /> is not a valid URI for the data service.</exception>
            <exception cref="T:System.InvalidOperationException">When an error is raised either during execution of the request or when it converts the contents of the response message into objects.</exception>
            <exception cref="T:Microsoft.OData.Client.DataServiceQueryException">When the data service returns an HTTP 404: Resource Not Found error.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.Execute``1(Microsoft.OData.Client.DataServiceQueryContinuation{``0})">
            <summary>Sends a request to the data service to retrieve the next page of data in a paged query result.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>The response that contains the next page of data in the query result.</returns>
            <param name="continuation">A <see cref="T:Microsoft.OData.Client.DataServiceQueryContinuation`1" /> object that represents the next page of data to return from the data service.</param>
            <typeparam name="T">The type returned by the query.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.Execute(System.Uri,System.String,Microsoft.OData.Client.OperationParameter[])">
            <summary>Sends a request to the data service to execute a specific URI by using a specific HTTP method.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>The response of the operation.</returns>
            <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI. Can contain $ query parameters.</param>
            <param name="httpMethod">The HTTP data transfer method used by the client.</param>
            <param name="operationParameters">The operation parameters used.</param>
            <remarks>
            This overload expects the <paramref name="requestUri"/> to end with a ServiceOperation
            or ServiceAction that returns void.
            </remarks>
            <exception cref="T:System.ArgumentNullException">null requestUri</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="httpMethod"/> is not GET, POST or DELETE.</exception>
            <exception cref="T:System.InvalidOperationException">problem materializing results of query into objects</exception>
            <exception cref="T:System.Net.WebException">failure to get response for requestUri</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.Execute``1(System.Uri,System.String,System.Boolean,Microsoft.OData.Client.OperationParameter[])">
            <summary>Sends a request to the data service to execute a specific URI by using a specific HTTP method.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI. Can contain $ query parameters.</param>
            <param name="httpMethod">The HTTP data transfer method used by the client.</param>
            <param name="singleResult">Attribute used on service operations to specify that they return a single instance of their return element.</param>
            <param name="operationParameters">The operation parameters used.</param>
            <typeparam name="TElement">The type returned by the query.</typeparam>
            <exception cref="T:System.ArgumentNullException">null requestUri</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="httpMethod"/> is not GET nor POST.</exception>
            <exception cref="T:System.InvalidOperationException">problem materializing results of query into objects</exception>
            <exception cref="T:System.Net.WebException">failure to get response for requestUri</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.Execute``1(System.Uri,System.String,Microsoft.OData.Client.OperationParameter[])">
            <summary>Sends a request to the data service to execute a specific URI by using a specific HTTP method.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI. Can contain $ query parameters.</param>
            <param name="httpMethod">The HTTP data transfer method used by the client.</param>
            <param name="operationParameters">The operation parameters used.</param>
            <typeparam name="TElement">The type returned by the query.</typeparam>
            <exception cref="T:System.ArgumentNullException">null requestUri</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="httpMethod"/> is not GET nor POST.</exception>
            <exception cref="T:System.InvalidOperationException">problem materializing results of query into objects</exception>
            <exception cref="T:System.Net.WebException">failure to get response for requestUri</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)">
            <summary>Asynchronously submits the pending changes to the data service collected by the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> since the last time changes were saved.</summary>
            <returns>An IAsyncResult that represents the status of the asynchronous operation.</returns>
            <param name="callback">The delegate to call when the operation is completed.</param>
            <param name="state">The user-defined state object that is used to pass context data to the callback method.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.SaveChangesAsync">
            <summary>Asynchronously submits the pending changes to the data service collected by the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> since the last time changes were saved.</summary>
            <returns>A task that represents a <see cref="T:Microsoft.OData.Client.DataServiceResponse" /> object that indicates the result of the batch operation.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.BeginSaveChanges(Microsoft.OData.Client.SaveChangesOptions,System.AsyncCallback,System.Object)">
            <summary>Asynchronously submits the pending changes to the data service collected by the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> since the last time changes were saved.</summary>
            <returns>A task that represents a <see cref="T:Microsoft.OData.Client.DataServiceResponse" /> object that indicates the result of the batch operation.</returns>
            <param name="options">A member of the <see cref="T:Microsoft.OData.Client.SaveChangesOptions" /> enumeration for how the client can save the pending set of changes.</param>
            <param name="callback">The delegate to call when the operation is completed.</param>
            <param name="state">The user-defined state object that is used to pass context data to the callback method.</param>
            <remarks>
            BeginSaveChanges will asynchronously attach identity Uri returned by server to sucessfully added entites.
            EndSaveChanges will apply updated values to entities, raise ReadingEntity events and change entity states.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.SaveChangesAsync(Microsoft.OData.Client.SaveChangesOptions)">
            <summary>Asynchronously submits the pending changes to the data service collected by the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> since the last time changes were saved.</summary>
            <returns>A task that represents a <see cref="T:Microsoft.OData.Client.DataServiceResponse" /> object that indicates the result of the batch operation.</returns>
            <param name="options">A member of the <see cref="T:Microsoft.OData.Client.SaveChangesOptions" /> enumeration for how the client can save the pending set of changes.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.EndSaveChanges(System.IAsyncResult)">
            <summary>Called to complete the <see cref="M:Microsoft.OData.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" /> operation.</summary>
            <returns>A <see cref="T:Microsoft.OData.Client.DataServiceResponse" /> object that indicates the result of the batch operation.</returns>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.SaveChanges">
            <summary>Saves the changes that the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> is tracking to storage.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>A <see cref="T:Microsoft.OData.Client.DataServiceResponse" /> that contains status, headers, and errors that result from the call to <see cref="M:Microsoft.OData.Client.DataServiceContext.SaveChanges.Remarks" />.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.SaveChanges(Microsoft.OData.Client.SaveChangesOptions)">
            <summary>Saves the changes that the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> is tracking to storage.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>A <see cref="T:Microsoft.OData.Client.DataServiceResponse" /> that contains status, headers, and errors that result from the call to <see cref="M:Microsoft.OData.Client.DataServiceContext.SaveChanges" />.</returns>
            <param name="options">A member of the <see cref="T:Microsoft.OData.Client.SaveChangesOptions" /> enumeration for how the client can save the pending set of changes.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.AddLink(System.Object,System.String,System.Object)">
            <summary>Adds the specified link to the set of objects the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> is tracking.</summary>
            <param name="source">The source object for the new link.</param>
            <param name="sourceProperty">The name of the navigation property on the source object that returns the related object.</param>
            <param name="target">The object related to the source object by the new link. </param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" />, or <paramref name="target" /> are null.</exception>
            <exception cref="T:System.InvalidOperationException">If a link already exists.-or-If either the <paramref name="source" /> or <paramref name="target" /> objects are in a <see cref="F:Microsoft.OData.Client.EntityStates.Detached" /> or <see cref="F:Microsoft.OData.Client.EntityStates.Deleted" /> state.-or-If <paramref name="sourceProperty" /> is not a collection.</exception>
            <remarks>
            Notifies the context that a new link exists between the <paramref name="source"/> and <paramref name="target"/> objects
            and that the link is represented via the source.<paramref name="sourceProperty"/> which is a collection.
            The context adds this link to the set of newly created links to be sent to
            the data service on the next call to SaveChanges().
            Links are one way relationships.  If a back pointer exists (ie. two way association),
            this method should be called a second time to notify the context object of the second link.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.AttachLink(System.Object,System.String,System.Object)">
            <summary>Notifies the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> to start tracking the specified link that defines a relationship between entity objects.</summary>
            <param name="source">The source object in the new link.</param>
            <param name="sourceProperty">The name of the property on the source object that represents the link between the source and target object.</param>
            <param name="target">The target object in the link that is bound to the source object specified in this call. The target object must be of the type identified by the source property or a subtype.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" />, or <paramref name="target" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">When the link between the two entities already exists.-or-When <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:Microsoft.OData.Client.EntityStates.Added" /> or <see cref="F:Microsoft.OData.Client.EntityStates.Deleted" /> state.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.DetachLink(System.Object,System.String,System.Object)">
            <summary>Removes the specified link from the list of links being tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</summary>
            <returns>Returns true if the specified entity was detached; otherwise false.</returns>
            <param name="source">The source object participating in the link to be marked for deletion.</param>
            <param name="sourceProperty">The name of the property on the source object that represents the source in the link between the source and the target.</param>
            <param name="target">The target object involved in the link that is bound to the source object. The target object must be of the type identified by the source property or a subtype.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source" /> or <paramref name="sourceProperty" /> are null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="sourceProperty" /> is an empty string.</exception>
            <remarks>Any link being tracked by the context, regardless of its current state, can be detached.  </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.DeleteLink(System.Object,System.String,System.Object)">
            <summary>Changes the state of the link to deleted in the list of links being tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</summary>
            <param name="source">The source object in the link to be marked for deletion.</param>
            <param name="sourceProperty">The name of the navigation property on the source object that is used to access the target object.</param>
            <param name="target">The target object involved in the link that is bound to the source object. The target object must be of the type identified by the source property or a subtype.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" />, or <paramref name="target" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">When <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:Microsoft.OData.Client.EntityStates.Detached" /> or <see cref="F:Microsoft.OData.Client.EntityStates.Added" /> state.-or-When <paramref name="sourceProperty" /> is not a collection.</exception>
            <remarks>
            Notifies the context that a link exists between the <paramref name="source"/> and <paramref name="target"/> object
            and that the link is represented via the source.<paramref name="sourceProperty"/> which is a collection.
            The context adds this link to the set of deleted links to be sent to
            the data service on the next call to SaveChanges().
            If the specified link exists in the "Added" state, then the link is detached (see DetachLink method) instead.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.SetLink(System.Object,System.String,System.Object)">
            <summary>Notifies the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> that a new link exists between the objects specified and that the link is represented by the property specified by the <paramref name="sourceProperty" /> parameter.</summary>
            <param name="source">The source object for the new link.</param>
            <param name="sourceProperty">The property on the source object that identifies the target object of the new link.</param>
            <param name="target">The child object involved in the new link that is to be initialized by calling this method. The target object must be a subtype of the type identified by the <paramref name="sourceProperty" /> parameter. If <paramref name="target" /> is set to null, the call represents a delete link operation.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" /> or <paramref name="target" /> are null.</exception>
            <exception cref="T:System.InvalidOperationException">When the specified link already exists.-or-When the objects supplied as <paramref name="source" /> or <paramref name="target" /> are in the <see cref="F:Microsoft.OData.Client.EntityStates.Detached" /> or <see cref="F:Microsoft.OData.Client.EntityStates.Deleted" /> state.-or-When <paramref name="sourceProperty" /> is not a navigation property that defines a reference to a single related object.</exception>
            <remarks>
            Notifies the context that a modified link exists between the <paramref name="source"/> and <paramref name="target"/> objects
            and that the link is represented via the source.<paramref name="sourceProperty"/> which is a reference.
            The context adds this link to the set of modified created links to be sent to
            the data service on the next call to SaveChanges().
            Links are one way relationships.  If a back pointer exists (ie. two way association),
            this method should be called a second time to notify the context object of the second link.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.AddObject(System.String,System.Object)">
            <summary>Adds the specified object to the set of objects that the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> is tracking.</summary>
            <param name="entitySetName">The name of the entity set to which the resource will be added.</param>
            <param name="entity">The object to be tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> or <paramref name="entity" /> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is empty.-or-When <paramref name="entity" /> does not have a key property defined.</exception>
            <exception cref="T:System.InvalidOperationException">When the entity is already being tracked by the context.</exception>
            <remarks>
            It does not follow the object graph and add related objects.
            Any leading or trailing forward slashes will automatically be trimmed from entitySetName.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.AddRelatedObject(System.Object,System.String,System.Object)">
            <summary>Adds a related object to the context and creates the link that defines the relationship between the two objects in a single request.</summary>
            <param name="source">The parent object that is being tracked by the context.</param>
            <param name="sourceProperty">The name of the navigation property that returns the related object based on an association between the two entities.</param>
            <param name="target">The related object that is being added.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.AttachTo(System.String,System.Object)">
            <summary>Notifies the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> to start tracking the specified resource and supplies the location of the resource within the specified resource set.</summary>
            <param name="entitySetName">The name of the set that contains the resource.</param>
            <param name="entity">The resource to be tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" />. The resource is attached in the Unchanged state.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> or <paramref name="entitySetName" /> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.-or-When the <paramref name="entity" /> does not have a key property defined.</exception>
            <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> is already being tracked by the context.</exception>
            <remarks>It does not follow the object graph and attach related objects.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.AttachTo(System.String,System.Object,System.String)">
            <summary>Notifies the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> to start tracking the specified resource and supplies the location of the resource in the specified resource set.</summary>
            <param name="entitySetName">The string value that contains the name of the entity set to which to the entity is attached.</param>
            <param name="entity">The entity to add.</param>
            <param name="etag">An etag value that represents the state of the entity the last time it was retrieved from the data service. This value is treated as an opaque string; no validation is performed on it by the client library.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> is null.-or-When <paramref name="entity" /> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.-or-When the supplied object does not have a key property.</exception>
            <exception cref="T:System.InvalidOperationException">When the supplied object is already being tracked by the context</exception>
            <remarks>It does not follow the object graph and attach related objects.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.DeleteObject(System.Object)">
            <summary>Changes the state of the specified object to be deleted in the <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</summary>
            <param name="entity">The tracked entity to be changed to the deleted state.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">When the object is not being tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</exception>
            <remarks>
            Existings objects in the Added state become detached.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.Detach(System.Object)">
            <summary>Removes the entity from the list of entities that the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> is tracking.</summary>
            <returns>Returns true if the specified entity was detached; otherwise false.</returns>
            <param name="entity">The tracked entity to be detached from the <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.UpdateObject(System.Object)">
            <summary>Changes the state of the specified object in the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> to <see cref="F:Microsoft.OData.Client.EntityStates.Modified" />.</summary>
            <param name="entity">The tracked entity to be assigned to the <see cref="F:Microsoft.OData.Client.EntityStates.Modified" /> state.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="entity" /> is in the <see cref="F:Microsoft.OData.Client.EntityStates.Detached" /> state.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.UpdateRelatedObject(System.Object,System.String,System.Object)">
            <summary>Update a related object to the context.</summary>
            <param name="source">The parent object that is being tracked by the context.</param>
            <param name="sourceProperty">The name of the navigation property that returns the related object based on an association between the two entities.</param>
            <param name="target">The related object that is being updated.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ChangeState(System.Object,Microsoft.OData.Client.EntityStates)">
            <summary>
            Changes the state of the given entity. 
            Note that the 'Added' state is not supported by this method, and that AddObject or AddRelatedObject should be used instead.
            If the state 'Modified' is given, calling this method is exactly equivalent to calling UpdateObject.
            If the state 'Deleted' is given, calling this method is exactly equivalent to calling DeleteObject.
            If the state 'Detached' is given, calling this method is exactly equivalent to calling Detach.
            If the state 'Unchanged' is given, the state will be changed, but no other modifications will be made to the entity or entity descriptor associated with it.
            </summary>
            <param name="entity">The entity whose state to change.</param>
            <param name="state">The new state of the entity.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.TryGetEntity``1(System.Uri,``0@)">
            <summary>Test retrieval of an entity being tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> by reference to the URI of the entity.</summary>
            <returns>If an entity is found at <paramref name="identity" />, the entity is returned in the out parameter <paramref name="entity" /> and true is returned. If no entity is found, false is returned.</returns>
            <param name="identity">The URI of the tracked entity to be retrieved.</param>
            <param name="entity">The entity to be retrieved.</param>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <exception cref="T:System.ArgumentNullException">When <paramref name="identity" /> is null.</exception>
            <remarks>entities in added state are not likely to have a identity</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.TryGetUri(System.Object,System.Uri@)">
            <summary>Retrieves the canonical URI associated with the specified entity, if available.</summary>
            <returns>Returns true if the canonical URI is returned in the out parameter. If the specified entity is not tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> or is in the added state, no URI is available and false is returned.</returns>
            <param name="entity">The entity identified by the <paramref name="identity" />.</param>
            <param name="identity">The URI of the entity.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
            <remarks>Entities in added state are not likely to have an identity. Though the identity might use a dereferencable scheme, you MUST NOT assume it can be dereferenced.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetEdmOperationOrOperationImport(System.Reflection.MethodInfo)">
            <summary>
            Get the bound <see cref="T:Microsoft.OData.Edm.IEdmOperation"/> or <see cref="T:Microsoft.OData.Edm.IEdmOperationImport"/> according to the client MethodInfo.
            </summary>
            <param name="methodInfo">The specified MethodInfo</param>
            <returns>return a bound <see cref="T:Microsoft.OData.Edm.IEdmOperation"/> or an <see cref="T:Microsoft.OData.Edm.IEdmOperationImport"/> if it is found, or return null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.LoadPropertyAllPagesAsync(System.Object,System.String)">
            <summary>
            Asynchronously loads all pages of related entities for a specified property from the data service.
            </summary>
            <param name="entity">The entity that contains the property to load.</param>
            <param name="propertyName">The name of the property of the specified entity to load.</param>
            <returns>An instance of <see cref="T:Microsoft.OData.Client.QueryOperationResponse`1" /> that contains the results of the last page request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.LoadPropertyAllPages(System.Object,System.String)">
            <summary>
            Loads all pages of related entities for a specified property from the data service.Not supported by the WCF Data Services 5.0 client for Silverlight.
            </summary>
            <param name="entity">The entity that contains the property to load.</param>
            <param name="propertyName">The name of the property of the specified entity to load.</param>
            <returns>An instance of <see cref="T:Microsoft.OData.Client.QueryOperationResponse`1" /> that contains the results of the last page request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.InnerSynchExecute``1(System.Uri,System.String,System.Nullable{System.Boolean},Microsoft.OData.Client.OperationParameter[])">
            <summary>
            Execute the <paramref name="requestUri"/> using <paramref name="httpMethod"/>.
            </summary>
            <typeparam name="TElement">Element type of the result. </typeparam>
            <param name="requestUri">Request URI to execute.</param>
            <param name="httpMethod">HttpMethod to use. Only GET or POST are supported.</param>
            <param name="singleResult">If set to true, indicates that a single result is expected as a response.
            False indicates that a collection of TElement is assumed. Should be null for void, entry, and feed cases. 
            This function will check if TElement is an entity type and set singleResult to null in this case.</param>
            <param name="operationParameters">The operation parameters associated with the service operation.</param>
            <returns>A QueryOperationResponse that is enumerable over the results and holds other response information.</returns>
            <exception cref="T:System.ArgumentNullException">null requestUri</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="httpMethod"/> is not GET nor POST.</exception>
            <exception cref="T:System.InvalidOperationException">problem materializing results of query into objects</exception>
            <exception cref="T:System.Net.WebException">failure to get response for requestUri</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.InnerBeginExecute``1(System.Uri,System.AsyncCallback,System.Object,System.String,System.String,System.Nullable{System.Boolean},Microsoft.OData.Client.OperationParameter[])">
            <summary>Begins the execution of the request uri based on the http method.</summary>
            <typeparam name="TElement">element type of the result</typeparam>
            <param name="requestUri">request to execute</param>
            <param name="callback">User callback when results from execution are available.</param>
            <param name="state">user state in IAsyncResult</param>
            <param name="httpMethod">HttpMethod to use. Only GET and POST are supported.</param>
            <param name="method">async method name at the source.</param>
            <param name="singleResult">If set to true, indicates that a single result is expected as a response.</param>
            <param name="operationParameters">The operation parameters associated with the service operation.</param>
            <returns>async result object</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.AttachLink(System.Object,System.String,System.Object,Microsoft.OData.Client.MergeOption)">
            <summary>
            Track a binding.
            </summary>
            <param name="source">Source resource.</param>
            <param name="sourceProperty">Property on the source resource that relates to the target resource.</param>
            <param name="target">Target resource.</param>
            <param name="linkMerge">merge operation</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CreateODataRequestMessage(Microsoft.OData.Client.BuildingRequestEventArgs,Microsoft.OData.Client.Descriptor)">
            <summary>
             Creates the OData request message to write the headers and payload into.
            </summary>
            <param name="requestMessageArgs">The arguments for creating the message.</param>
            <param name="descriptor">Descriptor to expose in SendingRequest2</param>
            <returns>An instance of IODataRequestMessage with the given headers and version.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ResolveTypeFromName(System.String)">
            <summary>
            user hook to resolve name into a type
            </summary>
            <param name="wireName">name to resolve</param>
            <returns>Null if no type resolver is registered, otherwise returns whatever is returned by the type resolver.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ResolveNameFromTypeInternal(System.Type)">
            <summary>
            The reverse of ResolveType, use for complex types and LINQ query expression building
            </summary>
            <param name="type">client type</param>
            <returns>type for the server</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.FireSendingRequest(Microsoft.OData.Client.SendingRequestEventArgs)">
            <summary>
            Fires the SendingRequest event.
            </summary>
            <param name="eventArgs">SendingRequestEventArgs instance containing all information about the request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.FireSendingRequest2(Microsoft.OData.Client.SendingRequest2EventArgs)">
            <summary>
            Fires the SendingRequest2 event.
            </summary>
            <param name="eventArgs">SendingRequest2EventArgs instance containing all information about the request.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.FireReceivingResponseEvent(Microsoft.OData.Client.ReceivingResponseEventArgs)">
            <summary>
            Fires the ReceivingResponse event.
            </summary>
            <param name="receivingResponseEventArgs">Args instance containing information about the response.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetSyncronousResponse(Microsoft.OData.Client.ODataRequestMessageWrapper,System.Boolean)">
            <summary>
            This method wraps the HttpWebRequest.GetSyncronousResponse method call. The reasons for doing this are to give us a place
            to invoke internal test hook callbacks that can validate the response headers, and also so that we can do
            debug validation to make sure that the headers have not changed since they were originally configured on the request.
            </summary>
            <param name="request">HttpWebRequest instance</param>
            <param name="handleWebException">If set to true, this method will only re-throw the WebException that was caught if
            the response in the exception is null. If set to false, this method will always re-throw in case of a WebException.</param>
            <returns>
            Returns the HttpWebResponse from the wrapped GetSyncronousResponse method.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.EndGetResponse(Microsoft.OData.Client.ODataRequestMessageWrapper,System.IAsyncResult)">
            <summary>
            This method wraps the HttpWebRequest.EndGetResponse method call. The reason for doing this is to give us a place
            to invoke internal test hook callbacks that can validate the response headers.
            </summary>
            <param name="request">HttpWebRequest instance</param>
            <param name="asyncResult">Async result obtained from previous call to BeginGetResponse.</param>
            <returns>Returns the HttpWebResponse from the wrapped EndGetResponse method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.InternalSendRequest(System.Net.HttpWebRequest)">
            <summary>
            Invokes the sendRequest test hook callback with a reference to the HttpWebRequest
            </summary>
            <param name="request">HttpWebRequest to provide in the callback.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.InternalGetRequestWrappingStream(System.IO.Stream)">
            <summary>
            Invokes the getRequestWrappingStream test hook callback, so that the test code can wrap the stream and see what gets written to it.
            </summary>
            <param name="requestStream">Underlying HTTP stream to be wrapped</param>
            <returns>
            If the test hook is being used, returns the stream provided by the callback, otherwise returns the original stream.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.InternalSendResponse(System.Net.HttpWebResponse)">
            <summary>
            Invokes the sendResponse test hook callback with a reference to the HttpWebResponse
            </summary>
            <param name="response">HttpWebResponse to provide in the callback.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.InternalGetResponseWrappingStream(System.IO.Stream)">
            <summary>
            Invokes the getResponseWrappingStream test hook callback, so that the test code can wrap the stream and see what gets read from it.
            </summary>
            <param name="responseStream">Underlying HTTP stream to be wrapped</param>
            <returns>
            If the test hook is being used, returns the stream provided by the callback, otherwise returns the original stream.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetEntityMetadataBuilder(System.String,Microsoft.OData.Edm.Values.IEdmStructuredValue)">
            <summary>
            Gets an entity metadata builder to evaluate metadata which is not present in payloads, or for which the payload is not available.
            </summary>
            <param name="entitySetName">Name of the entity set to which the entity belongs.</param>
            <param name="entityInstance">The entity to build metadata for.</param>
            <returns>
            A metadata builder for the entity tracked by the given entity instance.
            </returns>
            <remarks>
            This is used for example to determine the edit link for an entity if the payload didn't have one, or to determine the URL for a navigation when building a query through LINQ.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CreateRequestArgsAndFireBuildingRequest(System.String,System.Uri,Microsoft.OData.Client.HeaderCollection,Microsoft.OData.Client.HttpStack,Microsoft.OData.Client.Descriptor)">
            <summary>
            Fires the BuildingRequest event to get a new RequestMessageArgs object.
            </summary>
            <param name="method">Http method for the request.</param>
            <param name="requestUri">Base Uri for the request.</param>
            <param name="headers">Http stack to use for the request.</param>
            <param name="stack">Http stack to use for the request.</param>
            <param name="descriptor">Descriptor for the request, if there is one.</param>
            <returns>A new RequestMessageArgs object for building the request message.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.DefaultResolveType(System.String,System.String,System.String)">
            <summary>
            Determines the type that
            </summary>
            <param name="typeName">Name of the type to resolve.</param>
            <param name="fullNamespace">Namespace of the type.</param>
            <param name="languageDependentNamespace">Namespace of the type, can be different in VB than the fullNamespace.</param>
            <returns>Type that the name resolved to or null if none found.</returns>
            <remarks>Function was added for Portable Lib support to handle the differences in accessing the assembly of the context.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.IsSingletonType``1">
            <summary>
            Determines if a type is a singleton type
            </summary>
            <typeparam name="TElement">The type to be determined</typeparam>
            <returns>True for primitive or complex types,
            false for collection types of primitive and complex,
            and null for anything else (like entity, feed, etc.)</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ContinuePage(Microsoft.OData.Client.QueryOperationResponse,System.Object,System.String)">
            <summary>
            Continue to asynchronously loads the next page of related entities for a specified property from the data service.
            </summary>
            <param name="response">The response of previous page</param>
            <param name="entity">The entity that contains the property to load.</param>
            <param name="propertyName">The name of the property of the specified entity to load.</param>
            <returns>An instance of <see cref="T:Microsoft.OData.Client.QueryOperationResponse`1" /> that contains the results of the request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ValidateEntitySetName(System.String@)">
            <summary>validate <paramref name="entitySetName"/> and trim leading and trailing forward slashes
            </summary>
            <param name="entitySetName">resource name to validate</param>
            <exception cref="T:System.ArgumentNullException">if entitySetName was null</exception>
            <exception cref="T:System.ArgumentException">if entitySetName was empty or contained only forward slash</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ValidateEntityType(System.Object,Microsoft.OData.Client.ClientEdmModel)">
            <summary>validate <paramref name="entity"/> is entity type</summary>
            <param name="entity">entity to validate</param>
            <param name="model">The client model.</param>
            <exception cref="T:System.ArgumentNullException">if entity was null</exception>
            <exception cref="T:System.ArgumentException">if entity does not have a key property</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ValidateOperationParameters(System.String,Microsoft.OData.Client.OperationParameter[],System.Collections.Generic.List{Microsoft.OData.Client.BodyOperationParameter}@,System.Collections.Generic.List{Microsoft.OData.Client.UriOperationParameter}@)">
            <summary>
            Validates a given list of operation parameter and returns two seperated list of body operation parameter
            and uri operation parameter respectively.
            </summary>
            <param name="httpMethod">the http method used in the request. Only POST and GET http methods are supported with operation parameters.</param>
            <param name="parameters">The list of operation parameters to be validated.</param>
            <param name="bodyOperationParameters">The list of body operation parameters to be returned.</param>
            <param name="uriOperationParameters">The list of uri operation parameters to be returned.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.FireBuildingRequest(Microsoft.OData.Client.BuildingRequestEventArgs)">
            <summary>
            Fires the BuildingRequest event so the user can add custom query parameters.
            </summary>
            <param name="buildingRequestEventArgs">Information about the request so they user can selectively add query parameters.</param>
            <returns>A new RequestMessageArgs object that contains any changes the user made to the query string.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ValidateSaveChangesOptions(Microsoft.OData.Client.SaveChangesOptions)">
            <summary>
            Validate the SaveChanges Option
            </summary>
            <param name="options">options as specified by the user.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ValidateExecuteParameters``1(System.Uri@,System.String,System.Nullable{System.Boolean}@,System.Collections.Generic.List{Microsoft.OData.Client.BodyOperationParameter}@,System.Collections.Generic.List{Microsoft.OData.Client.UriOperationParameter}@,Microsoft.OData.Client.OperationParameter[])">
            <summary>
            Validate and process the input parameters to all the execute methods. Also seperates and returns
            the input operation parameters list into two seperate list - one of body operation parameters and the other 
            for uri operation parameters.
            </summary>
            <typeparam name="TElement">element type. See Execute method for more details.</typeparam>
            <param name="requestUri">request to execute</param>
            <param name="httpMethod">HttpMethod to use. Only GET and POST are supported if operation parameters are not empty.</param>
            <param name="singleResult">If set to true, indicates that a single result is expected as a response.</param>
            <param name="bodyOperationParameters">The list of body operation parameters to be returned.</param>
            <param name="uriOperationParameters">The list of uri operation parameters to be returned.</param>
            <param name="operationParameters">The operation parameters associated with the service operation.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CreateLoadPropertyRequest(System.Object,System.String,System.AsyncCallback,System.Object,System.Uri,Microsoft.OData.Client.DataServiceQueryContinuation)">
            <summary>
            create the load property request
            </summary>
            <param name="entity">entity</param>
            <param name="propertyName">name of collection or reference property to load</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">user state</param>
            <param name="requestUri">The request uri, or null if one is to be constructed</param>
            <param name="continuation">Continuation, if one is available.</param>
            <returns>a aync result that you can get a response from</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.EnsureRelatable(System.Object,System.String,System.Object,Microsoft.OData.Client.EntityStates)">
            <summary>
            verify the source and target are relatable
            </summary>
            <param name="source">source Resource</param>
            <param name="sourceProperty">source Property</param>
            <param name="target">target Resource</param>
            <param name="state">destination state of relationship to evaluate for</param>
            <returns>true if DeletedState and one of the ends is in the added state</returns>
            <exception cref="T:System.ArgumentNullException">if source or target are null</exception>
            <exception cref="T:System.ArgumentException">if source or target are not contained</exception>
            <exception cref="T:System.ArgumentNullException">if source property is null</exception>
            <exception cref="T:System.ArgumentException">if source property empty</exception>
            <exception cref="T:System.InvalidOperationException">Can only relate ends with keys.</exception>
            <exception cref="T:System.ArgumentException">If target doesn't match property type.</exception>
            <exception cref="T:System.InvalidOperationException">If adding relationship where one of the ends is in the deleted state.</exception>
            <exception cref="T:System.InvalidOperationException">If attaching relationship where one of the ends is in the added or deleted state.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.CreateGetReadStreamResult(System.Object,Microsoft.OData.Client.DataServiceRequestArgs,System.AsyncCallback,System.Object,System.String)">
            <summary>
            This method creates an async result object around a request to get the read stream for a Media Resource
            associated with the Media Link Entry represented by the entity object.
            </summary>
            <param name="entity">The entity which is the Media Link Entry for the requested Media Resource. Thist must specify
            a tracked entity in a non-added state.</param>
            <param name="args">Instance of <see cref="T:Microsoft.OData.Client.DataServiceRequestArgs"/> class with additional metadata for the request.
            Must not be null.</param>
            <param name="callback">User defined callback to be called when results are available. Can be null.</param>
            <param name="state">User state in IAsyncResult. Can be null.</param>
            <param name="name">name of the stream.</param>
            <returns>The async result object for the request, the request hasn't been started yet.</returns>
            <exception cref="T:System.ArgumentNullException">Either entity or args parameters are null.</exception>
            <exception cref="T:System.ArgumentException">The specified entity is either not tracked, 
            is in the added state or it's not an MLE.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.EnsureMinimumProtocolVersionV3">
            <summary>
            Ensures that the required OData version is lesser than the maxprotocolversion  on this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">throws an invalidoperationexception if the max protocolversion is lesser than the required protocol version</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetEntityMetadataBuilderInternal(Microsoft.OData.Client.EntityDescriptor)">
            <summary>
            Helper method for calling the overridable GetEntityMetadataBuilder API and performing common logic/verification.
            </summary>
            <param name="descriptor">The entity descriptor tracking the entity.</param>
            <returns>A metadata builder for the entity tracked by the given descriptor.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.GetResponseHelper(Microsoft.OData.Client.ODataRequestMessageWrapper,System.IAsyncResult,System.Boolean)">
            <summary>
            This method wraps the HttpWebRequest.GetSyncronousResponse method call. It fires the ReceivingResponse event.
            It also gives us a place to invoke internal test hook callbacks that can validate the response headers, and also so that we can do
            debug validation to make sure that the headers have not changed since they were originally configured on the request.
            </summary>
            <param name="request">HttpWebRequest instance</param>
            <param name="asyncResult">IAsyncResult for EndGetResponse if this is an async call.</param>
            <param name="handleWebException">If set to true, this method will only re-throw the WebException that was caught if
            the response in the exception is null. If set to false, this method will always re-throw in case of a WebException.</param>
            <returns>Returns the HttpWebResponse from the wrapped GetSyncronousResponse method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.UpdateObjectInternal(System.Object,System.Boolean)">
            <summary>
            Mark an existing object for update in the context.
            </summary>
            <param name="entity">entity to be mark for update</param>
            <param name="failIfNotUnchanged">If true, then an exception should be thrown if the entity is in neither the unchanged nor modified states.</param>
            <exception cref="T:System.ArgumentNullException">if entity is null</exception>
            <exception cref="T:System.ArgumentException">if entity is detached</exception>
            <exception cref="T:System.InvalidOperationException">if entity is not unchanged or modified and <paramref name="failIfNotUnchanged"/> is true.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.DeleteObjectInternal(System.Object,System.Boolean)">
            <summary>
            Mark an existing object being tracked by the context for deletion.
            </summary>
            <param name="entity">entity to be mark deleted</param>
            <param name="failIfInAddedState">If true, then an exception will be thrown if the entity is in the added state.</param>
            <exception cref="T:System.ArgumentNullException">if entity is null</exception>
            <exception cref="T:System.InvalidOperationException">if entity is not being tracked by the context, or if the entity is in the added state and <paramref name="failIfInAddedState"/> is true.</exception>
            <remarks>
            Existings objects in the Added state become detached if <paramref name="failIfInAddedState"/> is false.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.SetStateToUnchanged(System.Object)">
            <summary>
            Sets the entity's state to unchanged.
            </summary>
            <param name="entity">The entity to set back to unchanged.</param>
        </member>
        <member name="E:Microsoft.OData.Client.DataServiceContext.SendingRequest2">
            <summary>
            This event is fired before a request is sent to the server, giving
            the handler the opportunity to inspect, adjust and/or replace the
            WebRequest object used to perform the request.
            </summary>
            <remarks>
            When calling BeginSaveChanges and not using SaveChangesOptions.BatchWithSingleChangeset and SaveChangesOptions.BatchWithIndependentOperations,
            this event may be raised from a different thread.
            </remarks>
        </member>
        <member name="E:Microsoft.OData.Client.DataServiceContext.BuildingRequest">
            <summary>
            This event is fired before a request message object is built, giving 
            the handler the opportunity to inspect, adjust and/or replace some
            request information before the message is built. This event should be 
            used to modify the outgoing Url of the request or alter request headers. 
            After the request is built, other modifications on the WebRequest object can be made
            in SendingRequest2.
            </summary>
            <remarks>
            When calling BeginSaveChanges and not using SaveChangesOptions.BatchWithSingleChangeset and SaveChangesOptions.BatchWithIndependentOperations,
            this event may be raised from a different thread.
            </remarks>
        </member>
        <member name="E:Microsoft.OData.Client.DataServiceContext.ReceivingResponse">
            <summary>
            This event fires when a response is received by the client.
            It fires for both top level responses and each operation or query within a batch response.
            </summary>
            <remarks>
            On top level requests, the event is fired before any processing is done.
            For inner batch operations, the event is also fired before any processing is done, with
            the exception that the content-ID of a changeset operation will be read before the event is fired.
            </remarks>
        </member>
        <member name="E:Microsoft.OData.Client.DataServiceContext.ChangesSaved">
            <summary>
            This event fires when SaveChanges or EndSaveChanges is called
            </summary>
        </member>
        <member name="E:Microsoft.OData.Client.DataServiceContext.InnerSendingRequest">
            <summary>
            Internal event instance used by the public SendingRequest event.
            </summary>
        </member>
        <member name="E:Microsoft.OData.Client.DataServiceContext.InnerBuildingRequest">
            <summary>
            Internal event instance used by the public BuildingRequest event.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.ResolveEntitySet">
            <summary>Gets or sets the delegate method that is used to resolve the entity set URI when the value cannot be determined from an edit-link or self-link URI.</summary>
            <returns>A delegate that takes a <see cref="T:System.String" /> and returns a <see cref="T:System.Uri" /> value.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.BaseUri">
            <summary>Gets the absolute URI identifying the root of the target data service. </summary>
            <returns>An absolute URI that identifies the root of a T data service.</returns>
            <remarks>
            A Uri provided with a trailing slash is equivalent to one without such a trailing character.
            Example: http://server/host/myservice.svc
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.AddAndUpdateResponsePreference">
            <summary>Gets or sets whether the client requests that the data service return entity data in the response message to a change request.</summary>
            <returns>A <see cref="T:Microsoft.OData.Client.DataServiceResponsePreference" /> object that determines whether to request a response form the data service. </returns>
            <remarks>Whether POST/PUT/PATCH requests will process response from the server. Corresponds to Prefer header in HTTP POST/PUT/PATCH request.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.MaxProtocolVersion">
            <summary>Gets the maximum version of the Open Data Protocol (OData) that the client is allowed to use.</summary>
            <returns>The maximum version of OData that the client is allowed to use.</returns>
            <remarks>If the request or response would require higher version the client will fail.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.Credentials">
            <summary>Gets or sets the authentication information that is used by each query created by using the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> object.</summary>
            <returns>The base authentication interface for retrieving credentials for Web client authentication.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.EntityParameterSendOption">
            <summary>Gets or sets the option for sending entity parameters to service.</summary>
            <returns>One of the members of the <see cref="T:Microsoft.OData.Client.EntityParameterSendOption" /> enumeration.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.MergeOption">
            <summary>Gets or sets the synchronization option for receiving entities from a data service.</summary>
            <returns>One of the members of the <see cref="T:Microsoft.OData.Client.MergeOption"/> enumeration.</returns>
            <remarks>
            Used to specify a synchronization strategy when sending/receiving entities to/from a data service.
            This value is read by the deserialization component of the client prior to materializing objects.
            As such, it is recommended to set this property to the appropriate materialization strategy
            before executing any queries/updates to the data service.
            The default value is <see cref="P:Microsoft.OData.Client.DataServiceContext.MergeOption"/>.AppendOnly.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.ApplyingChanges">
            <summary>Gets a value that indicates whether the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> is currently applying changes to tracked objects.</summary>
            <returns>Returns true when changes are currently being applied; otherwise returns false.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.IgnoreMissingProperties">
            <summary>Gets or sets whether the properties read from the type must be mapped to properties on the client-side type.</summary>
            <returns>A Boolean value that indicates whether the properties read from the type must be mapped to properties on the client-side type.</returns>
            <remarks>
            This also affects responses during SaveChanges.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.ResolveName">
            <summary>Gets or sets a function to override the default type resolution strategy used by the client library when you send entities to a data service.</summary>
            <returns>Returns a string that contains the name of the <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</returns>
            <remarks>
            Enables one to override the default type resolution strategy used by the client library.
            Set this property to a delegate which identifies a function that resolves
            a type within the client application to a namespace-qualified type name.
            This enables the client to perform custom mapping between the type name
            provided in a response from the server and a type on the client.
            This method enables one to override the entity name that is serialized
            to the target representation (ATOM,JSON, etc) for the specified type.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.ResolveType">
            <summary>Gets or sets a function that is used to override the default type resolution option that is used by the client library when receiving entities from a data service.</summary>
            <returns>A function delegate that identifies an override function that is used to override the default type resolution option that is used by the client library.</returns>
            <remarks>
            Enables one to override the default type resolution strategy used by the client library.
            Set this property to a delegate which identifies a function that resolves a 
            namespace-qualified type name to type within the client application.
            This enables the client to perform custom mapping between the type name
            provided in a response from the server and a type on the client.
            Overriding type resolution enables inserting a custom type name to type mapping strategy.
            It does not enable one to affect how a response is materialized into the identified type.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.Timeout">
            <summary>Gets or sets the time-out option (in seconds) that is used for the underlying HTTP request to the data service.</summary>
            <returns>An integer that indicates the time interval (in seconds) before time-out of a service request.</returns>
            <remarks>
            A value of 0 will use the default timeout of the underlying HTTP request.
            This value must be set before executing any query or update operations against
            the target data service for it to have effect on the on the request.
            The value may be changed between requests to a data service and the new value
            will be picked up by the next data service request.
            </remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.UsePostTunneling">
            <summary>Gets or sets a Boolean value that indicates whether to use post tunneling.</summary>
            <returns>A Boolean value that indicates whether to use post tunneling.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.Links">
            <summary>Gets the collection of all associations or links currently being tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> object.</summary>
            <returns>A collection of <see cref="T:Microsoft.OData.Client.LinkDescriptor" /> objects that represent all associations or links current being tracked by the current being tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" /> object.</returns>
            <remarks>If no links are being tracked, a collection with 0 elements is returned.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.Entities">
            <summary>Gets a list of all the resources currently being tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" />.</summary>
            <returns>A list of <see cref="T:Microsoft.OData.Client.EntityDescriptor" /> objects that represent all the resources currently being tracked by the <see cref="T:Microsoft.OData.Client.DataServiceContext" />. </returns>
            <remarks>If no resources are being tracked, a collection with 0 elements is returned.</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.SaveChangesDefaultOptions">
            <summary>Gets or sets the <see cref="T:Microsoft.OData.Client.SaveChangesOptions" /> values that are used by the <see cref="M:Microsoft.OData.Client.DataServiceContext.SaveChanges" /> method.</summary>
            <returns>The current options for the save changes operation.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.IgnoreResourceNotFoundException">
            <summary>Gets or sets whether an exception is raised when a 404 error (resource not found) is returned by the data service. </summary>
            <returns>When set to true, the client library returns an empty set instead of raising a <see cref="T:Microsoft.OData.Client.DataServiceQueryException" /> when the data service returns an HTTP 404: Resource Not Found error.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.Configurations">
            <summary>
            Gets the configurations.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.Format">
            <summary>
            Gets an object which allows the user to customize the format the client will use for making requests.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.UrlConventions">
            <summary>
            Gets or sets the URL conventions the client should use.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.EntityTracker">
            <summary>
            Returns the instance of entity tracker which tracks all the entities and links tracked by the context.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.DisableInstanceAnnotationMaterialization">
            <summary>
            Disable instance annotation to be materialized.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.ODataSimplified">
            <summary>
            Whether OData Simplified is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.UseDefaultCredentials">
            <summary>
            Gets or sets a System.Boolean value that controls whether default credentials are sent with requests.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.HttpStack">
            <summary>Gets a value that indicates the type of HTTP implementation to use when accessing the data service in Silverlight.</summary>
            <returns>A <see cref="T:Microsoft.OData.Client.HttpStack" /> value that indicates the HTTP implementation to use when accessing the data service.</returns>
            <remarks>Default value is HttpStack.Auto</remarks>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.HasSendingRequest2EventHandlers">
            <summary>Indicates if there are subscribers for the SendingRequest2 event.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.HasBuildingRequestEventHandlers">
            <summary>
            INdicates if there are any subscribers for the BuildingRequestEvent.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.FormatTracker">
            <summary>The tracker for user-specified format information.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.BaseUriResolver">
            <summary>Returns the instance of entity tracker which tracks all the entities and links tracked by the context.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.Model">
            <summary>
            Gets the client model.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.UsingDataServiceCollection">
            <summary>
            Indicates whether user is using <see cref="T:Microsoft.OData.Client.DataServiceCollection`1" /> to track changes.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.EnableAtom">
            <summary>
            Internal flag for whether Atom support is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.InstanceAnnotations">
            <summary>The instance annotations in current context</summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceContext.MetadataAnnotationsDictionary">
            <summary>
            Gets the MetadataAnnotationsDictionary
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceContext.ClientEdmModelCache">
            <summary>
            Cache for client edm models by version.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceContext.ClientEdmModelCache.modelCache">
            <summary>A cache that maps a data service protocol version to its corresponding <see cref="T:Microsoft.OData.Client.ClientEdmModel"/>.</summary>
            <remarks>Note that it is initialized in a static ctor and must not be changed later to avoid threading issues.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ClientEdmModelCache.#cctor">
            <summary>
            Static constructor used to initialize modelCache.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceContext.ClientEdmModelCache.GetModel(Microsoft.OData.Client.ODataProtocolVersion)">
            <summary>
            Get the cached model for the specified max protocol version.
            </summary>
            <param name="maxProtocolVersion">The <see cref="T:Microsoft.OData.Client.ODataProtocolVersion"/> to get the cached model for.</param>
            <returns>The cached model for the <paramref name="maxProtocolVersion"/>.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceQuery`1">
            <summary>
            query object
            </summary>
            <typeparam name="TElement">type of object to materialize</typeparam>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQuery`1.expandMethodInfo">
            <summary>Method info for the v1 Expand method.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQuery`1.expandGenericMethodInfo">
            <summary>Method info for the generic version of the Expand method</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQuery`1.queryExpression">
            <summary>Linq Expression</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQuery`1.queryProvider">
            <summary>Linq Query Provider</summary>
        </member>
        <member name="F:Microsoft.OData.Client.DataServiceQuery`1.queryComponents">
            <summary>Uri, Projection, Version for translated query</summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.#ctor(System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceQueryProvider)">
            <summary>
            query object
            </summary>
            <param name="expression">expression for query</param>
            <param name="provider">query provider for query</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.#ctor(System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceQueryProvider,System.Boolean)">
            <summary>
            query object of a function which returns a collection of items
            </summary>
            <param name="expression">expression for query</param>
            <param name="provider">query provider for query</param>
            <param name="isComposable">whether this query is composable</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.GetKeyPath(System.String)">
            <summary>
            Gets a new URI string with keys.
            </summary>
            <param name="keyString">The string representing keys.</param>
            <returns>The new URI string with keys.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.CreateFunctionQuery``1(System.String,System.Boolean,Microsoft.OData.Client.UriOperationParameter[])">
            <summary>Creates a data service query for function which return collection of data.</summary>
            <typeparam name="T">The type returned by the query</typeparam>
            <param name="functionName">The function name.</param>
            <param name="isComposable">Whether this query is composable.</param>
            <param name="parameters">The function parameters.</param>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> instance that represents the function call.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.CreateFunctionQuerySingle``1(System.String,System.Boolean,Microsoft.OData.Client.UriOperationParameter[])">
            <summary>Creates a data service query for function which return single data.</summary>
            <typeparam name="T">The type returned by the query</typeparam>
            <param name="functionName">The function name.</param>
            <param name="isComposable">Whether this query is composable.</param>
            <param name="parameters">The function parameters.</param>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuerySingle`1" /> instance that represents the function call.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.AppendRequestUri(System.String)">
            <summary>
            Get a new URI string by adding <paramref name="nextSegment"/> to the original one.
            </summary>
            <param name="nextSegment">Name of the action.</param>
            <returns>The new URI string.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.GetPath(System.String)">
            <summary>
            Get a new URI path string by adding <paramref name="nextSegment"/> to the original one.
            </summary>
            <param name="nextSegment">The next segment to add to path.</param>
            <returns>The new URI path string.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.BeginExecute(System.AsyncCallback,System.Object)">
            <summary>Starts an asynchronous network operation that executes the query represented by this object instance.</summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</returns>
            <param name="callback">The delegate to invoke when the operation completes.</param>
            <param name="state">User defined object used to transfer state between the start of the operation and the callback defined by <paramref name="callback" />.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.ExecuteAsync">
            <summary>Starts an asynchronous network operation that executes the query represented by this object instance.</summary>
            <returns>A task that represents an <see cref="T:System.Collections.Generic.IEnumerable`1" />  that contains the results of the query operation.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.EndExecute(System.IAsyncResult)">
            <summary>Ends an asynchronous query request to a data service.</summary>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" />  that contains the results of the query operation.</returns>
            <param name="asyncResult">The pending asynchronous query request.</param>
            <exception cref="T:Microsoft.OData.Client.DataServiceQueryException">When the data service returns an HTTP 404: Resource Not Found error.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.GetAllPagesAsync">
            <summary>
            Asynchronously sends a request to get all items by auto iterating all pages
            </summary>
            <returns>A task that represents an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the results of the query operation.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.Execute">
            <summary>Executes the query and returns the results as a collection that implements IEnumerable.Not supported by the WCF Data Services 5.0 client for Silverlight.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> in which TElement represents the type of the query results.</returns>
            <exception cref="T:Microsoft.OData.Client.DataServiceQueryException">When the data service returns an HTTP 404: Resource Not Found error.</exception>
            <exception cref="T:System.NotSupportedException">When during materialization an object is encountered in the input stream that cannot be deserialized to an instance of TElement.</exception>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.GetAllPages">
            <summary>
            Get all items by auto iterating all pages, will send the request of first page as default, regardless if it's iterated.
            </summary>
            <returns>The items retrieved</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.Expand(System.String)">
            <summary>Expands a query to include entities from a related entity set in the query response.</summary>
            <returns>A new query that includes the requested $expand query option appended to the URI of the supplied query.</returns>
            <param name="path">The expand path in the format Orders/Order_Details.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.Expand``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Expands a query to include entities from a related entity set in the query response, where the related entity is of a specific type in a type hierarchy. </summary>
            <returns>Returns a <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> that with the expand option included.</returns>
            <param name="navigationPropertyAccessor">A lambda expression that indicates the navigation property that returns the entity set to include in the expanded query.</param>
            <typeparam name="TTarget">Target type of the last property on the expand path.</typeparam>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.IncludeTotalCount">
            <summary>Requests that the count of all entities in the entity set be returned inline with the query results.</summary>
            <returns>A new <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> object that has the inline count option set.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.AddQueryOption(System.String,System.Object)">
            <summary>Creates a new <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> with the query option set in the URI generated by the returned query.</summary>
            <returns>A new query that includes the requested query option appended to the URI of the supplied query</returns>
            <param name="name">The string value that contains the name of the query string option to add.</param>
            <param name="value">The object that contains the value of the query string option.</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.GetEnumerator">
            <summary>Executes the query and returns the results as a collection.</summary>
            <returns>A typed enumerator over the results in which TElement represents the type of the query results.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.ToString">
            <summary>Represents the URI of the query to the data service.</summary>
            <returns>A URI as string that represents the query to the data service for this <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Executes the query and returns the results as a collection.</summary>
            <returns>An enumerator over the query results.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.QueryComponents(Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            gets the UriTranslateResult for a the query
            </summary>
            <param name="model">The client model.</param>
            <returns>an instance of QueryComponents.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.ExecuteInternal">
            Synchronous methods not available
            <summary>
            Returns an IEnumerable from an Internet resource. 
            </summary>
            <returns>An IEnumerable that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.BeginExecuteInternal(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to an Internet resource.
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.EndExecuteInternal(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to an Internet resource.
            </summary>
            <param name="asyncResult">The pending request for a response. </param>
            <returns>An IEnumerable that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.Translate">
            <summary>
            gets the query components for the query after translating
            </summary>
            <returns>QueryComponents for query</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.ContinuePage(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Continues to asynchronously send a request to get items of the next page
            </summary>
            <param name="response">The response of the previous page</param>
            <returns>The items retrieved</returns>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.GetRestPages(System.Collections.Generic.IEnumerable{`0})">
            Synchronous methods not available
            <summary>
            Returns an IEnumerable from an Internet resource. 
            </summary>
            <param name="response">The response of the previous page</param>
            <returns>An IEnumerable that contains the response from the Internet resource.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuery`1.ElementType">
            <summary>Returns the type of the object used in the template to create the <see cref="T:Microsoft.OData.Client.DataServiceQuery`1" /> instance.</summary>
            <returns>Returns <see cref="T:System.Type" /> representing the type used in the template when the query is created.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuery`1.Expression">
            <summary>Represents an expression containing the query to the data service.</summary>
            <returns>A <see cref="T:System.Linq.Expressions.Expression" /> object representing the query.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuery`1.Provider">
            <summary>Represents the query provider instance.</summary>
            <returns>A <see cref="T:System.Linq.IQueryProvider" /> representing the data source provider.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuery`1.RequestUri">
            <summary>Get the URI for the query.</summary>
            <returns>The URI of the request.</returns>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuery`1.Context">
            <summary>Context associated with this query.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuery`1.IsComposable">
            <summary>
            Whether this query is composable
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuery`1.IsFunction">
            <summary>
            The flag of whether this query is a function.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.DataServiceQuery`1.Plan">
            <summary>The ProjectionPlan for the request (if precompiled in a previous page).</summary>
        </member>
        <member name="T:Microsoft.OData.Client.DataServiceQuery`1.DataServiceOrderedQuery">
            <summary>
            Ordered DataServiceQuery which implements IOrderedQueryable.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.DataServiceOrderedQuery.#ctor(System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceQueryProvider)">
            <summary>
            constructor
            </summary>
            <param name="expression">expression for query</param>
            <param name="provider">query provider for query</param>
        </member>
        <member name="M:Microsoft.OData.Client.DataServiceQuery`1.DataServiceOrderedQuery.#ctor(System.Linq.Expressions.Expression,Microsoft.OData.Client.DataServiceQueryProvider,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="expression">expression for query</param>
            <param name="provider">query provider for query</param>
            <param name="isComposable">whether this query is composable</param>
        </member>
        <member name="T:Microsoft.OData.Client.WebUtil">
            <summary>web utility functions</summary>
        </member>
        <member name="F:Microsoft.OData.Client.WebUtil.DefaultBufferSizeForStreamCopy">
            <summary>
            Default buffer size used for stream copy.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.WebUtil.dataServiceCollectionAvailable">
            <summary>
            Whether DataServiceCollection&lt;&gt; type is available. 
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.WebUtil.getDefaultValueMethodInfo">
            <summary>Method info for GetDefaultValue&lt;T&gt;.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.CopyStream(System.IO.Stream,System.IO.Stream,System.Byte[]@)">
            <summary>copy from one stream to another</summary>
            <param name="input">input stream</param>
            <param name="output">output stream</param>
            <param name="refBuffer">reusable buffer</param>
            <returns>count of copied bytes</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.GetHttpWebResponse(System.InvalidOperationException,Microsoft.OData.Core.IODataResponseMessage@)">
            <summary>get response object from possible WebException</summary>
            <param name="exception">exception to probe</param>
            <param name="response">http web respose object from exception</param>
            <returns>an instance of InvalidOperationException.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.SuccessStatusCode(System.Net.HttpStatusCode)">
            <summary>is this a success status code</summary>
            <param name="status">status code</param>
            <returns>true if status is between 200-299</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.IsCLRTypeCollection(System.Type,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Checks if the provided type is a collection type (i.e. it implements ICollection and the collection item type is not an entity).
            </summary>
            <param name="type">Type being checked.</param>
            <param name="model">The client model.</param>
            <returns>True if the CLR type is a collection compatible type. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.IsWireTypeCollection(System.String)">
            <summary>
            Checks if the provided type name is a name of a collection type.
            </summary>
            <param name="wireTypeName">Type name read from the payload.</param>
            <returns>true if <paramref name="wireTypeName"/> is a name of a collection type otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.GetCollectionItemWireTypeName(System.String)">
            <summary>
            Returns collection item type name or null if the provided type name is not a collection.
            </summary>
            <param name="wireTypeName">Collection type name read from payload.</param>
            <returns>Collection item type name or null if not a collection.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.GetBackingTypeForCollectionProperty(System.Type)">
            <summary>
            Resolves and creates if necessary a backing type for the <paramref name="collectionPropertyType"/>.
            </summary>
            <param name="collectionPropertyType">Type of a collection property as defined by the user - can be just an interface or generic type.</param>
            <returns>Resolved concrete type that can be instantiated and will back the collection property. Can be the <paramref name="collectionPropertyType"/> type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.CheckArgumentNull``1(``0,System.String)">
            <summary>
            Checks the argument value for null and throw ArgumentNullException if it is null
            </summary>
            <typeparam name="T">type of the argument</typeparam>
            <param name="value">argument whose value needs to be checked</param>
            <param name="parameterName">name of the argument</param>
            <returns>returns the argument back</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.ValidateCollection(System.Type,System.Object,System.String,System.Boolean)">
            <summary>
            Checks if the collection is valid. Throws if the collection is not valid.
            </summary>
            <param name="collectionItemType">The type of the collection item. Can not be null.</param>
            <param name="propertyValue">Collection instance to be validated.</param>
            <param name="propertyName">The name of the property being serialized (for exception messages). Can be null if the type is not a property.</param>
            <param name="isDynamicProperty">Whether this collection property is a dynamic property</param>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.ValidatePrimitiveCollectionItem(System.Object,System.String,System.Type)">
            <summary>
            Checks if the value of a primitive collection item is valid. Throws if it finds the value invalid.
            </summary>
            <param name="itemValue">The value of the collection item.</param>
            <param name="propertyName">The name of the collection property being serialized. Can be null.</param>
            <param name="collectionItemType">The type of the collection item as declared by the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.ValidateComplexCollectionItem(System.Object,System.String,System.Type)">
            <summary>
            Checks if the value of a complex collection item is valid. Throws if it finds the value invalid.
            </summary>
            <param name="itemValue">The value of the collection item.</param>
            <param name="propertyName">The name of the collection property being serialized. Can be null if the type is not a property.</param>
            <param name="collectionItemType">The type of the collection item as declared by the collection.</param>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.ValidateIdentityValue(System.String)">
            <summary>
            Validates the value of the identity, the atom:id or OData-EntityId
            </summary>
            <param name="identityValue">The value to validate</param>
            <returns>an absolute Uri</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.ValidateLocationHeader(System.String)">
            <summary>
            Validates the value of the 'Location' response header.
            </summary>
            <param name="location">the value as seen on the wire.</param>
            <returns>an absolute Uri</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.GetPreferHeaderAndRequestVersion(Microsoft.OData.Client.DataServiceResponsePreference,System.Version@)">
            <summary>
            Determines the value of the Prefer header based on the response preference settings. Also modifies the request version as necessary.
            </summary>
            <param name="responsePreference">The response preference setting for the request.</param>
            <param name="requestVersion">The request version so far, this might be modified (raised) if necessary due to response preference being applied.</param>
            <returns>The value of the Prefer header to apply to the request.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.RaiseVersion(System.Version@,System.Version)">
            <summary>
            Raises the version specified to the new minimal version (if it's lower than the current one)
            </summary>
            <param name="version">The version to be raised.</param>
            <param name="minimalVersion">The minimal version needed.</param>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.IsDataServiceCollectionType(System.Type)">
            <summary>
            Checks if the given type is DataServiceCollection&lt;&gt; type.
            </summary>
            <param name="t">Type to be checked.</param>
            <returns>true if the provided type is DataServiceCollection&lt;&gt; or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.GetDataServiceCollectionOfT(System.Type[])">
            <summary>
            Creates an instance of DataServiceCollection&lt;&gt; class using provided types.
            </summary>
            <param name="typeArguments">Types to be used for creating DataServiceCollection&lt;&gt; object.</param>
            <returns>
            Instance of DataServiceCollection&lt;&gt; class created using provided types or null if DataServiceCollection&lt;&gt;
            type is not avaiable.
            </returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.GetDefaultValue(System.Type)">
            <summary>
            Returns the default value for the given type
            </summary>
            <param name="type">type to get the default value</param>
            <returns>returns the default value for <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.GetDefaultValue``1">
            <summary>
            Returns the default value for the given type
            </summary>
            <typeparam name="T">type to get the default value</typeparam>
            <returns>returns the default value for <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.DisposeMessage(Microsoft.OData.Core.IODataResponseMessage)">
            <summary>
            Dispose the message if it implements IDisposable.
            </summary>
            <param name="responseMessage">IODataResponseMessage to dispose.</param>
        </member>
        <member name="M:Microsoft.OData.Client.WebUtil.GetDataServiceCollectionOfTType">
            <summary>
            Forces loading WindowsBase assembly. If WindowsBase assembly is not present JITter will throw an exception. 
            This method MUST NOT be inlined otherwise we won't be able to catch the exception by JITter in the caller.
            </summary>
            <returns>typeof(DataServiceCollection&lt;&gt;)</returns>
        </member>
        <member name="P:Microsoft.OData.Client.WebUtil.DataServiceCollectionAvailable">
            <summary>
            Returns true if DataServiceCollection&lt;&gt; type is available or false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.WebUtil.ValidatedNotNullAttribute">
            <summary>
            A workaround to a problem with FxCop which does not recognize the CheckArgumentNotNull method
            as the one which validates the argument is not null.
            </summary>
            <remarks>This has been suggested as a workaround in msdn forums by the VS team. Note that even though this is production code
            the attribute has no effect on anything else.</remarks>
        </member>
        <member name="T:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation">
            <summary>
            Represents an EDM property for client types and caches methods for the propertyInfo.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.EdmProperty">
            <summary>Back reference to the EdmProperty this annotation is part of.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.PropertyName">
            <summary>property name for debugging</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.PropertyInfo">
            <summary>PropertyInfo in CLR type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.NullablePropertyType">
            <summary>Exact property type; possibly nullable but not necessarily so.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.PropertyType">
            <summary>type of the property</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.DictionaryValueType">
            <summary>what is the dictionary value type</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.DeclaringClrType">
            <summary>what type was this property declared on?</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.IsKnownType">
            <summary>
            Is this a known primitive/reference type or an entity/complex/collection type?
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.propertyGetter">
            <summary>property getter</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.propertySetter">
            <summary>property setter</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.dictionarySetter">
            <summary>"set_Item" method supporting IDictionary properties</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.collectionAdd">
            <summary>"Add" method supporting ICollection&lt;&gt; properties</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.collectionRemove">
            <summary>"Remove" method supporting ICollection&lt;&gt; properties</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.collectionContains">
            <summary>"Contains" method supporting ICollection&lt;&gt; properties</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.collectionClear">
            <summary>"Clear" method supporting ICollection&lt;&gt; properties</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.collectionGenericType">
            <summary>ICollection&lt;&gt; generic type</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.isPrimitiveOrEnumOrComplexCollection">
            <summary>cached value for IsPrimitiveOrEnumOrComplexCollection property</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.isSpatialType">
            <summary>cached value of IsGeographyOrGeometry property</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.mimeTypeProperty">
            <summary>The other property in this type that holds the MIME type for this one</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.#ctor(Microsoft.OData.Edm.IEdmProperty,System.Reflection.PropertyInfo,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            constructor
            </summary>
            <param name="edmProperty">Back reference to the EdmProperty this annotation is part of.</param>
            <param name="propertyInfo">propertyInfo instance.</param>
            <param name="model">The client model.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.GetValue(System.Object)">
            <summary>
            get property value from an object
            </summary>
            <param name="instance">object to get the property value from</param>
            <returns>property value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.RemoveValue(System.Object,System.Object)">
            <summary>
            remove a item from the collection instance
            </summary>
            <param name="instance">collection</param>
            <param name="value">item to remove</param>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.SetValue(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            set property value on an object
            </summary>
            <param name="instance">object to set the property value on</param>
            <param name="value">property value</param>
            <param name="propertyName">used for open type</param>
            <param name="allowAdd">allow add to a collection if available, else allow setting collection property</param>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.ClearBackingICollectionInstance(System.Object)">
            <summary>
            Clears <paramref name="collectionInstance"/>.
            </summary>
            <param name="collectionInstance">ICollection instance that needs to be cleared.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.AddValueToBackingICollectionInstance(System.Object,System.Object)">
            <summary>
            Adds value to a collection.
            </summary>
            <param name="collectionInstance">ICollection Instance to add <paramref name="value"/> to.</param>
            <param name="value">Value to be added to <paramref name="collectionInstance" />.</param>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.Model">
            <summary>
            Gets the client model.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.MimeTypeProperty">
            <summary>The other property in this type that holds the MIME type for this one</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.EntityCollectionItemType">
            <summary>what is the nested collection element</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.IsEntityCollection">
            <summary>Is this property a collection of entities?</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.PrimitiveOrComplexCollectionItemType">
            <summary>Type of items in the primitive or complex collection.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.IsEnumType">
            <summary>Returns if this property is enum type.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.IsPrimitiveOrEnumOrComplexCollection">
            <summary>Is this property a collection of primitive or enum or complex types?</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.IsSpatialType">
            <summary>Returns true if the type of property is a Geography or Geometry type, otherwise returns false.</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.IsDictionary">
            <summary>Is this property a dictionary?</summary>
        </member>
        <member name="P:Microsoft.OData.Client.Metadata.ClientPropertyAnnotation.IsStreamLinkProperty">
            <summary>Returns true if this property is a stream link property, otherwise false.</summary>
        </member>
        <member name="T:Microsoft.OData.Client.Metadata.ClientTypeUtil">
            <summary>
            Utility methods for client types.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeUtil.EmptyPropertyInfoArray">
            <summary>A static empty PropertyInfo array.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.SetClientTypeAnnotation(Microsoft.OData.Edm.IEdmModel,Microsoft.OData.Edm.IEdmType,Microsoft.OData.Client.Metadata.ClientTypeAnnotation)">
            <summary>
            Sets the single instance of <see cref="T:Microsoft.OData.Client.Metadata.ClientTypeAnnotation"/> on the given instance of <paramref name="edmType"/>.
            </summary>
            <param name="model">The model the <paramref name="edmType"/> belongs to.</param>
            <param name="edmType">IEdmType instance to set the annotation on.</param>
            <param name="annotation">The annotation to set</param>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetClientTypeAnnotation(Microsoft.OData.Client.ClientEdmModel,System.Type)">
            <summary>
            Gets the ClientTypeAnnotation for the given type.
            </summary>
            <param name="model">The model.</param>
            <param name="type">Type for which the annotation needs to be returned.</param>
            <returns>An instance of ClientTypeAnnotation containing metadata about the given type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetClientTypeAnnotation(Microsoft.OData.Edm.IEdmModel,Microsoft.OData.Edm.IEdmType)">
            <summary>
            Gets the single instance of <see cref="T:Microsoft.OData.Client.Metadata.ClientTypeAnnotation"/> from the given instance of <paramref name="edmType"/>.
            </summary>
            <param name="model">The model the <paramref name="edmType"/> belongs to.</param>
            <param name="edmType">IEdmType instance to get the annotation.</param>
            <returns>Returns the single instance of <see cref="T:Microsoft.OData.Client.Metadata.ClientTypeAnnotation"/> from the given instance of <paramref name="edmType"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.SetClientPropertyAnnotation(Microsoft.OData.Edm.IEdmProperty,Microsoft.OData.Client.Metadata.ClientPropertyAnnotation)">
            <summary>
            Sets the given instance of <paramref name="annotation"/> to the given instance of <paramref name="edmProperty"/>.
            </summary>
            <param name="edmProperty">IEdmProperty instance to set the annotation.</param>
            <param name="annotation">Annotation instance to set.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetClientPropertyAnnotation(Microsoft.OData.Edm.IEdmModel,Microsoft.OData.Edm.IEdmProperty)">
            <summary>
            Gets the single instance of ClientPropertyAnnotation from the given instance of <paramref name="edmProperty"/>.
            </summary>
            <param name="model">The model.</param>
            <param name="edmProperty">IEdmProperty instance to get the annotation.</param>
            <returns>Returns the single instance of ClientPropertyAnnotation from the given instance of <paramref name="edmProperty"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetClientTypeAnnotation(Microsoft.OData.Edm.IEdmModel,Microsoft.OData.Edm.IEdmProperty)">
            <summary>
            Gets the instance of ClientTypeAnnotation from the given instance of <paramref name="edmProperty"/>.
            </summary>
            <param name="model">The model.</param>
            <param name="edmProperty">IEdmProperty instance to get the annotation.</param>
            <returns>Returns the instance of ClientTypeAnnotation from the given instance of <paramref name="edmProperty"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.ToEdmTypeReference(Microsoft.OData.Edm.IEdmType,System.Boolean)">
            <summary>
            Returns the corresponding edm type reference for the given edm type.
            </summary>
            <param name="edmType">EdmType instance.</param>
            <param name="isNullable">A boolean value indicating whether the clr type of this edm type is nullable</param>
            <returns>Returns the corresponding edm type reference for the given edm type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.FullName(Microsoft.OData.Edm.IEdmType)">
            <summary>
            Returns the full name for the given edm type
            </summary>
            <param name="edmType">EdmType instance.</param>
            <returns>the full name of the edmType.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetMethodForGenericType(System.Type,System.Type,System.String,System.Type@)">
            <summary>
            Returns MethodInfo instance for a generic type retrieved by using <paramref name="methodName"/> and gets 
            element type for the provided <paramref name="genericTypeDefinition"/>.
            </summary>
            <param name="propertyType">starting type</param>
            <param name="genericTypeDefinition">the generic type definition to find</param>
            <param name="methodName">the method to search for</param>
            <param name="type">the element type for <paramref name="genericTypeDefinition" /> if found</param>
            <returns>element types</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetAddToCollectionDelegate(System.Type)">
            <summary>Gets a delegate that can be invoked to add an item to a collection of the specified type.</summary>
            <param name='listType'>Type of list to use.</param>
            <returns>The delegate to invoke.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetAddToCollectionMethod(System.Type,System.Type@)">
            <summary>
            Gets the Add method to add items to a collection of the specified type.
            </summary>
            <param name="collectionType">Type for the collection.</param>
            <param name="type">The element type in the collection if found; null otherwise.</param>
            <returns>The method to invoke to add to a collection of the specified type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetImplementationType(System.Type,System.Type)">
            <summary>
            get concrete type that implements the genericTypeDefinition
            </summary>
            <param name="type">starting type</param>
            <param name="genericTypeDefinition">the generic type definition to find</param>
            <returns>concrete type that implementats the generic type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.TypeIsEntity(System.Type,Microsoft.OData.Client.ClientEdmModel)">
            <summary>
            Is the type an Entity Type?
            </summary>
            <param name="t">Type to examine</param>
            <param name="model">The client model.</param>
            <returns>bool indicating whether or not entity type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.TypeOrElementTypeIsEntity(System.Type)">
            <summary>
            Is the type or element type (in the case of nullableOfT or IEnumOfT) a Entity Type?
            </summary>
            <param name="type">Type to examine</param>
            <returns>bool indicating whether or not entity type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.IsDataServiceCollection(System.Type)">
            <summary>Checks whether the specified type is a DataServiceCollection type (or inherits from one).</summary>
            <param name='type'>Type to check.</param>
            <returns>true if the type inherits from DataServiceCollection; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.CanAssignNull(System.Type)">
            <summary>Whether a variable of <paramref name="type"/> can be assigned null.</summary>
            <param name="type">Type to check.</param>
            <returns>true if a variable of type <paramref name="type"/> can be assigned null; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetPropertiesOnType(System.Type,System.Boolean)">
            <summary>Returns the list of properties defined on <paramref name="type"/>.</summary>
            <param name="type">Type instance in question.</param>
            <param name="declaredOnly">True to to get the properties declared on <paramref name="type"/>; false to get all properties defined on <paramref name="type"/>.</param>
            <returns>Returns the list of properties defined on <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetKeyPropertiesOnType(System.Type)">
            <summary>
            Returns the list of key properties defined on <paramref name="type"/>; null if <paramref name="type"/> is complex.
            </summary>
            <param name="type">Type in question.</param>
            <returns>Returns the list of key properties defined on <paramref name="type"/>; null if <paramref name="type"/> is complex.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetKeyPropertiesOnType(System.Type,System.Boolean@)">
            <summary>
            Returns the list of key properties defined on <paramref name="type"/>; null if <paramref name="type"/> is complex.
            </summary>
            <param name="type">Type in question.</param>
            <param name="hasProperties">true if <paramref name="type"/> has any (declared or inherited) properties; otherwise false.</param>
            <returns>Returns the list of key properties defined on <paramref name="type"/>; null if <paramref name="type"/> is complex.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetMemberType(System.Reflection.MemberInfo)">
            <summary>Gets the type of the specified <paramref name="member"/>.</summary>
            <param name="member">Member to get type of (typically PropertyInfo or FieldInfo).</param>
            <returns>The type of property or field type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetServerDefinedName(System.Reflection.PropertyInfo)">
            <summary>Gets the server defined name in <see cref="T:Microsoft.OData.Client.OriginalNameAttribute"/> of the specified <paramref name="propertyInfo"/>.</summary>
            <param name="propertyInfo">Member to get server defined name of.</param>
            <returns>Server defined name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetServerDefinedName(System.Reflection.MemberInfo)">
            <summary>Gets the server defined name in <see cref="T:Microsoft.OData.Client.OriginalNameAttribute"/> of the specified <paramref name="memberInfo"/>.</summary>
            <param name="memberInfo">Member to get server defined name of.</param>
            <returns>The server defined name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetServerDefinedTypeName(System.Type)">
            <summary>Gets the server defined type name in <see cref="T:Microsoft.OData.Client.OriginalNameAttribute"/> of the specified <paramref name="type"/>.</summary>
            <param name="type">Member to get server defined type name of.</param>
            <returns>The server defined type name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetServerDefinedTypeFullName(System.Type)">
            <summary>Gets the full server defined type name in <see cref="T:Microsoft.OData.Client.OriginalNameAttribute"/> of the specified <paramref name="type"/>.</summary>
            <param name="type">Member to get server defined name of.</param>
            <returns>The server defined type full name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetClientFieldName(System.Type,System.String)">
            <summary>
            Gets the clr name according to server defined name in the specified <paramref name="t"/>.
            </summary>
            <param name="t">Member to get clr name for.</param>
            <param name="serverDefinedName">name from server.</param>
            <returns>Client clr name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetClientPropertyInfo(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the clr name according to server defined name in the specified <paramref name="t"/>.
            </summary>
            <param name="t">The type used to get the client PropertyInfo.</param>
            <param name="serverDefinedName">Name from server.</param>
            <param name="ignoreMissingProperties">Flag to ignore missing properties.</param>
            <returns>Client PropertyInfo, or null if the method is not found.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetClientPropertyName(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the clr name according to server defined name in the specified <paramref name="t"/>.
            </summary>
            <param name="t">The type used to get the client property name.</param>
            <param name="serverDefinedName">Name from server.</param>
            <param name="ignoreMissingProperties">Flag to ignore missing properties.</param>
            <returns>Client property name, or null if the property is not found.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetClientMethod(System.Type,System.String,System.Type[])">
            <summary>
            Get a client method with the specified server side name.
            </summary>
            <param name="t">Client type used to search method.</param>
            <param name="serverDefinedName">Method name on server side.</param>
            <param name="parameters">An array of System.Type objects of the parameters for the method to get</param>
            <returns>Client MethodInfo, or null if the method is not found.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.GetEnumValuesString(System.String,System.Type)">
            <summary>
            Get the enum string split by "," with their server side names
            </summary>
            <param name="enumString">enum string with names in client side</param>
            <param name="enumType">the source enum type</param>
            <returns>The enum string split by "," with their server side names</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.IsKeyProperty(System.Reflection.PropertyInfo,Microsoft.OData.Client.KeyAttribute)">
            <summary>
            Returns the KeyKind if <paramref name="propertyInfo"/> is declared as a key in <paramref name="dataServiceKeyAttribute"/> or it follows the key naming convension.
            </summary>
            <param name="propertyInfo">Property in question.</param>
            <param name="dataServiceKeyAttribute">DataServiceKeyAttribute instance.</param>
            <returns>Returns the KeyKind if <paramref name="propertyInfo"/> is declared as a key in <paramref name="dataServiceKeyAttribute"/> or it follows the key naming convension.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.IsConstructedGeneric(System.Type,System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> is a 
            closed constructed type of the generic type.
            </summary>
            <param name="type">Type to check.</param>
            <param name="genericTypeDefinition">Generic type for checkin.</param>
            <returns>true if <paramref name="type"/> is a constructed type of <paramref name="genericTypeDefinition"/>.</returns>
            <remarks>The check is an immediate check; no inheritance rules are applied.</remarks>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeUtil.IsOverride(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the <paramref name="propertyInfo"/> declared on <paramref name="type"/>
            overrides a (virtual/abstract) property of a base type.
            </summary>
            <param name="type">The declaring type of the property.</param>
            <param name="propertyInfo">The property to check.</param>
            <returns>true if <paramref name="propertyInfo"/> overrides a property on a base types; otherwise false.</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Metadata.ClientTypeUtil.KeyKind">
            <summary>
            Enumeration for the kind of key
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeUtil.KeyKind.NotKey">
            <summary>If this is not a key </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeUtil.KeyKind.Id">
            <summary> If the key property name was equal to ID </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeUtil.KeyKind.TypeNameId">
            <summary> If the key property name was equal to TypeName+ID </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeUtil.KeyKind.AttributedKey">
            <summary> if the key property was attributed </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Metadata.ClientTypeCache">
            <summary>
            Caches wire type names and their mapped client CLR types.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeCache.namedTypes">
            <summary>cache &lt;T&gt; and wireName to mapped type</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeCache.ResolveFromName(System.String,System.Type)">
            <summary>
            resolve the wireName/userType pair to a CLR type
            </summary>
            <param name="wireName">type name sent by server</param>
            <param name="userType">type passed by user or on propertyType from a class</param>
            <returns>mapped clr type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeCache.ResolveSubclass(System.String,System.Type,System.Type,System.Type@)">
            <summary>
            is the type a visible subclass with correct name
            </summary>
            <param name="wireClassName">type name from server</param>
            <param name="userType">the type from user for materialization or property type</param>
            <param name="type">type being tested</param>
            <param name="existing">the previously discovered matching type</param>
            <exception cref="T:System.InvalidOperationException">if the mapping is ambiguous</exception>
        </member>
        <member name="T:Microsoft.OData.Client.Metadata.ClientTypeCache.TypeName">
            <summary>type + wireName combination</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeCache.TypeName.Type">
            <summary>type</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Metadata.ClientTypeCache.TypeName.Name">
            <summary>type name from server</summary>
        </member>
        <member name="T:Microsoft.OData.Client.Metadata.ClientTypeCache.TypeNameEqualityComparer">
            <summary>equality comparer for TypeName</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeCache.TypeNameEqualityComparer.Equals(Microsoft.OData.Client.Metadata.ClientTypeCache.TypeName,Microsoft.OData.Client.Metadata.ClientTypeCache.TypeName)">
            <summary>equality comparer for TypeName</summary>
            <param name="x">left type</param>
            <param name="y">right type</param>
            <returns>true if x and y are equal</returns>
        </member>
        <member name="M:Microsoft.OData.Client.Metadata.ClientTypeCache.TypeNameEqualityComparer.GetHashCode(Microsoft.OData.Client.Metadata.ClientTypeCache.TypeName)">
            <summary>compute hashcode for TypeName</summary>
            <param name="obj">object to compute hashcode for</param>
            <returns>computed hashcode</returns>
        </member>
        <member name="T:Microsoft.OData.Client.Providers.EdmComplexTypeWithDelayLoadedProperties">
            <summary>
            An <see cref="T:Microsoft.OData.Edm.IEdmComplexType"/> implementation that supports delay-loading of properties.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Providers.EdmComplexTypeWithDelayLoadedProperties.lockObject">
            <summary>The lock object for the delayed property loading.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Providers.EdmComplexTypeWithDelayLoadedProperties.propertyLoadAction">
            <summary>An action that is used to create the properties for this type.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Providers.EdmComplexTypeWithDelayLoadedProperties.#ctor(System.String,System.String,Microsoft.OData.Edm.IEdmComplexType,System.Boolean,System.Boolean,System.Action{Microsoft.OData.Client.Providers.EdmComplexTypeWithDelayLoadedProperties})">
            <summary>
            Initializes a new instance of the EdmComplexTypeWithDelayLoadedProperties class.
            </summary>
            <param name="namespaceName">Namespace the entity belongs to.</param>
            <param name="name">Name of the entity.</param>
            <param name="baseType">The base type of this entity type.</param>
            <param name="isAbstract">Denotes an entity that cannot be instantiated.</param>
            <param name="isOpen">Denotes if the type is open.</param>
            <param name="propertyLoadAction">An action that is used to create the properties for this type.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Providers.EdmComplexTypeWithDelayLoadedProperties.EnsurePropertyLoaded">
            <summary>
            Ensures that the properties have been loaded and can be used.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Providers.EdmComplexTypeWithDelayLoadedProperties.DeclaredProperties">
            <summary>
            Gets the properties declared immediately within this type.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Providers.EdmEntityTypeWithDelayLoadedProperties">
            <summary>
            An <see cref="T:Microsoft.OData.Edm.IEdmEntityType"/> implementation that supports delay-loading of properties.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Providers.EdmEntityTypeWithDelayLoadedProperties.lockObject">
            <summary>The lock object for the delayed property loading.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Providers.EdmEntityTypeWithDelayLoadedProperties.propertyLoadAction">
            <summary>An action that is used to create the properties for this type.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Providers.EdmEntityTypeWithDelayLoadedProperties.#ctor(System.String,System.String,Microsoft.OData.Edm.IEdmEntityType,System.Boolean,System.Boolean,System.Boolean,System.Action{Microsoft.OData.Client.Providers.EdmEntityTypeWithDelayLoadedProperties})">
            <summary>
            Initializes a new instance of the EdmEntityTypeWithDelayLoadedProperties class.
            </summary>
            <param name="namespaceName">Namespace the entity belongs to.</param>
            <param name="name">Name of the entity.</param>
            <param name="baseType">The base type of this entity type.</param>
            <param name="isAbstract">Denotes an entity that cannot be instantiated.</param>
            <param name="isOpen">Denotes if the type is open.</param>
            <param name="hasStream">Denotes if the type is a media entity.</param>
            <param name="propertyLoadAction">An action that is used to create the properties for this type.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Providers.EdmEntityTypeWithDelayLoadedProperties.EnsurePropertyLoaded">
            <summary>
            Ensures that the properties have been loaded and can be used.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Providers.EdmEntityTypeWithDelayLoadedProperties.DeclaredKey">
            <summary>
            Gets or sets the structural properties of the entity type that make up the entity key.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Providers.EdmEntityTypeWithDelayLoadedProperties.DeclaredProperties">
            <summary>
            Gets the properties declared immediately within this type.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Providers.EdmEnumTypeWithDelayLoadedMembers">
            <summary>
            An <see cref="T:Microsoft.OData.Edm.IEdmEnumType"/> implementation that supports delay-loading of enumeration members.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.Providers.EdmEnumTypeWithDelayLoadedMembers.lockObject">
            <summary>The lock object for the delayed property loading.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.Providers.EdmEnumTypeWithDelayLoadedMembers.memberLoadAction">
            <summary>An action that is used to create the members for this type.</summary>
        </member>
        <member name="M:Microsoft.OData.Client.Providers.EdmEnumTypeWithDelayLoadedMembers.#ctor(System.String,System.String,Microsoft.OData.Edm.IEdmPrimitiveType,System.Boolean,System.Action{Microsoft.OData.Client.Providers.EdmEnumTypeWithDelayLoadedMembers})">
            <summary>
            Initializes a new instance of the EdmEnumTypeWithDelayLoadedMembers class.
            </summary>
            <param name="namespaceName">Namespace the enumeration belongs to.</param>
            <param name="name">Name of the enumeration Type.</param>
            <param name="underlyingType">The enum's underlying type, one of Edm.Byte, Edm.SByte, Edm.Int16, Edm.Int32, or Edm.Int64.</param>
            <param name="isFlags">The isFlags or not</param>
            <param name="memberLoadAction">An action that is used to create the members for this enum type.</param>
        </member>
        <member name="M:Microsoft.OData.Client.Providers.EdmEnumTypeWithDelayLoadedMembers.EnsureMemberLoaded">
            <summary>
            Ensures that the properties have been loaded and can be used.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Providers.EdmEnumTypeWithDelayLoadedMembers.Members">
            <summary>
            Gets the enum members immediately within this type.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.XmlConstants">
            <summary>
            Class that contains all the constants for various schemas.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ClrServiceInitializationMethodName">
            <summary>"InitializeService" method name for service initialize.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpContentID">
            <summary>id of the corresponding body</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpContentLength">
            <summary>byte-length of the corresponding body</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpContentType">
            <summary>mime-type of the corresponding body</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpContentDisposition">
            <summary>content disposition of the response (a hint how to handle the response)</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpODataVersion">
            <summary>'OData-Version' - HTTP header name for OData version.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpODataMaxVersion">
            <summary>'OData-MaxVersion' - HTTP header name for maximum understood OData version.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpPrefer">
            <summary>
            'Prefer' - HTTP request header name for client preferences. 
            Refer to: http://tools.ietf.org/id/draft-snell-http-prefer-02.txt for details.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpPreferReturnNoContent">
            <summary>Return no content Prefer header hint value.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpPreferReturnContent">
            <summary>Return content Prefer header hint value.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpCacheControlNoCache">
            <summary>'no-cache' - HTTP value for Cache-Control header.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpCharsetParameter">
            <summary>'charset' - HTTP parameter name.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpMethodGet">
            <summary>HTTP method name for GET requests.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpMethodPost">
            <summary>HTTP method name for POST requests.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpMethodPut">
            <summary> Http Put Method name - basically used for updating resource.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpMethodDelete">
            <summary>HTTP method name for delete requests.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpMethodPatch">
            <summary>HTTP method name for PATCH requests.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringExpand">
            <summary>HTTP query string parameter value for expand.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringFilter">
            <summary>HTTP query string parameter value for filtering.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringOrderBy">
            <summary>HTTP query string parameter value for ordering.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringSkip">
            <summary>HTTP query string parameter value for skipping elements.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringTop">
            <summary>HTTP query string parameter value for limiting the number of elements.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringQueryCount">
            <summary>HTTP query string parameter value for counting query result set, $count=true</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringSkipToken">
            <summary>HTTP query string parameter value for skipping results based on paging.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SkipTokenPropertyPrefix">
            <summary>Property prefix for the skip token property in expanded results for a skip token</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringSegmentCount">
            <summary>HTTP query string parameter value for counting query result set</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringSelect">
            <summary>HTTP query string parameter value for projection.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringFormat">
            <summary>HTTP query string parameter for specifying the requested content-type of the response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringCallback">
            <summary>HTTP query string parameter for specifying the a callback function name for JSONP (JSON padding).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQueryStringId">
            <summary>HTTP query string parameter for specifying the a entity id.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpQValueParameter">
            <summary>'q' - HTTP q-value parameter name.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpXMethod">
            <summary>'X-HTTP-Method' - HTTP header name for requests that want to tunnel a method through POST.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpRequestAccept">
            <summary>HTTP name for Accept header</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpRequestAcceptCharset">
            <summary>HTTP name for Accept-Charset header</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpRequestIfMatch">
            <summary>HTTP name for If-Match header</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpRequestIfNoneMatch">
            <summary>HTTP name for If-None-Match header</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpUserAgent">
            <summary>HTTP name for User-Agent header</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpMultipartBoundary">
            <summary>multi-part keyword in content-type to identify batch separator</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XContentTypeOptions">
            <summary>'X-Content-Type-Options' - HTTP header for Internet Explorer 8 and 9 to specify options for content-type handling.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XContentTypeOptionNoSniff">
            <summary>An 'X-Content-Type-Options' HTTP header argument to instruct IE8/9 not to sniff the content and instead display it according to the content-type header.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpMultipartBoundaryBatch">
            <summary>multi-part mixed batch separator</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpMultipartBoundaryChangeSet">
            <summary>multi-part mixed changeset separator</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpResponseAllow">
            <summary>'Allow' - HTTP response header for allowed verbs.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpResponseCacheControl">
            <summary>HTTP name for Cache-Control header.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpResponseETag">
            <summary>HTTP name for ETag header</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpResponseLocation">
            <summary>HTTP name for location header</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpODataEntityId">
            <summary>HTTP name for OData-EntityId header</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpResponseStatusCode">
            <summary>HTTP name for Status-Code header</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpMultipartBoundaryBatchResponse">
            <summary>multi-part mixed batch separator for response stream</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpMultipartBoundaryChangesetResponse">
            <summary>multi-part mixed changeset separator</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpContentTransferEncoding">
            <summary>Content-Transfer-Encoding header for batch requests.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpVersionInBatching">
            <summary>Http Version in batching requests and response.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpAnyETag">
            <summary>To checks if the resource exists or not.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpWeakETagPrefix">
            <summary>Weak etags in HTTP must start with W/.
            Look in http://www.ietf.org/rfc/rfc2616.txt?number=2616 section 14.19 for more information.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpAccept">
            <summary>The mime type that client wants the response to be in.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpAcceptCharset">
            <summary>The character set the client wants the response to be in.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpCookie">
            <summary>The name of the Cookie HTTP header</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.HttpSlug">
            <summary>The Slug header name. Used by ATOM to hint the server on which MR is being POSTed.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeAny">
            <summary>MIME type for requesting any media type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeApplicationOctetStream">
            <summary>MIME type general binary bodies (http://www.iana.org/assignments/media-types/application/).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeApplicationType">
            <summary>'application' - MIME type for application types.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeJsonSubType">
            <summary>'json' - constant for MIME JSON subtypes.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeXmlSubType">
            <summary>'xml' - constant for MIME xml subtypes.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeODataParameterName">
            <summary>'odata' - parameter name for JSON MIME types.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeMultiPartMixed">
            <summary>MIME type for changeset multipart/mixed</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeTextPlain">
            <summary>MIME type for plain text bodies.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeTextType">
            <summary>'text' - MIME type for text subtypes.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeTextXml">
            <summary>MIME type for XML bodies (deprecated).</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.BatchRequestContentTransferEncoding">
            <summary>Content-Transfer-Encoding value for batch requests.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MimeTypeUtf8Encoding">
            <summary>Default encoding used for writing textual media link entries</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.UriHttpAbsolutePrefix">
            <summary>A prefix that turns an absolute-path URI into an absolute-URI.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.UriMetadataSegment">
            <summary>A segment name in a URI that indicates metadata is being requested.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.UriValueSegment">
            <summary>A segment name in a URI that indicates a plain primitive value is being requested.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.UriBatchSegment">
            <summary>A segment name in a URI that indicates metadata is being requested.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.UriLinkSegment">
            <summary>A segment name in a URI that indicates that this is a link operation.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.UriCountSegment">
            <summary>A segment name in a URI that indicates that this is a count operation.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.UriCountTrueOption">
            <summary>A const value for query parameter $count to set counting mode to true </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.UriCountFalseOption">
            <summary>A const value for query parameter $count to set counting mode to false </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AnyMethodName">
            <summary>Uri method name for Enumerable.Any().</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AllMethodName">
            <summary>Uri method name for Enumerable.All().</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ImplicitFilterParameter">
            <summary>Implicit parameter "it" used for Queryable.Where lambda.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.WcfBinaryElementName">
            <summary>"Binary" - WCF element name for binary content in XML-wrapping streams.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomNamespacePrefix">
            <summary> Schema Namespace prefix for atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomContentElementName">
            <summary>XML element name to mark content element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomEntryElementName">
            <summary>XML element name to mark entry element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomFeedElementName">
            <summary>XML element name to mark feed element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomAuthorElementName">
            <summary>'author' - XML element name for ATOM 'author' element for entries.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomContributorElementName">
            <summary>'contributor' - XML element name for ATOM 'author' element for entries.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomCategoryElementName">
            <summary>'category' - XML element name for ATOM 'category' element for entries.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomLinkElementName">
            <summary>XML element name to mark link element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomCategorySchemeAttributeName">
            <summary>'scheme' - XML attribute name for ATOM 'scheme' attribute for categories.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomCategoryTermAttributeName">
            <summary>'term' - XML attribute name for ATOM 'term' attribute for categories.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomIdElementName">
            <summary>XML element name to mark id element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomLinkRelationAttributeName">
            <summary>XML element name to mark link relation attribute in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomContentSrcAttributeName">
            <summary>Atom attribute that indicates the actual location for an entry's content.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomLinkNextAttributeString">
            <summary>XML element string for "next" links: [atom:link rel="next"]</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndAuthorEmail">
            <summary>author/email</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndAuthorName">
            <summary>author/name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndAuthorUri">
            <summary>author/uri</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndPublished">
            <summary>published</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndRights">
            <summary>rights</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndSummary">
            <summary>summary</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndTitle">
            <summary>title</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomUpdatedElementName">
            <summary>'updated' - XML element name for ATOM 'updated' element for entries.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndContributorEmail">
            <summary>contributor/email</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndContributorName">
            <summary>contributor/name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndContributorUri">
            <summary>contributor/uri</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndUpdated">
            <summary>updated</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndContentKindPlaintext">
            <summary>Plaintext</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndContentKindHtml">
            <summary>HTML</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.SyndContentKindXHtml">
            <summary>XHTML</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomHRefAttributeName">
            <summary>XML element name to mark href attribute element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomHRefLangAttributeName">
            <summary>XML attribute name to mark the hreflang attribute in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomSummaryElementName">
            <summary>XML element name to mark summary element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomNameElementName">
            <summary>XML element name to mark author/name or contributor/name element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomEmailElementName">
            <summary>XML element name to mark author/email or contributor/email element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomPublishedElementName">
            <summary>XML element name to mark published element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomRightsElementName">
            <summary>XML element name to mark rights element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomPublishingCollectionElementName">
            <summary>XML element name to mark 'collection' element in APP.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomPublishingServiceElementName">
            <summary>XML element name to mark 'service' element in APP.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomPublishingWorkspaceDefaultValue">
            <summary>XML value for a default workspace in APP.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomPublishingWorkspaceElementName">
            <summary>XML element name to mark 'workspace' element in APP.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomTitleElementName">
            <summary>XML element name to mark title element in Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomTypeAttributeName">
            <summary>XML attribute name to specify the type of the element.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomSelfRelationAttributeValue">
            <summary> Atom link relation attribute value for self links.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomEditRelationAttributeValue">
            <summary> Atom link relation attribute value for edit links.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomEditMediaRelationAttributeValue">
            <summary> Atom link relation attribute value for edit-media links.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomAlternateRelationAttributeValue">
            <summary>Link relation: alternate - refers to a substitute for this context.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomRelatedRelationAttributeValue">
            <summary>Link relation: related - identifies a related resource.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomEnclosureRelationAttributeValue">
            <summary>Link relation: enclosure - identifies a related resource that is potentially large and might require special handling.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomViaRelationAttributeValue">
            <summary>Link relation: via - identifies a resource that is the source of the information in the link's context.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomDescribedByRelationAttributeValue">
            <summary>Link relation: describedby - refers to a resource providing information about the link's context.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomServiceRelationAttributeValue">
            <summary>Link relation: service - indicates a URI that can be used to retrieve a service document.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomNullAttributeName">
            <summary> Atom attribute which indicates the null value for the element.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomETagAttributeName">
            <summary> Atom attribute which indicates the etag value for the declaring entry element.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomInlineElementName">
            <summary>'Inline' - wrapping element for inlined entry/feed content.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomPropertiesElementName">
            <summary>Element containing property values when 'content' is used for media link entries</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.RowCountElement">
            <summary>'count' element</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlCollectionItemElementName">
            <summary>'element', the XML element name for items in enumerations.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlErrorElementName">
            <summary>XML element name for an error.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlErrorCodeElementName">
            <summary>XML element name for an error code.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlErrorInnerElementName">
            <summary>XML element name for the inner error details.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlErrorInternalExceptionElementName">
            <summary>XML element name for an internal exception.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlErrorTypeElementName">
            <summary>XML element name for an exception type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlErrorStackTraceElementName">
            <summary>XML element name for an exception stack trace.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlErrorMessageElementName">
            <summary>XML element name for an error message.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlFalseLiteral">
            <summary>'false' literal, as used in XML.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlTrueLiteral">
            <summary>'true' literal, as used in XML.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlBaseAttributeName">
            <summary>XML attribute value to indicate the base URI for a document or element.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlSpaceAttributeName">
            <summary>XML attribute name for whitespace parsing control.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlSpacePreserveValue">
            <summary>XML attribute value to indicate whitespace should be preserved.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlBaseAttributeNameWithPrefix">
            <summary>XML attribute name to pass to the XMLReader.GetValue API to get the xml:base attribute value.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmOasisNamespace">
            <summary> Schema Namespace For Edm Oasis.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebNamespace">
            <summary>XML namespace for data services.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebMetadataNamespace">
            <summary>XML namespace for data service annotations.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebRelatedNamespace">
            <summary>XML namespace for data service links.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebRelatedLinkNamespace">
            <summary>XML namespace for data service related $ref.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebMediaResourceNamespace">
            <summary>XML namespace for data service named media resources.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebMediaResourceEditNamespace">
            <summary>XML namespace for data service edit-media link for named media resources.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebSchemeNamespace">
            <summary>ATOM Scheme Namespace For DataWeb.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AppNamespace">
            <summary>Schema Namespace for Atom Publishing Protocol.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AtomNamespace">
            <summary> Schema Namespace For Atom.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlnsNamespacePrefix">
            <summary> Schema Namespace prefix For xmlns.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlNamespacePrefix">
            <summary> Schema Namespace prefix For xml.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebNamespacePrefix">
            <summary> Schema Namespace Prefix For DataWeb.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebMetadataNamespacePrefix">
            <summary>'adsm' - namespace prefix for DataWebMetadataNamespace.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.XmlNamespacesNamespace">
            <summary>'http://www.w3.org/2000/xmlns/' - namespace for namespace declarations.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmxNamespace">
            <summary> Edmx namespace in metadata document.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmxNamespacePrefix">
            <summary> Prefix for Edmx Namespace in metadata document.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.IanaLinkRelationsNamespace">
            <summary>IANA link relations namespace.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EmptyNamespace">
            <summary>The empty namespace.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Association">
            <summary> Association Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.AssociationSet">
            <summary> AssociationSet Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ComplexType">
            <summary> ComplexType Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Dependent">
            <summary> Dependent Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmCollectionTypeName">
            <summary>The name of the EDM collection type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ActualEdmType">
            <summary>
            Attribute name used to indicate the real type of an EDM property or parameter, in cases where it needs to be different
            from the Type attribute of the Property or Parameter element. This is used to support collection types and binary keys,
            which are incompatible with EDM 1.1, which we are currently using for validation purposes.
            This attribute is inserted into the CSDL in memory while codegen is processing properties that require special
            type handling and should only be used in that scenario. This is not a real EDM or Data Services attribute.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmTypeRefElementName">
            <summary>TypeRef element name in CSDL document.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmEntitySetAttributeName">
            <summary>EntitySet attribute name in CSDL documents.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmEntitySetPathAttributeName">
            <summary>EntitySetPath attribute name in CSDL documents.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmBindableAttributeName">
            <summary>ExtensionMethod attribute name in CSDL documents.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmComposableAttributeName">
            <summary>Composable attribute name in CSDL documents.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmSideEffectingAttributeName">
            <summary>SideEffecting attribute name in CSDL documents.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmFunctionImportElementName">
            <summary>FunctionImport element name in CSDL documents.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmModeAttributeName">
            <summary>Mode attribute name in CSDL documents.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmModeInValue">
            <summary>Mode attribute value for 'in' direction in CSDL documents.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmParameterElementName">
            <summary>Parameter element name in CSDL documents.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmReturnTypeAttributeName">
            <summary>ReturnType attribute name in CSDL documents.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ActualReturnTypeAttributeName">
            <summary>
            Attribute name used to indicate the real type of an EDM operation import return type, in cases where it needs to be different
            from the ReturnType attribute of the operation import element. This is used to support special primitive types,
            which are incompatible with EDM 1.1, which we are currently using for validation purposes.
            This attribute is inserted into the CSDL in memory while codegen is processing operation imports that require special
            type handling and should only be used in that scenario. This is not a real EDM or Data Services attribute.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.End">
            <summary> End Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EntityType">
            <summary> EntityType Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EntityContainer">
            <summary> EntityContainer Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Key">
            <summary> Key Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.NavigationProperty">
            <summary> NavigationProperty Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.OnDelete">
            <summary> OnDelete Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Principal">
            <summary> Principal Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Property">
            <summary> Property Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.PropertyRef">
            <summary> PropetyRef Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ReferentialConstraint">
            <summary> ReferentialConstraint Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Role">
            <summary> Role Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Schema">
            <summary> Schema Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmxElement">
            <summary> Edmx Element Name in the metadata document.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmxDataServicesElement">
            <summary> Edmx DataServices Element Name in the metadata document.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmxVersion">
            <summary>Version attribute for the root Edmx Element in the metadata document.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmxVersionValue">
            <summary>Value of the version attribute in the root edmx element in metadata document.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ActionElementName">
            <summary>Element name for m:action.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.FunctionElementName">
            <summary>Element name for m:function</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ActionMetadataAttributeName">
            <summary>maps to m:action|m:function\@metadata</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ActionTargetAttributeName">
            <summary>maps to m:action|m:function\@target</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ActionTitleAttributeName">
            <summary>maps to m:action|m:function\@title</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.BaseType">
            <summary> BaseType attribute Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EntitySet">
            <summary> EntitySet attribute and Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EntitySetPath">
            <summary> EntitySetPath attribute and Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.FromRole">
            <summary> FromRole attribute Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Abstract">
            <summary>Abstract attribute Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Multiplicity">
            <summary>Multiplicity attribute Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Name">
            <summary>Name attribute Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Namespace">
            <summary>Namespace attribute Element Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ToRole">
            <summary>ToRole attribute Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Type">
            <summary>Type attribute Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Relationship">
            <summary>Relationship attribute Name in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.Many">
            <summary>Value for Many multiplicity in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.One">
            <summary>Value for One multiplicity in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ZeroOrOne">
            <summary>Value for ZeroOrOne multiplicity in csdl.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlNullableAttributeName">
            <summary>Nullable facet name in CSDL.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlPrecisionAttributeName">
            <summary>The attribute name of the 'Precision' facet.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlScaleAttributeName">
            <summary>The attribute name of the 'Scale' facet.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlMaxLengthAttributeName">
            <summary>The attribute name of the 'MaxLength' facet.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlFixedLengthAttributeName">
            <summary>The attribute name of the 'FixedLength' facet.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlUnicodeAttributeName">
            <summary>The attribute name of the 'Unicode' facet.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlCollationAttributeName">
            <summary>The attribute name of the 'Collation' facet.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlSridAttributeName">
            <summary>The attribute name of the 'SRID' facet.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlConcurrencyAttributeName">
            <summary>Name of the concurrency attribute.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlDefaultValueAttributeName">
            <summary>Name of the default value attribute.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CsdlMaxLengthAttributeMaxValue">
            <summary>The special value for the 'MaxLength' facet to indicate that it has the max length.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebMimeTypeAttributeName">
            <summary>'MimeType' - attribute name for property MIME type attributes.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebOpenTypeAttributeName">
            <summary>'OpenType' - attribute name to indicate a type is an OpenType property.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebAccessHasStreamAttribute">
            <summary>'HasStream' - attribute name to indicate a type has a default stream property.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.DataWebAccessDefaultStreamPropertyValue">
            <summary>'true' - attribute value to indicate a type has a default stream property.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ServiceOperationHttpMethodName">
            <summary>Attribute name in the csdl to indicate whether the service operation must be called using POST or GET verb.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.NextElementName">
            <summary>next element name for link paging</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.JsonError">
            <summary>JSON property name for an error.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.JsonErrorCode">
            <summary>JSON property name for an error code.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.JsonErrorInner">
            <summary>JSON property name for the inner error details.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.JsonErrorInternalException">
            <summary>JSON property name for an internal exception.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.JsonErrorMessage">
            <summary>JSON property name for an error message.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.JsonErrorStackTrace">
            <summary>JSON property name for an exception stack trace.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.JsonErrorType">
            <summary>JSON property name for an exception type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.JsonErrorValue">
            <summary>JSON property name for an error message value.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmNamespace">
            <summary>namespace for edm primitive types.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmBinaryTypeName">
            <summary>edm binary primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmBooleanTypeName">
            <summary>edm boolean primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmByteTypeName">
            <summary>edm byte primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmDecimalTypeName">
            <summary>edm decimal primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmDateTypeName">
            <summary>edm date primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmDoubleTypeName">
            <summary>edm double primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGuidTypeName">
            <summary>edm guid primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmSingleTypeName">
            <summary>edm single primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmSByteTypeName">
            <summary>edm sbyte primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmInt16TypeName">
            <summary>edm int16 primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmInt32TypeName">
            <summary>edm int32 primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmInt64TypeName">
            <summary>edm int64 primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmStringTypeName">
            <summary>edm string primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmStreamTypeName">
            <summary>edm stream primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmTimeOfDayTypeName">
            <summary>edm timeofday primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.CollectionTypeQualifier">
            <summary>edm string indicating that the value may be collection.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGeographyTypeName">
            <summary>Edm Geography type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmPointTypeName">
            <summary>Edm Geodetic point type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmLineStringTypeName">
            <summary>Edm Geodetic linestring type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmPolygonTypeName">
            <summary>Represents a geography Polygon type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGeographyCollectionTypeName">
            <summary>Represents a geography GeomCollection type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmMultiPolygonTypeName">
            <summary>Represents a geography MultiPolygon type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmMultiLineStringTypeName">
            <summary>Represents a geography MultiLineString type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmMultiPointTypeName">
            <summary>Represents a geography MultiPoint type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGeometryTypeName">
            <summary>Represents an arbitrary Geometry type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGeometryPointTypeName">
            <summary>Represents a geometry Point type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGeometryLineStringTypeName">
            <summary>Represents a geometry LineString type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGeometryPolygonTypeName">
            <summary>Represents a geometry Polygon type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGeometryCollectionTypeName">
            <summary>Represents a geometry GeomCollection type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGeometryMultiPolygonTypeName">
            <summary>Represents a geometry MultiPolygon type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGeometryMultiLineStringTypeName">
            <summary>Represents a geometry MultiLineString type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmGeometryMultiPointTypeName">
            <summary>Represents a geometry MultiPoint type.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmDurationTypeName">
            <summary>edm duration primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.EdmDateTimeOffsetTypeName">
            <summary>edm string primitive type name</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.ODataVersion4Dot0">
            <summary>'4.0' - the version 4.0 text for a data service.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.LiteralPrefixBinary">
            <summary>'binary' constant prefixed to binary literals.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.LiteralPrefixGeography">
            <summary>'geography' constant prefixed to geography literals.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.LiteralPrefixGeometry">
            <summary>'geometry' constant prefixed to geometry literals.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.LiteralPrefixDuration">
            <summary>'duration' constant prefixed to duration literals.</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.LiteralSuffixDecimal">
            <summary>'M': Suffix for decimal type's string representation</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.LiteralSuffixInt64">
            <summary>'L': Suffix for long (int64) type's string representation</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.LiteralSuffixSingle">
            <summary>'f': Suffix for float (single) type's string representation</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.LiteralSuffixDouble">
            <summary>'D': Suffix for double (Real) type's string representation</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.NullLiteralInETag">
            <summary>null liternal that needs to be return in ETag value when the value is null</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MicrosoftDataServicesRequestUri">
            <summary>Incoming message property name for the original reqeust uri</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.MicrosoftDataServicesRootUri">
            <summary>Incoming message property name for the original root service uri</summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.GeoRssNamespace">
            <summary>
            GeoRss namespace
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.GeoRssPrefix">
            <summary>
            The "georss" prefix
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.GmlNamespace">
            <summary>
            Gml Namespace
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.GmlPrefix">
            <summary>
            Gml Prefix
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.GeoRssWhere">
            <summary>
            Embedded Gml tag inside Georss
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.GeoRssPoint">
            <summary>
            GeoRss representation of a point
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.GeoRssLine">
            <summary>
            GeoRss representation of a line
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.GmlPosition">
            <summary>
            Gml representation of a point
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.GmlPositionList">
            <summary>
            Gml representation of a point array
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.XmlConstants.GmlLineString">
            <summary>
            Gml representation of a linestring
            </summary>
        </member>
        <member name="T:Microsoft.OData.Client.PlatformHelper">
            <summary>
            Helper methods that provide a common API surface on all platforms.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.PlatformHelper.EmptyTypes">
            <summary>
            Use this instead of Type.EmptyTypes.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.PlatformHelper.DateValidator">
            <summary>
            This pattern eliminates all invalid dates, the supported format should be "YYYY-MM-DD"
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.PlatformHelper.TimeOfDayValidator">
            <summary>
            This pattern eliminates all invalid timeOfDay, the supported format should be "hh:mm:ss.fffffff"
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.PlatformHelper.PotentialDateTimeOffsetValidator">
            <summary>
            This pattern eliminates whether a text is potentially DateTimeOffset but not others like GUID, digit .etc
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.PlatformHelper.UriSchemeHttp">
            <summary>
            Use this instead of Uri.UriSchemeHttp.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Client.PlatformHelper.UriSchemeHttps">
            <summary>
            Use this instead of Uri.UriSchemeHttps.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetAssembly(System.Type)">
            <summary>
            Replacement for Type.Assembly.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsValueType(System.Type)">
            <summary>
            Replacement for Type.IsValueType.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsGenericParameter(System.Type)">
            <summary>
            Replacement for Type.IsGenericParameter.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsAbstract(System.Type)">
            <summary>
            Replacement for Type.IsAbstract.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsGenericType(System.Type)">
            <summary>
            Replacement for Type.IsGenericType.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsGenericTypeDefinition(System.Type)">
            <summary>
            Replacement for Type.IsGenericTypeDefinition.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsVisible(System.Type)">
            <summary>
            Replacement for Type.IsVisible.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsInterface(System.Type)">
            <summary>
            Replacement for Type.IsInterface.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsClass(System.Type)">
            <summary>
            Replacement for Type.IsClass.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsEnum(System.Type)">
            <summary>
            Replacement for Type.IsEnum.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetBaseType(System.Type)">
            <summary>
            Replacement for Type.BaseType.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.ContainsGenericParameters(System.Type)">
            <summary>
            Replacement for Type.ContainsGenericParameters.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.AsReadOnly``1(``0[])">
            <summary>
            Replacement for Array.AsReadOnly(T[]).
            </summary>
            <typeparam name="T">Type of items in the array.</typeparam>
            <param name="array">Array to use to create the ReadOnlyCollection.</param>
            <returns>ReadOnlyCollection containing the specified array items.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.ConvertStringToDate(System.String)">
            <summary>
            Converts a string to a Date.
            </summary>
            <param name="text">String to be converted.</param>
            <returns>Date value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.ConvertStringToTimeOfDay(System.String)">
            <summary>
            Converts a string to a TimeOfDay.
            </summary>
            <param name="text">String to be converted.</param>
            <returns>TimeOfDay value</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.ConvertStringToDateTimeOffset(System.String)">
            <summary>
            Converts a string to a DateTimeOffset.
            </summary>
            <param name="text">String to be converted.</param>
            <returns>See documentation for method being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.ValidateTimeZoneInformationInDateTimeOffsetString(System.String)">
            <summary>
            Validates that the DateTimeOffset string contains the time zone information.
            </summary>
            <param name="text">String to be validated.</param>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.AddSecondsPaddingIfMissing(System.String)">
            <summary>
            Adds the seconds padding as zeros to the date time string if seconds part is missing.
            </summary>
            <param name="text">String that needs seconds padding</param>
            <returns>DateTime string after adding seconds padding</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetTypeOrThrow(System.String)">
            <summary>
            Gets the specified type.
            </summary>
            <param name="typeName">Name of the type to get.</param>
            <exception cref="T:System.TypeLoadException">Throws if the type could not be found.</exception>
            <returns>Type instance that represents the specified type name.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetTypeCode(System.Type)">
            <summary>
            Gets the TypeCode for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>TypeCode representing the specified type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetUnicodeCategory(System.Char)">
            <summary>
            Gets the Unicode Category of the specified character.
            </summary>
            <param name="c">Character to get category of.</param>
            <returns>Category of the character.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsProperty(System.Reflection.MemberInfo)">
            <summary>
            Replacement for usage of MemberInfo.MemberType property.
            </summary>
            <param name="member">MemberInfo on which to access this method.</param>
            <returns>True if the specified member is a property, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsPrimitive(System.Type)">
            <summary>
            Replacement for usage of Type.IsPrimitive property.
            </summary>
            <param name="type">Type on which to access this method.</param>
            <returns>True if the specified type is primitive, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsSealed(System.Type)">
            <summary>
            Replacement for usage of Type.IsSealed property.
            </summary>
            <param name="type">Type on which to access this method.</param>
            <returns>True if the specified type is sealed, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.IsMethod(System.Reflection.MemberInfo)">
            <summary>
            Replacement for usage of MemberInfo.MemberType property.
            </summary>
            <param name="member">MemberInfo on which to access this method.</param>
            <returns>True if the specified member is a method, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.AreMembersEqual(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Compares two methodInfos and returns true if they represent the same method.
            Need this for Windows Phone as the method Infos of the same method are not always instance equivalent.
            </summary>
            <param name="member1">MemberInfo to compare.</param>
            <param name="member2">MemberInfo to compare.</param>
            <returns>True if the specified member is a method, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetPublicProperties(System.Type,System.Boolean)">
            <summary>
            Gets public properties for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="instanceOnly">True if method should return only instance properties, false if it should return both instance and static properties.</param>
            <returns>Enumerable of public properties for the type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetPublicProperties(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets public properties for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="instanceOnly">True if method should return only instance properties, false if it should return both instance and static properties.</param>
            <param name="declaredOnly">True if method should return only properties that are declared on the type, false if it should return properties declared on the type as well as those inherited from any base types.</param>
            <returns>Enumerable of public properties for the type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetNonPublicProperties(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets non public properties for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="instanceOnly">True if method should return only instance properties, false if it should return both instance and static properties.</param>
            <param name="declaredOnly">True if method should return only properties that are declared on the type, false if it should return properties declared on the type as well as those inherited from any base types.</param>
            <returns>Enumerable of non public properties for the type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetInstanceConstructors(System.Type,System.Boolean)">
            <summary>
            Gets instance constructors for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="isPublic">True if method should return only public constructors, false if it should return only non-public constructors.</param>
            <returns>Enumerable of instance constructors for the specified type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetInstanceConstructor(System.Type,System.Boolean,System.Type[])">
            <summary>
            Gets a instance constructor for the type that takes the specified argument types.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="isPublic">True if method should search only public constructors, false if it should search only non-public constructors.</param>
            <param name="argTypes">Array of argument types for the constructor.</param>
            <returns>ConstructorInfo for the constructor with the specified characteristics if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.TryGetMethod(System.Type,System.String,System.Type[],System.Reflection.MethodInfo@)">
            <summary>
            Tries to the get method from the type, returns null if not found.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>Returns True if found.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetMethods(System.Type)">
            <summary>
            Gets all methods on the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>Enumerable of all methods for the specified type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetMethod(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a method on the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="name">Name of the method on the type.</param>
            <param name="isPublic">True if method should search only public methods, false if it should search only non-public methods.</param>
            <param name="isStatic">True if method should search only static methods, false if it should search only instance methods.</param>
            <returns>MethodInfo for the method with the specified characteristics if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetMethod(System.Type,System.String,System.Type[],System.Boolean,System.Boolean)">
            <summary>
            Gets a method on the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="name">Name of the method on the type.</param>
            <param name="types">Argument types for the method.</param>
            <param name="isPublic">True if method should search only public methods, false if it should search only non-public methods.</param>
            <param name="isStatic">True if method should search only static methods, false if it should search only instance methods.</param>
            <returns>MethodInfo for the method with the specified characteristics if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetPublicStaticMethods(System.Type)">
            <summary>
            Gets all public static methods for a type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>Enumerable of all public static methods for the specified type.</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.GetNonPublicNestedTypes(System.Type)">
            <summary>
            Replacement for Type.GetNestedTypes(BindingFlags.NonPublic)
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>All types nested in the current type</returns>
        </member>
        <member name="M:Microsoft.OData.Client.PlatformHelper.CreateCompiled(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Creates a Compiled Regex expression
            </summary>
            <param name="pattern">Pattern to match.</param>
            <param name="options">Options to use.</param>
            <returns>Regex expression to match supplied patter</returns>
            <remarks>Is marked as compiled option only in platforms otherwise RegexOption.None is used</remarks>
        </member>
        <member name="T:AssemblyRef">
            <summary>
            Sets public key string for friend assemblies.
            </summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKey">
            <summary>ProductPublicKey is an official MS supported public key for external releases.</summary>
        </member>
        <member name="F:AssemblyRef.TestPublicKey">
            <summary>TestPublicKey is an unsupported strong key for testing purpose only.</summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKeyToken">
            <summary>Dont know what this is</summary>
        </member>
        <member name="T:Microsoft.OData.Client.TextRes">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = TextRes.GetString(TextRes.MyIdenfitier);
             </summary>
        </member>
        <member name="T:Microsoft.OData.Client.Strings">
            <summary>
               Strongly-typed and parameterized string resources.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Batch_ExpectedContentType(System.Object)">
            <summary>
            A string like "The expected content type for a batch requests is "multipart/mixed;boundary=batch" not "{0}"."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Batch_ExpectedResponse(System.Object)">
            <summary>
            A string like "The POST request expected a response with content. ID={0}"
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Batch_UnexpectedContent(System.Object)">
            <summary>
            A string like "The web response contained unexpected sections. ID={0}"
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_ResolveEntitySetOrBaseUriRequired(System.Object)">
            <summary>
            A string like "The ResolveEntitySet function must return a non-null Uri for the EntitySet '{0}', otherwise you must set the BaseUri property."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_CannotConvertKey(System.Object)">
            <summary>
            A string like "Unable to convert value '{0}' into a key string for a URI."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_InternalError(System.Object)">
            <summary>
            A string like "Microsoft.OData.Client internal error {0}."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_SetSaveStreamWithoutNamedStreamEditLink(System.Object)">
            <summary>
            A string like "The stream named '{0}' cannot be modified because it does not have an edit-media link. Make sure that the stream name is correct and that an edit-media link for this stream is included in the entry element in the response."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_PropertyNotSupportedForMaxDataServiceVersionGreaterThanX(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' is not supported when MaxProtocolVersion is greater than '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_NoContentTypeForMediaLink(System.Object,System.Object)">
            <summary>
            A string like "Media link object of type '{0}' is configured to use the MIME type specified in the property '{1}'. However, that property's value is null or empty."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_VersionNotSupported(System.Object,System.Object)">
            <summary>
            A string like "Response version '{0}' is not supported. The only supported versions are: {1}."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_ResponseVersionIsBiggerThanProtocolVersion(System.Object,System.Object)">
            <summary>
            A string like "The response version is {0}, but the MaxProtocolVersion of the data service context is set to {1}. Set the MaxProtocolVersion to the version required by the response, and then retry the request. If the client does not support the required protocol version, then upgrade the client."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_RequestVersionIsBiggerThanProtocolVersion(System.Object,System.Object)">
            <summary>
            A string like "The request requires that version {0} of the protocol be used, but the MaxProtocolVersion of the data service context is set to {1}. Set the MaxProtocolVersion to the higher version, and then retry the operation."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_MLEWithoutSaveStream(System.Object)">
            <summary>
            A string like "The entity type {0} is marked with MediaEntry attribute but no save stream was set for the entity."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_SetSaveStreamOnMediaEntryProperty(System.Object)">
            <summary>
            A string like "Can't use SetSaveStream on entity with type {0} which has a media entry property defined."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_SetSaveStreamOnInvalidEntityState(System.Object)">
            <summary>
            A string like "Calling SetSaveStream on an entity with state '{0}' is not allowed."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_EntityDoesNotContainNamedStream(System.Object)">
            <summary>
            A string like "The entity does not have a stream named '{0}'. Make sure that the name of the stream is correct."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_MissingSelfAndEditLinkForNamedStream(System.Object)">
            <summary>
            A string like "There is no self-link or edit-media link for the stream named '{0}'. Make sure that either the self-link or edit-media link is specified for this stream."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_NullKeysAreNotSupported(System.Object)">
            <summary>
            A string like "The serialized resource has a null value in key member '{0}'. Null values are not supported in key members."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_CannotChangeStateIfAdded(System.Object)">
            <summary>
            A string like "An entity in the 'Added' state cannot be changed to '{0}', it can only be changed to 'Detached'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Context_MustBeUsedWith(System.Object,System.Object)">
            <summary>
            A string like "'{0}' must be used with '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Collection_NullCollectionReference(System.Object,System.Object)">
            <summary>
            A string like "{0}.{1} must return a non-null open property collection."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_MissingOpenProperty(System.Object,System.Object)">
            <summary>
            A string like "The open object property '{0}:{1}' is not defined."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Clienttype_MultipleOpenProperty(System.Object)">
            <summary>
            A string like "{0} has multiple definitions for OpenObjectAttribute."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_MissingProperty(System.Object,System.Object)">
            <summary>
            A string like "The closed type {0} does not have a corresponding {1} settable property."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_KeysMustBeSimpleTypes(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The key property '{0}' on for type '{1}' is of type '{2}', which is not a simple type. Only properties of simple type can be key properties."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_KeysOnDifferentDeclaredType(System.Object)">
            <summary>
            A string like "{0} has key properties declared at different levels within its type hierarchy."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_MissingMimeTypeProperty(System.Object,System.Object)">
            <summary>
            A string like "Type '{0}' has a MimeTypeProperty attribute that references the MIME type property '{1}'. However, this type does not have a property '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_MissingMimeTypeDataProperty(System.Object,System.Object)">
            <summary>
            A string like "Type '{0}' has a MimeTypeProperty attribute that references the data property '{1}'. However, this type does not have a property '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_MissingMediaEntryProperty(System.Object,System.Object)">
            <summary>
            A string like "Type '{0}' has a MediaEntry attribute that references a property called '{1}'. However, this type does not have a property '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_NoSettableFields(System.Object)">
            <summary>
            A string like "The complex type '{0}' has no settable properties."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_NullOpenProperties(System.Object)">
            <summary>
            A string like "The open type property '{0}' returned a null instance."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_Ambiguous(System.Object,System.Object)">
            <summary>
            A string like "Resolving type from '{0}' that inherits from '{1}' is ambiguous."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_UnsupportedType(System.Object)">
            <summary>
            A string like "The type '{0}' is not supported by the client library."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientType_MultipleTypesWithSameName(System.Object)">
            <summary>
            A string like "Multiple types were found with the same name '{0}'. Type names must be unique."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.WebUtil_TypeMismatchInCollection(System.Object)">
            <summary>
            A string like "An item in the collection property '{0}' is not of the correct type. All items in the collection property must be of the collection item type."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.WebUtil_TypeMismatchInNonPropertyCollection(System.Object)">
            <summary>
            A string like "A collection of item type '{0}' has an item which is not of the correct type. All items in the collection must be of the collection item type."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ClientTypeCache_NonEntityTypeCannotContainEntityProperties(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' is of entity type and it cannot be a property of the type '{1}', which is not of entity type.  Only entity types can contain navigation properties."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Deserialize_Current(System.Object,System.Object)">
            <summary>
            A string like "The current value '{1}' type is not compatible with the expected '{0}' type."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Deserialize_MismatchAtomLinkFeedPropertyNotCollection(System.Object)">
            <summary>
            A string like "Error processing response stream. Atom payload has a feed and the property '{0}' is not a collection."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Deserialize_MismatchAtomLinkEntryPropertyIsCollection(System.Object)">
            <summary>
            A string like "Error processing response stream. Atom payload has an entry and the property '{0}' is a collection."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Deserialize_ServerException(System.Object)">
            <summary>
            A string like "Error processing response stream. Server failed with following message:\r\n{0}"
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Collection_NullCollectionNotSupported(System.Object)">
            <summary>
            A string like "The value of the property '{0}' is null. Properties that are a collection type of primitive or complex types cannot be null."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Collection_NullNonPropertyCollectionNotSupported(System.Object)">
            <summary>
            A string like "The value of the collection of item type '{0}' is null. A collection cannot have a null value."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.EntityDescriptor_MissingSelfEditLink(System.Object)">
            <summary>
            A string like "The entity with identity '{0}' does not have a self-link or an edit-link associated with it. Please make sure that the entity has either a self-link or an edit-link associated with it."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.HttpProcessUtility_EncodingNotSupported(System.Object)">
            <summary>
            A string like "Character set '{0}' is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.HttpProcessUtility_EscapeCharWithoutQuotes(System.Object)">
            <summary>
            A string like "Value for MIME type parameter '{0}' is incorrect because it contained escape characters even though it was not quoted."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.HttpProcessUtility_EscapeCharAtEnd(System.Object)">
            <summary>
            A string like "Value for MIME type parameter '{0}' is incorrect because it terminated with escape character. Escape characters must always be followed by a character in a parameter value."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.HttpProcessUtility_ClosingQuoteNotFound(System.Object)">
            <summary>
            A string like "Value for MIME type parameter '{0}' is incorrect because the closing quote character could not be found while the parameter value started with a quote character."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_UnsupportedExpression(System.Object)">
            <summary>
            A string like "The expression type {0} is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_CouldNotConvert(System.Object)">
            <summary>
            A string like "Could not convert constant {0} expression to string."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_MethodNotSupported(System.Object)">
            <summary>
            A string like "The method '{0}' is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_UnaryNotSupported(System.Object)">
            <summary>
            A string like "The unary operator '{0}' is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_BinaryNotSupported(System.Object)">
            <summary>
            A string like "The binary operator '{0}' is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_ConstantNotSupported(System.Object)">
            <summary>
            A string like "The constant for '{0}' is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_MemberAccessNotSupported(System.Object)">
            <summary>
            A string like "The member access of '{0}' is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_CantCastToUnsupportedPrimitive(System.Object)">
            <summary>
            A string like "Can't cast to unsupported type '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_CantTranslateExpression(System.Object)">
            <summary>
            A string like "The expression {0} is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_TranslationError(System.Object)">
            <summary>
            A string like "Error translating Linq expression to URI: {0}"
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_CantAddDuplicateQueryOption(System.Object)">
            <summary>
            A string like "Can't add duplicate query option '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_CantAddAstoriaQueryOption(System.Object)">
            <summary>
            A string like "Can't add query option '{0}' because it would conflict with the query options from the translated Linq expression."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_CantAddQueryOptionStartingWithDollarSign(System.Object)">
            <summary>
            A string like "Can't add query option '{0}' because it begins with reserved character '$'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_CantReferToPublicField(System.Object)">
            <summary>
            A string like "Referencing public field '{0}' not supported in query option expression.  Use public property instead."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_QueryOptionOutOfOrder(System.Object,System.Object)">
            <summary>
            A string like "The {0} query option cannot be specified after the {1} query option."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_ProjectionMemberAssignmentMismatch(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Cannot initialize an instance of entity type '{0}' because '{1}' and '{2}' do not refer to the same source entity."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_InvalidExpressionInNavigationPath(System.Object)">
            <summary>
            A string like "The expression '{0}' is not a valid expression for navigation path. The only supported operations inside the lambda expression body are MemberAccess and TypeAs. The expression must contain at least one MemberAccess and it cannot end with TypeAs."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_ExpressionNotSupportedInProjectionToEntity(System.Object,System.Object)">
            <summary>
            A string like "Initializing instances of the entity type {0} with the expression {1} is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_ExpressionNotSupportedInProjection(System.Object,System.Object)">
            <summary>
            A string like "Constructing or initializing instances of the type {0} with the expression {1} is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_PropertyNamesMustMatchInProjections(System.Object,System.Object)">
            <summary>
            A string like "Cannot assign the value from the {0} property to the {1} property.  When projecting results into a entity type, the property names of the source type and the target type must match for the properties being projected."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_CollectionPropertyNotSupportedInOrderBy(System.Object)">
            <summary>
            A string like "The collection property '{0}' cannot be used in an 'orderby' query expression. Collection properties are not supported by the 'orderby' query option."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_CollectionPropertyNotSupportedInWhere(System.Object)">
            <summary>
            A string like "The collection property '{0}' cannot be used in a 'where' query expression. Collection properties are only supported as the source of 'any' or 'all' methods in a 'where' query option."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_CollectionMemberAccessNotSupportedInNavigation(System.Object)">
            <summary>
            A string like "Navigation to members of the collection property '{0}' in a 'select' query expression is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_LinkPropertyNotSupportedInExpression(System.Object)">
            <summary>
            A string like "The property '{0}' of type 'DataServiceStreamLink' cannot be used in 'where' or 'orderby' query expressions. Properties of type 'DataServiceStreamLink' are not supported by these query options."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_ExpressionCannotEndWithTypeAs(System.Object,System.Object)">
            <summary>
            A string like "Unsupported expression '{0}' in '{1}' method. Expression cannot end with TypeAs."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_TypeAsArgumentNotEntityType(System.Object)">
            <summary>
            A string like "The type '{0}' is not an entity type. The target type for a TypeAs operator must be an entity type."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_InvalidSourceForAnyAll(System.Object)">
            <summary>
            A string like "The source parameter for the '{0}' method has to be either a navigation or a collection property."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_AnyAllNotSupportedInOrderBy(System.Object)">
            <summary>
            A string like "The method '{0}' is not supported by the 'orderby' query option."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_IllegalSystemQueryOption(System.Object)">
            <summary>
            A string like "Found the following illegal system token while building a projection or expansion path: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_IllegalPathStructure(System.Object)">
            <summary>
            A string like "Found a projection as a non-leaf segment in an expand path. Please rephrase your query. The projected property was : '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ALinq_TypeTokenWithNoTrailingNavProp(System.Object)">
            <summary>
            A string like "Found an illegal type token '{0}' without a trailing navigation property."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_DataServiceCollectionArgumentMustHaveEntityType(System.Object)">
            <summary>
            A string like "The DataServiceCollection to be tracked must contain entity typed elements with at least one key property. The element type '{0}' does not have any key property."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_CollectionPropertySetterValueHasObserver(System.Object,System.Object)">
            <summary>
            A string like "Setting an instance of DataServiceCollection to an entity property is disallowed if the instance is already being tracked. Error occurred on property '{0}' for entity type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_DataServiceCollectionChangedUnknownActionCollection(System.Object)">
            <summary>
            A string like "Unexpected action '{0}' on the OnCollectionChanged event raised by DataServiceCollection."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_CollectionChangedUnknownActionCollection(System.Object,System.Object)">
            <summary>
            A string like "Unexpected action '{0}' on the OnCollectionChanged event raised by a collection object of type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_BindingOperation_ArrayItemNull(System.Object)">
            <summary>
            A string like "Null values are disallowed during '{0}' operations on DataServiceCollection."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_BindingOperation_ArrayItemNotEntity(System.Object)">
            <summary>
            A string like "A value provided during '{0}' operation on DataServiceCollection is not of an entity type with key."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_Util_UnknownEntitySetName(System.Object)">
            <summary>
            A string like "Entity set name has not been provided for an entity of type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_EntityAlreadyInCollection(System.Object)">
            <summary>
            A string like "An attempt was made to add entity of type '{0}' to a collection in which the same entity already exists."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_NotifyPropertyChangedNotImpl(System.Object)">
            <summary>
            A string like "An attempt to track an entity or complex type failed because the entity or complex type '{0}' does not implement the INotifyPropertyChanged interface."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_NotifyCollectionChangedNotImpl(System.Object)">
            <summary>
            A string like "An attempt to track an entity or complex type failed because the entity or complex type contains a collection property of type '{0}' that does not implement the INotifyCollectionChanged interface."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_ComplexObjectAssociatedWithMultipleEntities(System.Object)">
            <summary>
            A string like "An attempt to track a complex object of type '{0}' failed because the complex object is already being tracked."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.DataBinding_CollectionAssociatedWithMultipleEntities(System.Object)">
            <summary>
            A string like "An attempt to track a collection object of type '{0}' failed because the collection object is already being tracked."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_CannotAssignNull(System.Object,System.Object)">
            <summary>
            A string like "The null value from property '{0}' cannot be assigned to a type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_EntryIntoCollectionMismatch(System.Object,System.Object)">
            <summary>
            A string like "An entry of type '{0}' cannot be added to a collection that contains instances of type '{1}'. This may occur when an existing entry of a different type has the same identity value or when the same entity is projected into two different types in a single query."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_EntryToAccessIsNull(System.Object)">
            <summary>
            A string like "An entry returned by the navigation property '{0}' is null and cannot be initialized. You should check for a null value before accessing this property."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_EntryToInitializeIsNull(System.Object)">
            <summary>
            A string like "An entry that contains the data required to create an instance of type '{0}' is null and cannot be initialized. You should check for a null value before accessing this entry."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_ProjectEntityTypeMismatch(System.Object,System.Object,System.Object)">
            <summary>
            A string like "An entity of type '{0}' cannot be projected because there is already an instance of type '{1}' for '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_PropertyMissing(System.Object)">
            <summary>
            A string like "The expected property '{0}' could not be found while processing an entry. Check for null before accessing this property."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_PropertyNotExpectedEntry(System.Object)">
            <summary>
            A string like "Property '{0}' is not an entity."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_NoParameterlessCtorForCollectionProperty(System.Object,System.Object)">
            <summary>
            A string like "Collection property '{0}' cannot be created because the type '{1}' does not have a public parameterless constructor."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_InvalidCollectionItem(System.Object)">
            <summary>
            A string like "The element '{0}' is not a valid collection item. The name of the collection item element must be 'element' and must belong to the 'http://docs.oasis-open.org/odata/ns/data' namespace."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_InvalidEntityType(System.Object)">
            <summary>
            A string like "There is a type mismatch between the client and the service. Type '{0}' is an entity type, but the type in the response payload does not represent an entity type. Please ensure that types defined on the client match the data model of the service, or update the service reference on the client."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_InvalidNonEntityType(System.Object)">
            <summary>
            A string like "There is a type mismatch between the client and the service. Type '{0}' is not an entity type, but the type in the response payload represents an entity type. Please ensure that types defined on the client match the data model of the service, or update the service reference on the client."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_CollectionExpectedCollection(System.Object)">
            <summary>
            A string like "Materialization of top level collection expected ICollection&lt;&gt;, but actual type was {0}."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_InvalidResponsePayload(System.Object)">
            <summary>
            A string like "The response payload is a not a valid response payload. Please make sure that the top level element is a valid Atom or JSON element or belongs to '{0}' namespace."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_InvalidContentTypeEncountered(System.Object)">
            <summary>
            A string like "The response content type '{0}' is not currently supported."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_MaterializationTypeError(System.Object)">
            <summary>
            A string like "Cannot materialize the results into a collection type '{0}' because it does not have a parameterless constructor."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.AtomMaterializer_TypeShouldBeCollectionError(System.Object)">
            <summary>
            A string like "Cannot materialize a collection of a primitives or complex without the type '{0}' being a collection."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Serializer_LoopsNotAllowedInComplexTypes(System.Object)">
            <summary>
            A string like "A circular loop was detected while serializing the property '{0}'. You must make sure that loops are not present in properties that return a collection or complex type."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Serializer_LoopsNotAllowedInNonPropertyComplexTypes(System.Object)">
            <summary>
            A string like "A circular loop was detected while serializing the complex type '{0}'. You must make sure that loops are not present in a collection or a complex type."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Serializer_InvalidCollectionParamterItemType(System.Object,System.Object)">
            <summary>
            A string like "The operation parameter named '{0}' has a collection item of Edm type kind '{1}'. A collection item must be either a primitive type or a complex Edm type kind."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Serializer_NullCollectionParamterItemValue(System.Object)">
            <summary>
            A string like "The operation parameter named '{0}' has a null collection item. The items of a collection must not be null."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Serializer_InvalidParameterType(System.Object,System.Object)">
            <summary>
            A string like "The operation parameter named '{0}' was of Edm type kind '{1}'. An operation parameter must be either a primitive type, a complex type or a collection of primitive or complex types."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Serializer_UriDoesNotContainParameterAlias(System.Object)">
            <summary>
            A string like "The parameter alias '{0}' was not present in the request URI. All parameters passed as alias must be present in the request URI."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.Serializer_InvalidEnumMemberValue(System.Object,System.Object)">
            <summary>
            A string like "The enum type '{0}' has no member named '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.General_InternalError(System.Object)">
            <summary>
            A string like "An internal error '{0}' occurred."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ODataMetadataBuilder_MissingEntitySetUri(System.Object)">
            <summary>
            A string like "The entity set '{0}' doesn't have the 'OData.EntitySetUri' annotation. This annotation is required."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ODataMetadataBuilder_MissingSegmentForEntitySetUriSuffix(System.Object,System.Object)">
            <summary>
            A string like "The entity set '{0}' has a URI '{1}' which has no path segments. An entity set URI suffix cannot be appended to a URI without path segments."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ODataMetadataBuilder_MissingEntityInstanceUri(System.Object)">
            <summary>
            A string like "Neither the 'OData.EntityInstanceUri' nor the 'OData.EntitySetUriSuffix' annotation was found for entity set '{0}'. One of these annotations is required."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.EdmValueUtils_UnsupportedPrimitiveType(System.Object)">
            <summary>
            A string like "The type '{0}' was found for a primitive value. In OData, the type '{0}' is not a supported primitive type."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.EdmValueUtils_IncorrectPrimitiveTypeKind(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Incompatible primitive type kinds were found. The type '{0}' was found to be of kind '{2}' instead of the expected kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.EdmValueUtils_IncorrectPrimitiveTypeKindNoTypeName(System.Object,System.Object)">
            <summary>
            A string like "Incompatible primitive type kinds were found. Found type kind '{0}' instead of the expected kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.EdmValueUtils_CannotConvertTypeToClrValue(System.Object)">
            <summary>
            A string like "A value with primitive kind '{0}' cannot be converted into a primitive object value."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.ValueParser_InvalidDuration(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid duration value."
            </summary>
        </member>
        <member name="M:Microsoft.OData.Client.Strings.PlatformHelper_DateTimeOffsetMustContainTimeZone(System.Object)">
            <summary>
            A string like "The time zone information is missing on the DateTimeOffset value '{0}'. A DateTimeOffset value must contain the time zone information."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Batch_IncompleteResponseCount">
            <summary>
            A string like "Not all requests in the batch had a response."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_BaseUri">
            <summary>
            A string like "Expected an absolute, well formed http URL without a query or fragment."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_BaseUriRequired">
            <summary>
            A string like "You must set the BaseUri property before you perform this operation."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_ResolveReturnedInvalidUri">
            <summary>
            A string like "The Uri that is returned by the ResolveEntitySet function must be an absolute, well-formed URL with an "http" or "https" scheme name and without any query strings or fragment identifiers."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_RequestUriIsRelativeBaseUriRequired">
            <summary>
            A string like "Because the requestUri is a relative Uri, you must set the BaseUri property on the DataServiceContext."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_TrackingExpectsAbsoluteUri">
            <summary>
            A string like "The identity value specified by either the Atom id element or the OData-EntityId header must be an absolute URI."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_LocationHeaderExpectsAbsoluteUri">
            <summary>
            A string like "The 'Location' header value specified in the response must be an absolute URI."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_LinkResourceInsertFailure">
            <summary>
            A string like "One of the link's resources failed to insert."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_BatchExecuteError">
            <summary>
            A string like "An error occurred for this query during batch execution.  See the inner exception for details."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_EntitySetName">
            <summary>
            A string like "Expected a relative URL path without query or fragment."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_BatchNotSupportedForNamedStreams">
            <summary>
            A string like "Changes cannot be saved as a batch when an entity has one or more streams associated with it. Retry the SaveChanges operation without enabling the SaveChangesOptions.BatchWithSingleChangeset and the SaveChangesOptions.BatchWithIndependentOperations options."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Content_EntityWithoutKey">
            <summary>
            A string like "This operation requires the entity be of an Entity Type, and has at least one key property."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Content_EntityIsNotEntityType">
            <summary>
            A string like "This operation requires the entity to be of an Entity Type, either mark its key properties, or attribute the class with DataServiceEntityAttribute"
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_EntityNotContained">
            <summary>
            A string like "The context is not currently tracking the entity."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_EntityAlreadyContained">
            <summary>
            A string like "The context is already tracking the entity."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_DifferentEntityAlreadyContained">
            <summary>
            A string like "The context is already tracking a different entity with the same resource Uri."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_DidNotOriginateAsync">
            <summary>
            A string like "The current object did not originate the async result."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_AsyncAlreadyDone">
            <summary>
            A string like "The asynchronous result has already been completed."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_OperationCanceled">
            <summary>
            A string like "The operation has been canceled."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_NoLoadWithInsertEnd">
            <summary>
            A string like "The context can not load the related collection or reference for objects in the added state."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_NoRelationWithInsertEnd">
            <summary>
            A string like "One or both of the ends of the relationship is in the added state."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_NoRelationWithDeleteEnd">
            <summary>
            A string like "One or both of the ends of the relationship is in the deleted state."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_RelationAlreadyContained">
            <summary>
            A string like "The context is already tracking the relationship."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_RelationNotRefOrCollection">
            <summary>
            A string like "The sourceProperty is not a reference or collection of the target's object type."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_AddLinkCollectionOnly">
            <summary>
            A string like "AddLink and DeleteLink methods only work when the sourceProperty is a collection."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_AddRelatedObjectCollectionOnly">
            <summary>
            A string like "AddRelatedObject method only works when the sourceProperty is a collection."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_AddRelatedObjectSourceDeleted">
            <summary>
            A string like "AddRelatedObject method only works if the source entity is in a non-deleted state."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_UpdateRelatedObjectNonCollectionOnly">
            <summary>
            A string like "UpdateRelatedObject method only works when the sourceProperty is not collection."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_SetLinkReferenceOnly">
            <summary>
            A string like "SetLink method only works when the sourceProperty is not a collection."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_BatchNotSupportedForMediaLink">
            <summary>
            A string like "Saving entities with the [MediaEntry] attribute is not currently supported in batch mode. Use non-batched mode instead."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_UnexpectedZeroRawRead">
            <summary>
            A string like "Unexpected result (&lt;= 0) from stream.Read() while reading raw data for this property."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_ChildResourceExists">
            <summary>
            A string like "Attempt to delete a link between two objects failed because the identity of the target object of the link depends on the source object of the link."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_ContentTypeRequiredForNamedStream">
            <summary>
            A string like "The ContentType value for a named stream cannot be null or an empty string."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_EntityNotMediaLinkEntry">
            <summary>
            A string like "This operation requires that the specified entity be a Media Link Entry and that the ReadStreamUri be available. However, the specified entity either is not a Media Link Entry or does not have a valid ReadStreamUri value. If the entity is a Media Link Entry, re-query the data service for this entity to obtain a valid ReadStreamUri value."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_SetSaveStreamWithoutEditMediaLink">
            <summary>
            A string like "There is no edit-media link for the entity's media stream. Make sure that the edit-media link is specified for this stream."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_BothLocationAndIdMustBeSpecified">
            <summary>
            A string like "The response should have both 'Location' and 'OData-EntityId' headers or the response should not have any of these headers."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_BodyOperationParametersNotAllowedWithGet">
            <summary>
            A string like "OperationParameter of type BodyOperationParameter cannot be specified when the HttpMethod is set to GET."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_MissingOperationParameterName">
            <summary>
            A string like "The Name property of an OperationParameter must be set to a non-null, non-empty string."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_DuplicateUriOperationParameterName">
            <summary>
            A string like "Multiple uri operation parameters were found with the same name. Uri operation parameter names must be unique."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_DuplicateBodyOperationParameterName">
            <summary>
            A string like "Multiple body operation parameters were found with the same name. Body operation parameter names must be unique."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_ExecuteExpectsGetOrPostOrDelete">
            <summary>
            A string like "The HttpMethod must be GET, POST or DELETE."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_EndExecuteExpectedVoidResponse">
            <summary>
            A string like "EndExecute overload for void service operations and actions received a non-void response from the server."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_NullElementInOperationParameterArray">
            <summary>
            A string like "The operation parameters array contains a null element which is not allowed."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_EntityMetadataBuilderIsRequired">
            <summary>
            A string like "An implementation of ODataEntityMetadataBuilder is required, but a null value was returned from GetEntityMetadataBuilder."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_CannotChangeStateToAdded">
            <summary>
            A string like "The ChangeState method does not support the 'Added' state because additional information is needed for inserts. Use either AddObject or AddRelatedObject instead."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_CannotChangeStateToModifiedIfNotUnchanged">
            <summary>
            A string like "The entity's state can only be changed to 'Modified' if it is currently 'Unchanged'."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_OnMessageCreatingReturningNull">
            <summary>
            A string like "DataServiceContext.Configurations.RequestPipeline.OnMessageCreating property must not return a null value. Please return a non-null value for this property."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_SendingRequest_InvalidWhenUsingOnMessageCreating">
            <summary>
            A string like "SendingRequest cannot be used in combination with the DataServiceContext.Configurations.RequestPipeline.OnMessageCreating property. Please use SendingRequest2 with DataServiceContext.Configurations.RequestPipeline.OnMessageCreating property instead."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceClientFormat_LoadServiceModelRequired">
            <summary>
            A string like "When you call the UseJson method without a parameter, you must use the LoadServiceModel property to provide a valid IEdmModel instance."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceClientFormat_ValidServiceModelRequiredForJson">
            <summary>
            A string like "To use the JSON format, you must first call DataServiceContext.Format.UseJson() and supply a valid service model."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ClientType_MultipleImplementationNotSupported">
            <summary>
            A string like "Multiple implementations of ICollection&lt;T&gt; is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ClientType_CollectionOfCollectionNotSupported">
            <summary>
            A string like "Collection properties of a collection type are not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceException_GeneralError">
            <summary>
            A string like "An error occurred while processing this request."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Deserialize_GetEnumerator">
            <summary>
            A string like "Only a single enumeration is supported by this IEnumerable."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Deserialize_MixedTextWithComment">
            <summary>
            A string like "Error processing response stream. Element value interspersed with a comment is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Deserialize_ExpectingSimpleValue">
            <summary>
            A string like "Error processing response stream. The XML element contains mixed content."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Deserialize_MismatchAtomLinkLocalSimple">
            <summary>
            A string like "Error processing response stream. Atom payload has a link, local object has a simple value."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Deserialize_NoLocationHeader">
            <summary>
            A string like "The response to this POST request did not contain a 'location' header. That is not supported by this client."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Deserialize_MissingIdElement">
            <summary>
            A string like "Error processing response stream. Missing id element in the response."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Collection_NullCollectionItemsNotSupported">
            <summary>
            A string like "An item in the collection property has a null value. Collection properties that contain items with null values are not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Collection_ComplexTypesInCollectionOfPrimitiveTypesNotAllowed">
            <summary>
            A string like "A collection property of primitive types cannot contain an item of a complex type."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Collection_PrimitiveTypesInCollectionOfComplexTypesNotAllowed">
            <summary>
            A string like "A collection property of complex types cannot contain an item of a primitive type."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.HttpProcessUtility_ContentTypeMissing">
            <summary>
            A string like "Content-Type header value missing."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.HttpProcessUtility_MediaTypeMissingValue">
            <summary>
            A string like "Media type is missing a parameter value."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.HttpProcessUtility_MediaTypeRequiresSemicolonBeforeParameter">
            <summary>
            A string like "Media type requires a ';' character before a parameter definition."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.HttpProcessUtility_MediaTypeRequiresSlash">
            <summary>
            A string like "Media type requires a '/' character."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.HttpProcessUtility_MediaTypeRequiresSubType">
            <summary>
            A string like "Media type requires a subtype definition."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.HttpProcessUtility_MediaTypeUnspecified">
            <summary>
            A string like "Media type is unspecified."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.MaterializeFromAtom_CountNotPresent">
            <summary>
            A string like "Count value is not part of the response stream."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.MaterializeFromAtom_TopLevelLinkNotAvailable">
            <summary>
            A string like "The top level link is only available after the response has been enumerated."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.MaterializeFromAtom_CollectionKeyNotPresentInLinkTable">
            <summary>
            A string like "The collection is not part of the current entry"
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.MaterializeFromAtom_GetNestLinkForFlatCollection">
            <summary>
            A string like "This response does not contain any nested collections. Use null as Key instead."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ODataRequestMessage_GetStreamMethodNotSupported">
            <summary>
            A string like "GetStream method is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Util_EmptyString">
            <summary>
            A string like "Empty string."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Util_EmptyArray">
            <summary>
            A string like "Empty array."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Util_NullArrayElement">
            <summary>
            A string like "Array contains a null element."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_TypeBinaryNotSupported">
            <summary>
            A string like "An operation between an expression and a type is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_ConditionalNotSupported">
            <summary>
            A string like "The conditional expression is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_ParameterNotSupported">
            <summary>
            A string like "The parameter expression is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_LambdaNotSupported">
            <summary>
            A string like "Lambda Expressions not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_NewNotSupported">
            <summary>
            A string like "New Expressions not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_MemberInitNotSupported">
            <summary>
            A string like "Member Init Expressions not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_ListInitNotSupported">
            <summary>
            A string like "List Init Expressions not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_NewArrayNotSupported">
            <summary>
            A string like "New Array Expressions not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_InvocationNotSupported">
            <summary>
            A string like "Invocation Expressions not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_QueryOptionsOnlyAllowedOnLeafNodes">
            <summary>
            A string like "Can only specify query options (orderby, where, take, skip) after last navigation."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CantExpand">
            <summary>
            A string like "Expand query option not allowed."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CantNavigateWithoutKeyPredicate">
            <summary>
            A string like "Individual properties can only be selected from a single resource or as part of a type. Specify a key predicate to restrict the entity set to a single instance or project the property into a named or anonymous type."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CanOnlyApplyOneKeyPredicate">
            <summary>
            A string like "Multiple key predicates cannot be specified for the same entity set."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CantAddQueryOption">
            <summary>
            A string like "Custom query option not allowed."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_QueryOptionsOnlyAllowedOnSingletons">
            <summary>
            A string like "Cannot specify query options (orderby, where, take, skip, count) on single resource."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CannotAddCountOption">
            <summary>
            A string like "Cannot add count option to the resource set."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CannotAddCountOptionConflict">
            <summary>
            A string like "Cannot add count option to the resource set because it would conflict with existing count options."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_ProjectionOnlyAllowedOnLeafNodes">
            <summary>
            A string like "Can only specify 'select' query option after last navigation."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_ProjectionCanOnlyHaveOneProjection">
            <summary>
            A string like "Cannot translate multiple Linq Select operations in a single 'select' query option."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CannotConstructKnownEntityTypes">
            <summary>
            A string like "Construction of entity type instances must use object initializer with default constructor."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CannotCreateConstantEntity">
            <summary>
            A string like "Referencing of local entity type instances not supported when projecting results."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CanOnlyProjectTheLeaf">
            <summary>
            A string like "Can only project the last entity type in the query being translated."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CannotProjectWithExplicitExpansion">
            <summary>
            A string like "Cannot create projection while there is an explicit expansion specified on the same query."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_OfTypeArgumentNotAvailable">
            <summary>
            A string like "The target type for an OfType filter could not be determined."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_CannotUseTypeFiltersMultipleTimes">
            <summary>
            A string like "Non-redundant type filters (OfType&lt;T&gt;, C# 'as' and VB 'TryCast') can only be used once per resource set."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_TypeAsNotSupportedForMaxDataServiceVersionLessThan3">
            <summary>
            A string like "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '3.0'."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.ALinq_FormatQueryOptionNotSupported">
            <summary>
            A string like "The '$format' query option is not supported. Use the DataServiceContext.Format property to set the desired format."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DSKAttribute_MustSpecifyAtleastOnePropertyName">
            <summary>
            A string like "DataServiceKey attribute must specify at least one property name."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceCollection_LoadRequiresTargetCollectionObserved">
            <summary>
            A string like "Target collection for the Load operation must have an associated DataServiceContext."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceCollection_CannotStopTrackingChildCollection">
            <summary>
            A string like "The tracking of DataServiceCollection can not be stopped for child collections."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceCollection_OperationForTrackedOnly">
            <summary>
            A string like "This operation is only supported on collections that are being tracked."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceCollection_CannotDetermineContextFromItems">
            <summary>
            A string like "The DataServiceContext to which the DataServiceCollection instance belongs could not be determined. The DataServiceContext must either be supplied in the DataServiceCollection constructor or be used to create the DataServiceQuery or QueryOperationResponse object that is the source of the items in the DataServiceCollection."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceCollection_InsertIntoTrackedButNotLoadedCollection">
            <summary>
            A string like "An item could not be added to the collection. When items in a DataServiceCollection are tracked by the DataServiceContext, new items cannot be added before items have been loaded into the collection."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceCollection_MultipleLoadAsyncOperationsAtTheSameTime">
            <summary>
            A string like "A previous LoadAsync operation has not yet completed. You cannot call the LoadAsync method on the DataServiceCollection again until the previous operation has completed."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceCollection_LoadAsyncNoParamsWithoutParentEntity">
            <summary>
            A string like "The LoadAsync method cannot be called when the DataServiceCollection is not a child collection of a related entity."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceCollection_LoadAsyncRequiresDataServiceQuery">
            <summary>
            A string like "Only a typed DataServiceQuery object can be supplied when calling the LoadAsync method on DataServiceCollection."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataBinding_BindingOperation_DetachedSource">
            <summary>
            A string like "Add/Update/Delete operation cannot be performed on a child entity, if the parent entity is already detached."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.AtomParser_SingleEntry_NoneFound">
            <summary>
            A string like "Expected exactly one Atom entry in the response from the server, but none was found."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.AtomParser_SingleEntry_MultipleFound">
            <summary>
            A string like "Expected exactly one Atom entry in the response from the server, but more than one was found."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.AtomParser_SingleEntry_ExpectedFeedOrEntry">
            <summary>
            A string like "Expected an Atom feed or entry in the response from the server, but found an unexpected element instead."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.AtomMaterializer_DataServiceCollectionNotSupportedForNonEntities">
            <summary>
            A string like "A DataServiceCollection can only contain entity types. Primitive and complex types cannot be contained by this kind of collection."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.AtomMaterializer_ResetAfterEnumeratorCreationError">
            <summary>
            A string like "Reset should never be called for collection reader in an internal enumerable."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceQuery_EnumerationNotSupported">
            <summary>
            A string like "This target framework does not enable you to directly enumerate over a data service query. This is because enumeration automatically sends a synchronous request to the data service. Because this framework only supports asynchronous operations, you must instead call the BeginExecute and EndExecute methods to obtain a query result that supports enumeration."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_SendingRequestEventArgsNotHttp">
            <summary>
            A string like "Only instances of HttpWebRequest are currently allowed for this property. Other subtypes of WebRequest are not supported."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.DataServiceRequest_FailGetCount">
            <summary>
            A string like "Failed to get the count value from the server."
            </summary>
        </member>
        <member name="P:Microsoft.OData.Client.Strings.Context_ExecuteExpectedVoidResponse">
            <summary>
            A string like "Execute overload for void service operations and actions received a non-void response from the server."
            </summary>
        </member>
    </members>
</doc>
